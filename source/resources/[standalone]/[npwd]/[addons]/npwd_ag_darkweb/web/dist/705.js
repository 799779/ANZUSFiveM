/*! For license information please see 705.js.LICENSE.txt */
(self.webpackChunknpwd_ag_darkweb=self.webpackChunknpwd_ag_darkweb||[]).push([[705,803],{8442:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});const o=function(e){return"string"==typeof e}},5500:(e,t,r)=>{"use strict";var o=r(4836);t.Z=void 0;var n=o(r(4938)),a=r(5893),i=(0,n.default)((0,a.jsx)("path",{d:"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z"}),"ShoppingCart");t.Z=i},4938:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.createSvgIcon}});var o=r(6280)},7109:(e,t,r)=>{"use strict";r.d(t,{Z:()=>Z});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(9602),c=r(6122),d=r(5949),u=r(5893);const p=(0,d.Z)((0,u.jsx)("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}),"Person");var m=r(4867);function v(e){return(0,m.Z)("MuiAvatar",e)}(0,r(1588).Z)("MuiAvatar",["root","colorDefault","circular","rounded","square","img","fallback"]);const h=["alt","children","className","component","imgProps","sizes","src","srcSet","variant"],f=(0,l.ZP)("div",{name:"MuiAvatar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,t[r.variant],r.colorDefault&&t.colorDefault]}})((({theme:e,ownerState:t})=>(0,n.Z)({position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),lineHeight:1,borderRadius:"50%",overflow:"hidden",userSelect:"none"},"rounded"===t.variant&&{borderRadius:(e.vars||e).shape.borderRadius},"square"===t.variant&&{borderRadius:0},t.colorDefault&&(0,n.Z)({color:(e.vars||e).palette.background.default},e.vars?{backgroundColor:e.vars.palette.Avatar.defaultBg}:{backgroundColor:"light"===e.palette.mode?e.palette.grey[400]:e.palette.grey[600]})))),g=(0,l.ZP)("img",{name:"MuiAvatar",slot:"Img",overridesResolver:(e,t)=>t.img})({width:"100%",height:"100%",textAlign:"center",objectFit:"cover",color:"transparent",textIndent:1e4}),b=(0,l.ZP)(p,{name:"MuiAvatar",slot:"Fallback",overridesResolver:(e,t)=>t.fallback})({width:"75%",height:"75%"}),Z=a.forwardRef((function(e,t){const r=(0,c.Z)({props:e,name:"MuiAvatar"}),{alt:l,children:d,className:p,component:m="div",imgProps:Z,sizes:y,src:x,srcSet:S,variant:w="circular"}=r,R=(0,o.Z)(r,h);let C=null;const k=function({crossOrigin:e,referrerPolicy:t,src:r,srcSet:o}){const[n,i]=a.useState(!1);return a.useEffect((()=>{if(!r&&!o)return;i(!1);let n=!0;const a=new Image;return a.onload=()=>{n&&i("loaded")},a.onerror=()=>{n&&i("error")},a.crossOrigin=e,a.referrerPolicy=t,a.src=r,o&&(a.srcset=o),()=>{n=!1}}),[e,t,r,o]),n}((0,n.Z)({},Z,{src:x,srcSet:S})),P=x||S,M=P&&"error"!==k,$=(0,n.Z)({},r,{colorDefault:!M,component:m,variant:w}),N=(e=>{const{classes:t,variant:r,colorDefault:o}=e,n={root:["root",r,o&&"colorDefault"],img:["img"],fallback:["fallback"]};return(0,s.Z)(n,v,t)})($);return C=M?(0,u.jsx)(g,(0,n.Z)({alt:l,src:x,srcSet:S,sizes:y,ownerState:$,className:N.img},Z)):null!=d?d:P&&l?l[0]:(0,u.jsx)(b,{className:N.fallback}),(0,u.jsx)(f,(0,n.Z)({as:m,ownerState:$,className:(0,i.Z)(N.root,p),ref:t},R,{children:C}))}))},3463:(e,t,r)=>{"use strict";r.d(t,{Z:()=>$});var o=r(3366),n=r(7462),a=r(2950),i=r(6010);const s=e=>{const t=a.useRef({});return a.useEffect((()=>{t.current=e})),t.current};var l=r(4780),c=r(1588),d=r(4867);function u(e){return(0,d.Z)("BaseBadge",e)}(0,c.Z)("BaseBadge",["root","badge","invisible"]);var p=r(67),m=r(8442);function v(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((r=>{t[r]=e[r]})),t}const h=["elementType","externalSlotProps","ownerState"];function f(e){var t;const{elementType:r,externalSlotProps:a,ownerState:s}=e,l=(0,o.Z)(e,h),c=function(e,t){return"function"==typeof e?e(t):e}(a,s),{props:d,internalRef:u}=function(e){const{getSlotProps:t,additionalProps:r,externalSlotProps:o,externalForwardedProps:a,className:s}=e;if(!t){const e=(0,i.Z)(null==a?void 0:a.className,null==o?void 0:o.className,s,null==r?void 0:r.className),t=(0,n.Z)({},null==r?void 0:r.style,null==a?void 0:a.style,null==o?void 0:o.style),l=(0,n.Z)({},r,a,o);return e.length>0&&(l.className=e),Object.keys(t).length>0&&(l.style=t),{props:l,internalRef:void 0}}const l=function(e,t=[]){if(void 0===e)return{};const r={};return Object.keys(e).filter((r=>r.match(/^on[A-Z]/)&&"function"==typeof e[r]&&!t.includes(r))).forEach((t=>{r[t]=e[t]})),r}((0,n.Z)({},a,o)),c=v(o),d=v(a),u=t(l),p=(0,i.Z)(null==u?void 0:u.className,null==r?void 0:r.className,s,null==a?void 0:a.className,null==o?void 0:o.className),m=(0,n.Z)({},null==u?void 0:u.style,null==r?void 0:r.style,null==a?void 0:a.style,null==o?void 0:o.style),h=(0,n.Z)({},u,r,d,c);return p.length>0&&(h.className=p),Object.keys(m).length>0&&(h.style=m),{props:h,internalRef:u.ref}}((0,n.Z)({},l,{externalSlotProps:c})),f=(0,p.Z)(u,(0,p.Z)(null==c?void 0:c.ref,null==(t=e.additionalProps)?void 0:t.ref)),g=function(e,t={},r){return(0,m.Z)(e)?t:(0,n.Z)({},t,{ownerState:(0,n.Z)({},t.ownerState,r)})}(r,(0,n.Z)({},d,{ref:f}),s);return g}var g=r(5893);const b=["badgeContent","component","children","components","componentsProps","invisible","max","showZero"],Z=a.forwardRef((function(e,t){const{component:r,children:a,components:i={},componentsProps:c={},max:d=99,showZero:p=!1}=e,m=(0,o.Z)(e,b),{badgeContent:v,max:h,displayValue:Z,invisible:y}=function(e){const{badgeContent:t,invisible:r=!1,max:o=99,showZero:n=!1}=e,a=s({badgeContent:t,max:o});let i=r;!1!==r||0!==t||n||(i=!0);const{badgeContent:l,max:c=o}=i?a:e;return{badgeContent:l,invisible:i,max:c,displayValue:l&&Number(l)>c?`${c}+`:l}}((0,n.Z)({},e,{max:d})),x=(0,n.Z)({},e,{badgeContent:v,invisible:y,max:h,showZero:p}),S=(e=>{const{invisible:t}=e,r={root:["root"],badge:["badge",t&&"invisible"]};return(0,l.Z)(r,u,void 0)})(x),w=r||i.Root||"span",R=f({elementType:w,externalSlotProps:c.root,externalForwardedProps:m,additionalProps:{ref:t},ownerState:x,className:S.root}),C=i.Badge||"span",k=f({elementType:C,externalSlotProps:c.badge,ownerState:x,className:S.badge});return(0,g.jsxs)(w,(0,n.Z)({},R,{children:[a,(0,g.jsx)(C,(0,n.Z)({},k,{children:Z}))]}))}));var y=r(9602),x=r(6122);const S=e=>!e||!(0,m.Z)(e);var w=r(8216);function R(e){return(0,d.Z)("MuiBadge",e)}const C=(0,c.Z)("MuiBadge",["root","badge","dot","standard","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft","invisible","colorError","colorInfo","colorPrimary","colorSecondary","colorSuccess","colorWarning","overlapRectangular","overlapCircular","anchorOriginTopLeftCircular","anchorOriginTopLeftRectangular","anchorOriginTopRightCircular","anchorOriginTopRightRectangular","anchorOriginBottomLeftCircular","anchorOriginBottomLeftRectangular","anchorOriginBottomRightCircular","anchorOriginBottomRightRectangular"]),k=["anchorOrigin","className","component","components","componentsProps","overlap","color","invisible","max","badgeContent","showZero","variant"],P=(0,y.ZP)("span",{name:"MuiBadge",slot:"Root",overridesResolver:(e,t)=>t.root})({position:"relative",display:"inline-flex",verticalAlign:"middle",flexShrink:0}),M=(0,y.ZP)("span",{name:"MuiBadge",slot:"Badge",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.badge,t[r.variant],t[`anchorOrigin${(0,w.Z)(r.anchorOrigin.vertical)}${(0,w.Z)(r.anchorOrigin.horizontal)}${(0,w.Z)(r.overlap)}`],"default"!==r.color&&t[`color${(0,w.Z)(r.color)}`],r.invisible&&t.invisible]}})((({theme:e,ownerState:t})=>(0,n.Z)({display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",boxSizing:"border-box",fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(12),minWidth:20,lineHeight:1,padding:"0 6px",height:20,borderRadius:10,zIndex:1,transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.enteringScreen})},"default"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].main,color:(e.vars||e).palette[t.color].contrastText},"dot"===t.variant&&{borderRadius:4,height:8,minWidth:8,padding:0},"top"===t.anchorOrigin.vertical&&"right"===t.anchorOrigin.horizontal&&"rectangular"===t.overlap&&{top:0,right:0,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",[`&.${C.invisible}`]:{transform:"scale(0) translate(50%, -50%)"}},"bottom"===t.anchorOrigin.vertical&&"right"===t.anchorOrigin.horizontal&&"rectangular"===t.overlap&&{bottom:0,right:0,transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%",[`&.${C.invisible}`]:{transform:"scale(0) translate(50%, 50%)"}},"top"===t.anchorOrigin.vertical&&"left"===t.anchorOrigin.horizontal&&"rectangular"===t.overlap&&{top:0,left:0,transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%",[`&.${C.invisible}`]:{transform:"scale(0) translate(-50%, -50%)"}},"bottom"===t.anchorOrigin.vertical&&"left"===t.anchorOrigin.horizontal&&"rectangular"===t.overlap&&{bottom:0,left:0,transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%",[`&.${C.invisible}`]:{transform:"scale(0) translate(-50%, 50%)"}},"top"===t.anchorOrigin.vertical&&"right"===t.anchorOrigin.horizontal&&"circular"===t.overlap&&{top:"14%",right:"14%",transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",[`&.${C.invisible}`]:{transform:"scale(0) translate(50%, -50%)"}},"bottom"===t.anchorOrigin.vertical&&"right"===t.anchorOrigin.horizontal&&"circular"===t.overlap&&{bottom:"14%",right:"14%",transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%",[`&.${C.invisible}`]:{transform:"scale(0) translate(50%, 50%)"}},"top"===t.anchorOrigin.vertical&&"left"===t.anchorOrigin.horizontal&&"circular"===t.overlap&&{top:"14%",left:"14%",transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%",[`&.${C.invisible}`]:{transform:"scale(0) translate(-50%, -50%)"}},"bottom"===t.anchorOrigin.vertical&&"left"===t.anchorOrigin.horizontal&&"circular"===t.overlap&&{bottom:"14%",left:"14%",transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%",[`&.${C.invisible}`]:{transform:"scale(0) translate(-50%, 50%)"}},t.invisible&&{transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.leavingScreen})}))),$=a.forwardRef((function(e,t){var r,a,c,d;const u=(0,x.Z)({props:e,name:"MuiBadge"}),{anchorOrigin:p={vertical:"top",horizontal:"right"},className:m,component:v="span",components:h={},componentsProps:f={},overlap:b="rectangular",color:y="default",invisible:C=!1,max:$,badgeContent:N,showZero:z=!1,variant:I="standard"}=u,O=(0,o.Z)(u,k),T=s({anchorOrigin:p,color:y,overlap:b,variant:I});let B=C;!1===C&&(0===N&&!z||null==N&&"dot"!==I)&&(B=!0);const{color:L=y,overlap:E=b,anchorOrigin:j=p,variant:F=I}=B?T:u,A=(e=>{const{color:t,anchorOrigin:r,invisible:o,overlap:n,variant:a,classes:i={}}=e,s={root:["root"],badge:["badge",a,o&&"invisible",`anchorOrigin${(0,w.Z)(r.vertical)}${(0,w.Z)(r.horizontal)}`,`anchorOrigin${(0,w.Z)(r.vertical)}${(0,w.Z)(r.horizontal)}${(0,w.Z)(n)}`,`overlap${(0,w.Z)(n)}`,"default"!==t&&`color${(0,w.Z)(t)}`]};return(0,l.Z)(s,R,i)})((0,n.Z)({},u,{anchorOrigin:j,invisible:B,color:L,overlap:E,variant:F}));let D;return"dot"!==F&&(D=N&&Number(N)>$?`${$}+`:N),(0,g.jsx)(Z,(0,n.Z)({invisible:C,badgeContent:D,showZero:z,max:$},O,{components:(0,n.Z)({Root:P,Badge:M},h),className:(0,i.Z)(null==(r=f.root)?void 0:r.className,A.root,m),componentsProps:{root:(0,n.Z)({},f.root,S(h.Root)&&{as:v,ownerState:(0,n.Z)({},null==(a=f.root)?void 0:a.ownerState,{anchorOrigin:j,color:L,overlap:E,variant:F})}),badge:(0,n.Z)({},f.badge,{className:(0,i.Z)(A.badge,null==(c=f.badge)?void 0:c.className)},S(h.Badge)&&{ownerState:(0,n.Z)({},null==(d=f.badge)?void 0:d.ownerState,{anchorOrigin:j,color:L,overlap:E,variant:F})})},ref:t}))}))},2004:(e,t,r)=>{"use strict";r.d(t,{Z:()=>b});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(9602),c=r(6122),d=r(1844),u=r(4867);function p(e){return(0,u.Z)("MuiBottomNavigationAction",e)}const m=(0,r(1588).Z)("MuiBottomNavigationAction",["root","iconOnly","selected","label"]);var v=r(5893);const h=["className","icon","label","onChange","onClick","selected","showLabel","value"],f=(0,l.ZP)(d.Z,{name:"MuiBottomNavigationAction",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,!r.showLabel&&!r.selected&&t.iconOnly]}})((({theme:e,ownerState:t})=>(0,n.Z)({transition:e.transitions.create(["color","padding-top"],{duration:e.transitions.duration.short}),padding:"0px 12px",minWidth:80,maxWidth:168,color:(e.vars||e).palette.text.secondary,flexDirection:"column",flex:"1"},!t.showLabel&&!t.selected&&{paddingTop:14},!t.showLabel&&!t.selected&&!t.label&&{paddingTop:0},{[`&.${m.selected}`]:{color:(e.vars||e).palette.primary.main}}))),g=(0,l.ZP)("span",{name:"MuiBottomNavigationAction",slot:"Label",overridesResolver:(e,t)=>t.label})((({theme:e,ownerState:t})=>(0,n.Z)({fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(12),opacity:1,transition:"font-size 0.2s, opacity 0.2s",transitionDelay:"0.1s"},!t.showLabel&&!t.selected&&{opacity:0,transitionDelay:"0s"},{[`&.${m.selected}`]:{fontSize:e.typography.pxToRem(14)}}))),b=a.forwardRef((function(e,t){const r=(0,c.Z)({props:e,name:"MuiBottomNavigationAction"}),{className:a,icon:l,label:d,onChange:u,onClick:m,value:b}=r,Z=(0,o.Z)(r,h),y=r,x=(e=>{const{classes:t,showLabel:r,selected:o}=e,n={root:["root",!r&&!o&&"iconOnly",o&&"selected"],label:["label",!r&&!o&&"iconOnly",o&&"selected"]};return(0,s.Z)(n,p,t)})(y);return(0,v.jsxs)(f,(0,n.Z)({ref:t,className:(0,i.Z)(x.root,a),focusRipple:!0,onClick:e=>{u&&u(e,b),m&&m(e)},ownerState:y},Z,{children:[l,(0,v.jsx)(g,{className:x.label,ownerState:y,children:d})]}))}))},4172:(e,t,r)=>{"use strict";r.d(t,{Z:()=>h});var o=r(7462),n=r(3366),a=r(2950),i=(r(6607),r(6010)),s=r(4780),l=r(9602),c=r(6122),d=r(4867);function u(e){return(0,d.Z)("MuiBottomNavigation",e)}(0,r(1588).Z)("MuiBottomNavigation",["root"]);var p=r(5893);const m=["children","className","component","onChange","showLabels","value"],v=(0,l.ZP)("div",{name:"MuiBottomNavigation",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>({display:"flex",justifyContent:"center",height:56,backgroundColor:(e.vars||e).palette.background.paper}))),h=a.forwardRef((function(e,t){const r=(0,c.Z)({props:e,name:"MuiBottomNavigation"}),{children:l,className:d,component:h="div",onChange:f,showLabels:g=!1,value:b}=r,Z=(0,n.Z)(r,m),y=(0,o.Z)({},r,{component:h,showLabels:g}),x=(e=>{const{classes:t}=e;return(0,s.Z)({root:["root"]},u,t)})(y);return(0,p.jsx)(v,(0,o.Z)({as:h,className:(0,i.Z)(x.root,d),ref:t,ownerState:y},Z,{children:a.Children.map(l,((e,t)=>{if(!a.isValidElement(e))return null;const r=void 0===e.props.value?t:e.props.value;return a.cloneElement(e,{selected:r===b,showLabel:void 0!==e.props.showLabel?e.props.showLabel:g,value:r,onChange:f})}))}))}))},1508:(e,t,r)=>{"use strict";r.d(t,{Z:()=>v});var o=r(7462),n=r(3366),a=r(2950),i=r(6010),s=r(8883),l=r(6523),c=r(9707),d=r(6631),u=r(5893);const p=["className","component"];var m=r(7078);const v=function(e={}){const{defaultTheme:t,defaultClassName:r="MuiBox-root",generateClassName:m,styleFunctionSx:v=l.Z}=e,h=(0,s.ZP)("div")(v);return a.forwardRef((function(e,a){const s=(0,d.Z)(t),l=(0,c.Z)(e),{className:v,component:f="div"}=l,g=(0,n.Z)(l,p);return(0,u.jsx)(h,(0,o.Z)({as:f,ref:a,className:(0,i.Z)(v,m?m(r):r),theme:s},g))}))}({defaultTheme:(0,r(8716).Z)(),defaultClassName:"MuiBox-root",generateClassName:m.Z.generate})},1844:(e,t,r)=>{"use strict";r.d(t,{Z:()=>q});var o=r(7462),n=r(3366),a=r(2950),i=r.n(a),s=r(6010),l=r(4780),c=r(9602),d=r(6122),u=r(1705),p=r(5430),m=r(3511),v=r(7326),h=r(9611);const f=i().createContext(null);function g(e,t){var r=Object.create(null);return e&&a.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return t&&(0,a.isValidElement)(e)?t(e):e}(e)})),r}function b(e,t,r){return null!=r[t]?r[t]:e.props[t]}function Z(e,t,r){var o=g(e.children),n=function(e,t){function r(r){return r in t?t[r]:e[r]}e=e||{},t=t||{};var o,n=Object.create(null),a=[];for(var i in e)i in t?a.length&&(n[i]=a,a=[]):a.push(i);var s={};for(var l in t){if(n[l])for(o=0;o<n[l].length;o++){var c=n[l][o];s[n[l][o]]=r(c)}s[l]=r(l)}for(o=0;o<a.length;o++)s[a[o]]=r(a[o]);return s}(t,o);return Object.keys(n).forEach((function(i){var s=n[i];if((0,a.isValidElement)(s)){var l=i in t,c=i in o,d=t[i],u=(0,a.isValidElement)(d)&&!d.props.in;!c||l&&!u?c||!l||u?c&&l&&(0,a.isValidElement)(d)&&(n[i]=(0,a.cloneElement)(s,{onExited:r.bind(null,s),in:d.props.in,exit:b(s,"exit",e),enter:b(s,"enter",e)})):n[i]=(0,a.cloneElement)(s,{in:!1}):n[i]=(0,a.cloneElement)(s,{onExited:r.bind(null,s),in:!0,exit:b(s,"exit",e),enter:b(s,"enter",e)})}})),n}var y=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},x=function(e){var t,r;function s(t,r){var o,n=(o=e.call(this,t,r)||this).handleExited.bind((0,v.Z)(o));return o.state={contextValue:{isMounting:!0},handleExited:n,firstRender:!0},o}r=e,(t=s).prototype=Object.create(r.prototype),t.prototype.constructor=t,(0,h.Z)(t,r);var l=s.prototype;return l.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},l.componentWillUnmount=function(){this.mounted=!1},s.getDerivedStateFromProps=function(e,t){var r,o,n=t.children,i=t.handleExited;return{children:t.firstRender?(r=e,o=i,g(r.children,(function(e){return(0,a.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:b(e,"appear",r),enter:b(e,"enter",r),exit:b(e,"exit",r)})}))):Z(e,n,i),firstRender:!1}},l.handleExited=function(e,t){var r=g(this.props.children);e.key in r||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var r=(0,o.Z)({},t.children);return delete r[e.key],{children:r}})))},l.render=function(){var e=this.props,t=e.component,r=e.childFactory,o=(0,n.Z)(e,["component","childFactory"]),a=this.state.contextValue,s=y(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===t?i().createElement(f.Provider,{value:a},s):i().createElement(f.Provider,{value:a},i().createElement(t,o,s))},s}(i().Component);x.propTypes={},x.defaultProps={component:"div",childFactory:function(e){return e}};const S=x;var w=r(8292),R=r(5893);var C=r(1588);const k=(0,C.Z)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),P=["center","classes","className"];let M,$,N,z,I=e=>e;const O=(0,w.keyframes)(M||(M=I`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),T=(0,w.keyframes)($||($=I`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),B=(0,w.keyframes)(N||(N=I`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),L=(0,c.ZP)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),E=(0,c.ZP)((function(e){const{className:t,classes:r,pulsate:o=!1,rippleX:n,rippleY:i,rippleSize:l,in:c,onExited:d,timeout:u}=e,[p,m]=a.useState(!1),v=(0,s.Z)(t,r.ripple,r.rippleVisible,o&&r.ripplePulsate),h={width:l,height:l,top:-l/2+i,left:-l/2+n},f=(0,s.Z)(r.child,p&&r.childLeaving,o&&r.childPulsate);return c||p||m(!0),a.useEffect((()=>{if(!c&&null!=d){const e=setTimeout(d,u);return()=>{clearTimeout(e)}}}),[d,c,u]),(0,R.jsx)("span",{className:v,style:h,children:(0,R.jsx)("span",{className:f})})}),{name:"MuiTouchRipple",slot:"Ripple"})(z||(z=I`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),k.rippleVisible,O,550,(({theme:e})=>e.transitions.easing.easeInOut),k.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),k.child,k.childLeaving,T,550,(({theme:e})=>e.transitions.easing.easeInOut),k.childPulsate,B,(({theme:e})=>e.transitions.easing.easeInOut)),j=a.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiTouchRipple"}),{center:i=!1,classes:l={},className:c}=r,u=(0,n.Z)(r,P),[p,m]=a.useState([]),v=a.useRef(0),h=a.useRef(null);a.useEffect((()=>{h.current&&(h.current(),h.current=null)}),[p]);const f=a.useRef(!1),g=a.useRef(null),b=a.useRef(null),Z=a.useRef(null);a.useEffect((()=>()=>{clearTimeout(g.current)}),[]);const y=a.useCallback((e=>{const{pulsate:t,rippleX:r,rippleY:o,rippleSize:n,cb:a}=e;m((e=>[...e,(0,R.jsx)(E,{classes:{ripple:(0,s.Z)(l.ripple,k.ripple),rippleVisible:(0,s.Z)(l.rippleVisible,k.rippleVisible),ripplePulsate:(0,s.Z)(l.ripplePulsate,k.ripplePulsate),child:(0,s.Z)(l.child,k.child),childLeaving:(0,s.Z)(l.childLeaving,k.childLeaving),childPulsate:(0,s.Z)(l.childPulsate,k.childPulsate)},timeout:550,pulsate:t,rippleX:r,rippleY:o,rippleSize:n},v.current)])),v.current+=1,h.current=a}),[l]),x=a.useCallback(((e={},t={},r)=>{const{pulsate:o=!1,center:n=i||t.pulsate,fakeElement:a=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&f.current)return void(f.current=!1);"touchstart"===(null==e?void 0:e.type)&&(f.current=!0);const s=a?null:Z.current,l=s?s.getBoundingClientRect():{width:0,height:0,left:0,top:0};let c,d,u;if(n||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(l.width/2),d=Math.round(l.height/2);else{const{clientX:t,clientY:r}=e.touches&&e.touches.length>0?e.touches[0]:e;c=Math.round(t-l.left),d=Math.round(r-l.top)}if(n)u=Math.sqrt((2*l.width**2+l.height**2)/3),u%2==0&&(u+=1);else{const e=2*Math.max(Math.abs((s?s.clientWidth:0)-c),c)+2,t=2*Math.max(Math.abs((s?s.clientHeight:0)-d),d)+2;u=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===b.current&&(b.current=()=>{y({pulsate:o,rippleX:c,rippleY:d,rippleSize:u,cb:r})},g.current=setTimeout((()=>{b.current&&(b.current(),b.current=null)}),80)):y({pulsate:o,rippleX:c,rippleY:d,rippleSize:u,cb:r})}),[i,y]),w=a.useCallback((()=>{x({},{pulsate:!0})}),[x]),C=a.useCallback(((e,t)=>{if(clearTimeout(g.current),"touchend"===(null==e?void 0:e.type)&&b.current)return b.current(),b.current=null,void(g.current=setTimeout((()=>{C(e,t)})));b.current=null,m((e=>e.length>0?e.slice(1):e)),h.current=t}),[]);return a.useImperativeHandle(t,(()=>({pulsate:w,start:x,stop:C})),[w,x,C]),(0,R.jsx)(L,(0,o.Z)({className:(0,s.Z)(k.root,l.root,c),ref:Z},u,{children:(0,R.jsx)(S,{component:null,exit:!0,children:p})}))}));var F=r(4867);function A(e){return(0,F.Z)("MuiButtonBase",e)}const D=(0,C.Z)("MuiButtonBase",["root","disabled","focusVisible"]),V=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],W=(0,c.ZP)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${D.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),q=a.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiButtonBase"}),{action:i,centerRipple:c=!1,children:v,className:h,component:f="button",disabled:g=!1,disableRipple:b=!1,disableTouchRipple:Z=!1,focusRipple:y=!1,LinkComponent:x="a",onBlur:S,onClick:w,onContextMenu:C,onDragLeave:k,onFocus:P,onFocusVisible:M,onKeyDown:$,onKeyUp:N,onMouseDown:z,onMouseLeave:I,onMouseUp:O,onTouchEnd:T,onTouchMove:B,onTouchStart:L,tabIndex:E=0,TouchRippleProps:F,touchRippleRef:D,type:q}=r,_=(0,n.Z)(r,V),G=a.useRef(null),X=a.useRef(null),H=(0,u.Z)(X,D),{isFocusVisibleRef:K,onFocus:U,onBlur:Y,ref:J}=(0,m.Z)(),[Q,ee]=a.useState(!1);g&&Q&&ee(!1),a.useImperativeHandle(i,(()=>({focusVisible:()=>{ee(!0),G.current.focus()}})),[]);const[te,re]=a.useState(!1);a.useEffect((()=>{re(!0)}),[]);const oe=te&&!b&&!g;function ne(e,t,r=Z){return(0,p.Z)((o=>(t&&t(o),!r&&X.current&&X.current[e](o),!0)))}a.useEffect((()=>{Q&&y&&!b&&te&&X.current.pulsate()}),[b,y,Q,te]);const ae=ne("start",z),ie=ne("stop",C),se=ne("stop",k),le=ne("stop",O),ce=ne("stop",(e=>{Q&&e.preventDefault(),I&&I(e)})),de=ne("start",L),ue=ne("stop",T),pe=ne("stop",B),me=ne("stop",(e=>{Y(e),!1===K.current&&ee(!1),S&&S(e)}),!1),ve=(0,p.Z)((e=>{G.current||(G.current=e.currentTarget),U(e),!0===K.current&&(ee(!0),M&&M(e)),P&&P(e)})),he=()=>{const e=G.current;return f&&"button"!==f&&!("A"===e.tagName&&e.href)},fe=a.useRef(!1),ge=(0,p.Z)((e=>{y&&!fe.current&&Q&&X.current&&" "===e.key&&(fe.current=!0,X.current.stop(e,(()=>{X.current.start(e)}))),e.target===e.currentTarget&&he()&&" "===e.key&&e.preventDefault(),$&&$(e),e.target===e.currentTarget&&he()&&"Enter"===e.key&&!g&&(e.preventDefault(),w&&w(e))})),be=(0,p.Z)((e=>{y&&" "===e.key&&X.current&&Q&&!e.defaultPrevented&&(fe.current=!1,X.current.stop(e,(()=>{X.current.pulsate(e)}))),N&&N(e),w&&e.target===e.currentTarget&&he()&&" "===e.key&&!e.defaultPrevented&&w(e)}));let Ze=f;"button"===Ze&&(_.href||_.to)&&(Ze=x);const ye={};"button"===Ze?(ye.type=void 0===q?"button":q,ye.disabled=g):(_.href||_.to||(ye.role="button"),g&&(ye["aria-disabled"]=g));const xe=(0,u.Z)(J,G),Se=(0,u.Z)(t,xe),we=(0,o.Z)({},r,{centerRipple:c,component:f,disabled:g,disableRipple:b,disableTouchRipple:Z,focusRipple:y,tabIndex:E,focusVisible:Q}),Re=(e=>{const{disabled:t,focusVisible:r,focusVisibleClassName:o,classes:n}=e,a={root:["root",t&&"disabled",r&&"focusVisible"]},i=(0,l.Z)(a,A,n);return r&&o&&(i.root+=` ${o}`),i})(we);return(0,R.jsxs)(W,(0,o.Z)({as:Ze,className:(0,s.Z)(Re.root,h),ownerState:we,onBlur:me,onClick:w,onContextMenu:ie,onFocus:ve,onKeyDown:ge,onKeyUp:be,onMouseDown:ae,onMouseLeave:ce,onMouseUp:le,onDragLeave:se,onTouchEnd:ue,onTouchMove:pe,onTouchStart:de,ref:Se,tabIndex:g?-1:E,type:q},ye,_,{children:[v,oe?(0,R.jsx)(j,(0,o.Z)({ref:H,center:c},F)):null]}))}))},6914:(e,t,r)=>{"use strict";r.d(t,{Z:()=>C});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(7925),l=r(4780),c=r(1796),d=r(9602),u=r(6122),p=r(1844),m=r(8216),v=r(4867);function h(e){return(0,v.Z)("MuiButton",e)}const f=(0,r(1588).Z)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),g=a.createContext({});var b=r(5893);const Z=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],y=["root"],x=e=>(0,n.Z)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),S=(0,d.ZP)(p.Z,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,t[r.variant],t[`${r.variant}${(0,m.Z)(r.color)}`],t[`size${(0,m.Z)(r.size)}`],t[`${r.variant}Size${(0,m.Z)(r.size)}`],"inherit"===r.color&&t.colorInherit,r.disableElevation&&t.disableElevation,r.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var r,o;return(0,n.Z)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":(0,n.Z)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,c.Fq)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,c.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,c.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:(e.vars||e).palette.grey.A100,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":(0,n.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${f.focusVisible}`]:(0,n.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${f.disabled}`]:(0,n.Z)({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"outlined"===t.variant&&"secondary"===t.color&&{border:`1px solid ${(e.vars||e).palette.action.disabled}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${(0,c.Fq)(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(r=(o=e.palette).getContrastText)?void 0:r.call(o,e.palette.grey[300]),backgroundColor:(e.vars||e).palette.grey[300],boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${f.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${f.disabled}`]:{boxShadow:"none"}})),w=(0,d.ZP)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.startIcon,t[`iconSize${(0,m.Z)(r.size)}`]]}})((({ownerState:e})=>(0,n.Z)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},x(e)))),R=(0,d.ZP)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.endIcon,t[`iconSize${(0,m.Z)(r.size)}`]]}})((({ownerState:e})=>(0,n.Z)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},x(e)))),C=a.forwardRef((function(e,t){const r=a.useContext(g),c=(0,s.Z)(r,e),d=(0,u.Z)({props:c,name:"MuiButton"}),{children:p,color:v="primary",component:f="button",className:x,disabled:C=!1,disableElevation:k=!1,disableFocusRipple:P=!1,endIcon:M,focusVisibleClassName:$,fullWidth:N=!1,size:z="medium",startIcon:I,type:O,variant:T="text"}=d,B=(0,o.Z)(d,Z),L=(0,n.Z)({},d,{color:v,component:f,disabled:C,disableElevation:k,disableFocusRipple:P,fullWidth:N,size:z,type:O,variant:T}),E=(e=>{const{color:t,disableElevation:r,fullWidth:o,size:a,variant:i,classes:s}=e,c={root:["root",i,`${i}${(0,m.Z)(t)}`,`size${(0,m.Z)(a)}`,`${i}Size${(0,m.Z)(a)}`,"inherit"===t&&"colorInherit",r&&"disableElevation",o&&"fullWidth"],label:["label"],startIcon:["startIcon",`iconSize${(0,m.Z)(a)}`],endIcon:["endIcon",`iconSize${(0,m.Z)(a)}`]},d=(0,l.Z)(c,h,s);return(0,n.Z)({},s,d)})(L),{root:j}=E,F=(0,o.Z)(E,y),A=I&&(0,b.jsx)(w,{className:F.startIcon,ownerState:L,children:I}),D=M&&(0,b.jsx)(R,{className:F.endIcon,ownerState:L,children:M});return(0,b.jsxs)(S,(0,n.Z)({ownerState:L,className:(0,i.Z)(r.className,j,x),component:f,disabled:C,focusRipple:!P,focusVisibleClassName:(0,i.Z)(F.focusVisible,$),ref:t,type:O},B,{classes:F,children:[A,p,D]}))}))},9062:(e,t,r)=>{"use strict";r.d(t,{Z:()=>k});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(8292),c=r(8216),d=r(6122),u=r(9602),p=r(4867);function m(e){return(0,p.Z)("MuiCircularProgress",e)}(0,r(1588).Z)("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);var v=r(5893);const h=["className","color","disableShrink","size","style","thickness","value","variant"];let f,g,b,Z,y=e=>e;const x=(0,l.keyframes)(f||(f=y`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),S=(0,l.keyframes)(g||(g=y`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),w=(0,u.ZP)("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,t[r.variant],t[`color${(0,c.Z)(r.color)}`]]}})((({ownerState:e,theme:t})=>(0,n.Z)({display:"inline-block"},"determinate"===e.variant&&{transition:t.transitions.create("transform")},"inherit"!==e.color&&{color:(t.vars||t).palette[e.color].main})),(({ownerState:e})=>"indeterminate"===e.variant&&(0,l.css)(b||(b=y`
      animation: ${0} 1.4s linear infinite;
    `),x))),R=(0,u.ZP)("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),C=(0,u.ZP)("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.circle,t[`circle${(0,c.Z)(r.variant)}`],r.disableShrink&&t.circleDisableShrink]}})((({ownerState:e,theme:t})=>(0,n.Z)({stroke:"currentColor"},"determinate"===e.variant&&{transition:t.transitions.create("stroke-dashoffset")},"indeterminate"===e.variant&&{strokeDasharray:"80px, 200px",strokeDashoffset:0})),(({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink&&(0,l.css)(Z||(Z=y`
      animation: ${0} 1.4s ease-in-out infinite;
    `),S))),k=a.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiCircularProgress"}),{className:a,color:l="primary",disableShrink:u=!1,size:p=40,style:f,thickness:g=3.6,value:b=0,variant:Z="indeterminate"}=r,y=(0,o.Z)(r,h),x=(0,n.Z)({},r,{color:l,disableShrink:u,size:p,thickness:g,value:b,variant:Z}),S=(e=>{const{classes:t,variant:r,color:o,disableShrink:n}=e,a={root:["root",r,`color${(0,c.Z)(o)}`],svg:["svg"],circle:["circle",`circle${(0,c.Z)(r)}`,n&&"circleDisableShrink"]};return(0,s.Z)(a,m,t)})(x),k={},P={},M={};if("determinate"===Z){const e=2*Math.PI*((44-g)/2);k.strokeDasharray=e.toFixed(3),M["aria-valuenow"]=Math.round(b),k.strokeDashoffset=`${((100-b)/100*e).toFixed(3)}px`,P.transform="rotate(-90deg)"}return(0,v.jsx)(w,(0,n.Z)({className:(0,i.Z)(S.root,a),style:(0,n.Z)({width:p,height:p},P,f),ownerState:x,ref:t,role:"progressbar"},M,y,{children:(0,v.jsx)(R,{className:S.svg,ownerState:x,viewBox:"22 22 44 44",children:(0,v.jsx)(C,{className:S.circle,style:k,ownerState:x,cx:44,cy:44,r:(44-g)/2,fill:"none",strokeWidth:g})})}))}))},6867:(e,t,r)=>{"use strict";r.d(t,{Z:()=>Z});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(1796),c=r(9602),d=r(6122),u=r(1844),p=r(8216),m=r(4867);function v(e){return(0,m.Z)("MuiIconButton",e)}const h=(0,r(1588).Z)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]);var f=r(5893);const g=["edge","children","className","color","disabled","disableFocusRipple","size"],b=(0,c.ZP)(u.Z,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,"default"!==r.color&&t[`color${(0,p.Z)(r.color)}`],r.edge&&t[`edge${(0,p.Z)(r.edge)}`],t[`size${(0,p.Z)(r.size)}`]]}})((({theme:e,ownerState:t})=>(0,n.Z)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.active} / ${e.vars.palette.action.hoverOpacity})`:(0,l.Fq)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>(0,n.Z)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&(0,n.Z)({color:(e.vars||e).palette[t.color].main},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${h.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}}))),Z=a.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiIconButton"}),{edge:a=!1,children:l,className:c,color:u="default",disabled:m=!1,disableFocusRipple:h=!1,size:Z="medium"}=r,y=(0,o.Z)(r,g),x=(0,n.Z)({},r,{edge:a,color:u,disabled:m,disableFocusRipple:h,size:Z}),S=(e=>{const{classes:t,disabled:r,color:o,edge:n,size:a}=e,i={root:["root",r&&"disabled","default"!==o&&`color${(0,p.Z)(o)}`,n&&`edge${(0,p.Z)(n)}`,`size${(0,p.Z)(a)}`]};return(0,s.Z)(i,v,t)})(x);return(0,f.jsx)(b,(0,n.Z)({className:(0,i.Z)(S.root,c),centerRipple:!0,focusRipple:!h,disabled:m,ref:t,ownerState:x},y,{children:l}))}))},9041:(e,t,r)=>{"use strict";r.d(t,{Z:()=>O});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(8292),c=r(1796),d=r(8216),u=r(2734),p=r(9602),m=r(6122),v=r(4867);function h(e){return(0,v.Z)("MuiLinearProgress",e)}(0,r(1588).Z)("MuiLinearProgress",["root","colorPrimary","colorSecondary","determinate","indeterminate","buffer","query","dashed","dashedColorPrimary","dashedColorSecondary","bar","barColorPrimary","barColorSecondary","bar1Indeterminate","bar1Determinate","bar1Buffer","bar2Indeterminate","bar2Buffer"]);var f=r(5893);const g=["className","color","value","valueBuffer","variant"];let b,Z,y,x,S,w,R=e=>e;const C=(0,l.keyframes)(b||(b=R`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`)),k=(0,l.keyframes)(Z||(Z=R`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`)),P=(0,l.keyframes)(y||(y=R`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`)),M=(e,t)=>"inherit"===t?"currentColor":e.vars?e.vars.palette.LinearProgress[`${t}Bg`]:"light"===e.palette.mode?(0,c.$n)(e.palette[t].main,.62):(0,c._j)(e.palette[t].main,.5),$=(0,p.ZP)("span",{name:"MuiLinearProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,t[`color${(0,d.Z)(r.color)}`],t[r.variant]]}})((({ownerState:e,theme:t})=>(0,n.Z)({position:"relative",overflow:"hidden",display:"block",height:4,zIndex:0,"@media print":{colorAdjust:"exact"},backgroundColor:M(t,e.color)},"inherit"===e.color&&"buffer"!==e.variant&&{backgroundColor:"none","&::before":{content:'""',position:"absolute",left:0,top:0,right:0,bottom:0,backgroundColor:"currentColor",opacity:.3}},"buffer"===e.variant&&{backgroundColor:"transparent"},"query"===e.variant&&{transform:"rotate(180deg)"}))),N=(0,p.ZP)("span",{name:"MuiLinearProgress",slot:"Dashed",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.dashed,t[`dashedColor${(0,d.Z)(r.color)}`]]}})((({ownerState:e,theme:t})=>{const r=M(t,e.color);return(0,n.Z)({position:"absolute",marginTop:0,height:"100%",width:"100%"},"inherit"===e.color&&{opacity:.3},{backgroundImage:`radial-gradient(${r} 0%, ${r} 16%, transparent 42%)`,backgroundSize:"10px 10px",backgroundPosition:"0 -23px"})}),(0,l.css)(x||(x=R`
    animation: ${0} 3s infinite linear;
  `),P)),z=(0,p.ZP)("span",{name:"MuiLinearProgress",slot:"Bar1",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.bar,t[`barColor${(0,d.Z)(r.color)}`],("indeterminate"===r.variant||"query"===r.variant)&&t.bar1Indeterminate,"determinate"===r.variant&&t.bar1Determinate,"buffer"===r.variant&&t.bar1Buffer]}})((({ownerState:e,theme:t})=>(0,n.Z)({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left",backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"determinate"===e.variant&&{transition:"transform .4s linear"},"buffer"===e.variant&&{zIndex:1,transition:"transform .4s linear"})),(({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&(0,l.css)(S||(S=R`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `),C))),I=(0,p.ZP)("span",{name:"MuiLinearProgress",slot:"Bar2",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.bar,t[`barColor${(0,d.Z)(r.color)}`],("indeterminate"===r.variant||"query"===r.variant)&&t.bar2Indeterminate,"buffer"===r.variant&&t.bar2Buffer]}})((({ownerState:e,theme:t})=>(0,n.Z)({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},"buffer"!==e.variant&&{backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"inherit"===e.color&&{opacity:.3},"buffer"===e.variant&&{backgroundColor:M(t,e.color),transition:"transform .4s linear"})),(({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&(0,l.css)(w||(w=R`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `),k))),O=a.forwardRef((function(e,t){const r=(0,m.Z)({props:e,name:"MuiLinearProgress"}),{className:a,color:l="primary",value:c,valueBuffer:p,variant:v="indeterminate"}=r,b=(0,o.Z)(r,g),Z=(0,n.Z)({},r,{color:l,variant:v}),y=(e=>{const{classes:t,variant:r,color:o}=e,n={root:["root",`color${(0,d.Z)(o)}`,r],dashed:["dashed",`dashedColor${(0,d.Z)(o)}`],bar1:["bar",`barColor${(0,d.Z)(o)}`,("indeterminate"===r||"query"===r)&&"bar1Indeterminate","determinate"===r&&"bar1Determinate","buffer"===r&&"bar1Buffer"],bar2:["bar","buffer"!==r&&`barColor${(0,d.Z)(o)}`,"buffer"===r&&`color${(0,d.Z)(o)}`,("indeterminate"===r||"query"===r)&&"bar2Indeterminate","buffer"===r&&"bar2Buffer"]};return(0,s.Z)(n,h,t)})(Z),x=(0,u.Z)(),S={},w={bar1:{},bar2:{}};if(("determinate"===v||"buffer"===v)&&void 0!==c){S["aria-valuenow"]=Math.round(c),S["aria-valuemin"]=0,S["aria-valuemax"]=100;let e=c-100;"rtl"===x.direction&&(e=-e),w.bar1.transform=`translateX(${e}%)`}if("buffer"===v&&void 0!==p){let e=(p||0)-100;"rtl"===x.direction&&(e=-e),w.bar2.transform=`translateX(${e}%)`}return(0,f.jsxs)($,(0,n.Z)({className:(0,i.Z)(y.root,a),ownerState:Z,role:"progressbar"},S,{ref:t},b,{children:["buffer"===v?(0,f.jsx)(N,{className:y.dashed,ownerState:Z}):null,(0,f.jsx)(z,{className:y.bar1,ownerState:Z,style:w.bar1}),"determinate"===v?null:(0,f.jsx)(I,{className:y.bar2,ownerState:Z,style:w.bar2})]}))}))},417:(e,t,r)=>{"use strict";r.d(t,{Z:()=>f});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(9773),c=r(9602),d=r(6122),u=r(4867);function p(e){return(0,u.Z)("MuiListItemAvatar",e)}(0,r(1588).Z)("MuiListItemAvatar",["root","alignItemsFlexStart"]);var m=r(5893);const v=["className"],h=(0,c.ZP)("div",{name:"MuiListItemAvatar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,"flex-start"===r.alignItems&&t.alignItemsFlexStart]}})((({ownerState:e})=>(0,n.Z)({minWidth:56,flexShrink:0},"flex-start"===e.alignItems&&{marginTop:8}))),f=a.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiListItemAvatar"}),{className:c}=r,u=(0,o.Z)(r,v),f=a.useContext(l.Z),g=(0,n.Z)({},r,{alignItems:f.alignItems}),b=(e=>{const{alignItems:t,classes:r}=e,o={root:["root","flex-start"===t&&"alignItemsFlexStart"]};return(0,s.Z)(o,p,r)})(g);return(0,m.jsx)(h,(0,n.Z)({className:(0,i.Z)(b.root,c),ownerState:g,ref:t},u))}))},8584:(e,t,r)=>{"use strict";r.d(t,{Z:()=>b});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(2658),c=r(9773),d=r(6122),u=r(9602),p=r(4867);function m(e){return(0,p.Z)("MuiListItemText",e)}const v=(0,r(1588).Z)("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);var h=r(5893);const f=["children","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"],g=(0,u.ZP)("div",{name:"MuiListItemText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[{[`& .${v.primary}`]:t.primary},{[`& .${v.secondary}`]:t.secondary},t.root,r.inset&&t.inset,r.primary&&r.secondary&&t.multiline,r.dense&&t.dense]}})((({ownerState:e})=>(0,n.Z)({flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},e.primary&&e.secondary&&{marginTop:6,marginBottom:6},e.inset&&{paddingLeft:56}))),b=a.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiListItemText"}),{children:u,className:p,disableTypography:v=!1,inset:b=!1,primary:Z,primaryTypographyProps:y,secondary:x,secondaryTypographyProps:S}=r,w=(0,o.Z)(r,f),{dense:R}=a.useContext(c.Z);let C=null!=Z?Z:u,k=x;const P=(0,n.Z)({},r,{disableTypography:v,inset:b,primary:!!C,secondary:!!k,dense:R}),M=(e=>{const{classes:t,inset:r,primary:o,secondary:n,dense:a}=e,i={root:["root",r&&"inset",a&&"dense",o&&n&&"multiline"],primary:["primary"],secondary:["secondary"]};return(0,s.Z)(i,m,t)})(P);return null==C||C.type===l.Z||v||(C=(0,h.jsx)(l.Z,(0,n.Z)({variant:R?"body2":"body1",className:M.primary,component:"span",display:"block"},y,{children:C}))),null==k||k.type===l.Z||v||(k=(0,h.jsx)(l.Z,(0,n.Z)({variant:"body2",className:M.secondary,color:"text.secondary",display:"block"},S,{children:k}))),(0,h.jsxs)(g,(0,n.Z)({className:(0,i.Z)(M.root,p),ownerState:P,ref:t},w,{children:[C,k]}))}))},799:(e,t,r)=>{"use strict";r.d(t,{ZP:()=>I});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(8442),c=r(1796),d=r(9602),u=r(6122),p=r(1844),m=r(8502),v=r(8974),h=r(1705),f=r(9773),g=r(4867),b=r(1588);function Z(e){return(0,g.Z)("MuiListItem",e)}const y=(0,b.Z)("MuiListItem",["root","container","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","padding","button","secondaryAction","selected"]),x=(0,b.Z)("MuiListItemButton",["root","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","selected"]);function S(e){return(0,g.Z)("MuiListItemSecondaryAction",e)}(0,b.Z)("MuiListItemSecondaryAction",["root","disableGutters"]);var w=r(5893);const R=["className"],C=(0,d.ZP)("div",{name:"MuiListItemSecondaryAction",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,r.disableGutters&&t.disableGutters]}})((({ownerState:e})=>(0,n.Z)({position:"absolute",right:16,top:"50%",transform:"translateY(-50%)"},e.disableGutters&&{right:0}))),k=a.forwardRef((function(e,t){const r=(0,u.Z)({props:e,name:"MuiListItemSecondaryAction"}),{className:l}=r,c=(0,o.Z)(r,R),d=a.useContext(f.Z),p=(0,n.Z)({},r,{disableGutters:d.disableGutters}),m=(e=>{const{disableGutters:t,classes:r}=e,o={root:["root",t&&"disableGutters"]};return(0,s.Z)(o,S,r)})(p);return(0,w.jsx)(C,(0,n.Z)({className:(0,i.Z)(m.root,l),ownerState:p,ref:t},c))}));k.muiName="ListItemSecondaryAction";const P=k,M=["className"],$=["alignItems","autoFocus","button","children","className","component","components","componentsProps","ContainerComponent","ContainerProps","dense","disabled","disableGutters","disablePadding","divider","focusVisibleClassName","secondaryAction","selected"],N=(0,d.ZP)("div",{name:"MuiListItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,r.dense&&t.dense,"flex-start"===r.alignItems&&t.alignItemsFlexStart,r.divider&&t.divider,!r.disableGutters&&t.gutters,!r.disablePadding&&t.padding,r.button&&t.button,r.hasSecondaryAction&&t.secondaryAction]}})((({theme:e,ownerState:t})=>(0,n.Z)({display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left"},!t.disablePadding&&(0,n.Z)({paddingTop:8,paddingBottom:8},t.dense&&{paddingTop:4,paddingBottom:4},!t.disableGutters&&{paddingLeft:16,paddingRight:16},!!t.secondaryAction&&{paddingRight:48}),!!t.secondaryAction&&{[`& > .${x.root}`]:{paddingRight:48}},{[`&.${y.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${y.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,c.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${y.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,c.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${y.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},"flex-start"===t.alignItems&&{alignItems:"flex-start"},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},t.button&&{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${y.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,c.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,c.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity)}}},t.hasSecondaryAction&&{paddingRight:48}))),z=(0,d.ZP)("li",{name:"MuiListItem",slot:"Container",overridesResolver:(e,t)=>t.container})({position:"relative"}),I=a.forwardRef((function(e,t){const r=(0,u.Z)({props:e,name:"MuiListItem"}),{alignItems:c="center",autoFocus:d=!1,button:g=!1,children:b,className:x,component:S,components:R={},componentsProps:C={},ContainerComponent:k="li",ContainerProps:{className:I}={},dense:O=!1,disabled:T=!1,disableGutters:B=!1,disablePadding:L=!1,divider:E=!1,focusVisibleClassName:j,secondaryAction:F,selected:A=!1}=r,D=(0,o.Z)(r.ContainerProps,M),V=(0,o.Z)(r,$),W=a.useContext(f.Z),q={dense:O||W.dense||!1,alignItems:c,disableGutters:B},_=a.useRef(null);(0,v.Z)((()=>{d&&_.current&&_.current.focus()}),[d]);const G=a.Children.toArray(b),X=G.length&&(0,m.Z)(G[G.length-1],["ListItemSecondaryAction"]),H=(0,n.Z)({},r,{alignItems:c,autoFocus:d,button:g,dense:q.dense,disabled:T,disableGutters:B,disablePadding:L,divider:E,hasSecondaryAction:X,selected:A}),K=(e=>{const{alignItems:t,button:r,classes:o,dense:n,disabled:a,disableGutters:i,disablePadding:l,divider:c,hasSecondaryAction:d,selected:u}=e,p={root:["root",n&&"dense",!i&&"gutters",!l&&"padding",c&&"divider",a&&"disabled",r&&"button","flex-start"===t&&"alignItemsFlexStart",d&&"secondaryAction",u&&"selected"],container:["container"]};return(0,s.Z)(p,Z,o)})(H),U=(0,h.Z)(_,t),Y=R.Root||N,J=C.root||{},Q=(0,n.Z)({className:(0,i.Z)(K.root,J.className,x),disabled:T},V);let ee=S||"li";return g&&(Q.component=S||"div",Q.focusVisibleClassName=(0,i.Z)(y.focusVisible,j),ee=p.Z),X?(ee=Q.component||S?ee:"div","li"===k&&("li"===ee?ee="div":"li"===Q.component&&(Q.component="div")),(0,w.jsx)(f.Z.Provider,{value:q,children:(0,w.jsxs)(z,(0,n.Z)({as:k,className:(0,i.Z)(K.container,I),ref:U,ownerState:H},D,{children:[(0,w.jsx)(Y,(0,n.Z)({},J,!(0,l.Z)(Y)&&{as:ee,ownerState:(0,n.Z)({},H,J.ownerState)},Q,{children:G})),G.pop()]}))})):(0,w.jsx)(f.Z.Provider,{value:q,children:(0,w.jsxs)(Y,(0,n.Z)({},J,{as:ee,ref:U,ownerState:H},!(0,l.Z)(Y)&&{ownerState:(0,n.Z)({},H,J.ownerState)},Q,{children:[G,F&&(0,w.jsx)(P,{children:F})]}))})}))},2440:(e,t,r)=>{"use strict";r.d(t,{Z:()=>f});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(9602),c=r(6122),d=r(9773),u=r(4867);function p(e){return(0,u.Z)("MuiList",e)}(0,r(1588).Z)("MuiList",["root","padding","dense","subheader"]);var m=r(5893);const v=["children","className","component","dense","disablePadding","subheader"],h=(0,l.ZP)("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,!r.disablePadding&&t.padding,r.dense&&t.dense,r.subheader&&t.subheader]}})((({ownerState:e})=>(0,n.Z)({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}))),f=a.forwardRef((function(e,t){const r=(0,c.Z)({props:e,name:"MuiList"}),{children:l,className:u,component:f="ul",dense:g=!1,disablePadding:b=!1,subheader:Z}=r,y=(0,o.Z)(r,v),x=a.useMemo((()=>({dense:g})),[g]),S=(0,n.Z)({},r,{component:f,dense:g,disablePadding:b}),w=(e=>{const{classes:t,disablePadding:r,dense:o,subheader:n}=e,a={root:["root",!r&&"padding",o&&"dense",n&&"subheader"]};return(0,s.Z)(a,p,t)})(S);return(0,m.jsx)(d.Z.Provider,{value:x,children:(0,m.jsxs)(h,(0,n.Z)({as:f,className:(0,i.Z)(w.root,u),ref:t,ownerState:S},y,{children:[Z,l]}))})}))},9773:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});const o=r(2950).createContext({})},6501:(e,t,r)=>{"use strict";r.d(t,{Z:()=>g});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(4780),l=r(1796),c=r(9602),d=r(6122),u=r(4867);function p(e){return(0,u.Z)("MuiPaper",e)}(0,r(1588).Z)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);var m=r(5893);const v=["className","component","elevation","square","variant"],h=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)},f=(0,c.ZP)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,t[r.variant],!r.square&&t.rounded,"elevation"===r.variant&&t[`elevation${r.elevation}`]]}})((({theme:e,ownerState:t})=>{var r;return(0,n.Z)({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&(0,n.Z)({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,l.Fq)("#fff",h(t.elevation))}, ${(0,l.Fq)("#fff",h(t.elevation))})`},e.vars&&{backgroundImage:null==(r=e.vars.overlays)?void 0:r[t.elevation]}))})),g=a.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiPaper"}),{className:a,component:l="div",elevation:c=1,square:u=!1,variant:h="elevation"}=r,g=(0,o.Z)(r,v),b=(0,n.Z)({},r,{component:l,elevation:c,square:u,variant:h}),Z=(e=>{const{square:t,elevation:r,variant:o,classes:n}=e,a={root:["root",o,!t&&"rounded","elevation"===o&&`elevation${r}`]};return(0,s.Z)(a,p,n)})(b);return(0,m.jsx)(f,(0,n.Z)({as:l,ownerState:b,className:(0,i.Z)(Z.root,a),ref:t},g))}))},2658:(e,t,r)=>{"use strict";r.d(t,{Z:()=>Z});var o=r(3366),n=r(7462),a=r(2950),i=r(6010),s=r(9707),l=r(4780),c=r(9602),d=r(6122),u=r(8216),p=r(4867);function m(e){return(0,p.Z)("MuiTypography",e)}(0,r(1588).Z)("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);var v=r(5893);const h=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],f=(0,c.ZP)("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,r.variant&&t[r.variant],"inherit"!==r.align&&t[`align${(0,u.Z)(r.align)}`],r.noWrap&&t.noWrap,r.gutterBottom&&t.gutterBottom,r.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>(0,n.Z)({margin:0},t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),g={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},b={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},Z=a.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiTypography"}),a=(e=>b[e]||e)(r.color),c=(0,s.Z)((0,n.Z)({},r,{color:a})),{align:p="inherit",className:Z,component:y,gutterBottom:x=!1,noWrap:S=!1,paragraph:w=!1,variant:R="body1",variantMapping:C=g}=c,k=(0,o.Z)(c,h),P=(0,n.Z)({},c,{align:p,color:a,className:Z,component:y,gutterBottom:x,noWrap:S,paragraph:w,variant:R,variantMapping:C}),M=y||(w?"p":C[R]||g[R])||"span",$=(e=>{const{align:t,gutterBottom:r,noWrap:o,paragraph:n,variant:a,classes:i}=e,s={root:["root",a,"inherit"!==e.align&&`align${(0,u.Z)(t)}`,r&&"gutterBottom",o&&"noWrap",n&&"paragraph"]};return(0,l.Z)(s,m,i)})(P);return(0,v.jsx)(f,(0,n.Z)({as:M,ref:t,ownerState:P,className:(0,i.Z)($.root,Z)},k))}))},3023:(e,t)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},6607:(e,t,r)=>{"use strict";r(3023)},2734:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a}),r(2950);var o=r(6631),n=r(247);function a(){return(0,o.Z)(n.Z)}},6280:(e,t,r)=>{"use strict";r.r(t),r.d(t,{capitalize:()=>n.Z,createChainedFunction:()=>a,createSvgIcon:()=>i.Z,debounce:()=>s,deprecatedPropType:()=>l,isMuiElement:()=>c.Z,ownerDocument:()=>u,ownerWindow:()=>p,requirePropFactory:()=>m,setRef:()=>v,unstable_ClassNameGenerator:()=>C,unstable_useEnhancedEffect:()=>h.Z,unstable_useId:()=>Z,unsupportedProp:()=>y,useControlled:()=>x,useEventCallback:()=>S.Z,useForkRef:()=>w.Z,useIsFocusVisible:()=>R.Z});var o=r(7078),n=r(8216);const a=function(...e){return e.reduce(((e,t)=>null==t?e:function(...r){e.apply(this,r),t.apply(this,r)}),(()=>{}))};var i=r(5949);const s=function(e,t=166){let r;function o(...o){clearTimeout(r),r=setTimeout((()=>{e.apply(this,o)}),t)}return o.clear=()=>{clearTimeout(r)},o},l=function(e,t){return()=>null};var c=r(8502);function d(e){return e&&e.ownerDocument||document}const u=d,p=function(e){return d(e).defaultView||window};r(7462);const m=function(e,t){return()=>null},v=r(7960).Z;var h=r(8974),f=r(2950);let g=0;const b=f.useId,Z=function(e){if(void 0!==b){const t=b();return null!=e?e:t}return function(e){const[t,r]=f.useState(e),o=e||t;return f.useEffect((()=>{null==t&&(g+=1,r(`mui-${g}`))}),[t]),o}(e)},y=function(e,t,r,o,n){return null},x=function({controlled:e,default:t,name:r,state:o="value"}){const{current:n}=f.useRef(void 0!==e),[a,i]=f.useState(t);return[n?e:a,f.useCallback((e=>{n||i(e)}),[])]};var S=r(5430),w=r(1705),R=r(3511);const C={configure:e=>{console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.","","You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead","","The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401","","The updated documentation: https://mui.com/guides/classname-generator/"].join("\n")),o.Z.configure(e)}}},8502:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});var o=r(2950);const n=function(e,t){return o.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}},8974:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});const o=r(6600).Z},5430:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var o=r(2950),n=r(6600);const a=function(e){const t=o.useRef(e);return(0,n.Z)((()=>{t.current=e})),o.useCallback(((...e)=>(0,t.current)(...e)),[])}},1705:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});const o=r(67).Z},3511:(e,t,r)=>{"use strict";r.d(t,{Z:()=>u});var o=r(2950);let n,a=!0,i=!1;const s={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function l(e){e.metaKey||e.altKey||e.ctrlKey||(a=!0)}function c(){a=!1}function d(){"hidden"===this.visibilityState&&i&&(a=!0)}const u=function(){const e=o.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",l,!0),t.addEventListener("mousedown",c,!0),t.addEventListener("pointerdown",c,!0),t.addEventListener("touchstart",c,!0),t.addEventListener("visibilitychange",d,!0))}),[]),t=o.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return a||function(e){const{type:t,tagName:r}=e;return!("INPUT"!==r||!s[t]||e.readOnly)||"TEXTAREA"===r&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(i=!0,window.clearTimeout(n),n=window.setTimeout((()=>{i=!1}),100),t.current=!1,!0)},ref:e}}},4810:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s}),r(2950);var o=r(8292),n=r(6898),a=r(5893);const i=(0,n.Z)({key:"css",prepend:!0});function s(e){const{injectFirst:t,children:r}=e;return t?(0,a.jsx)(o.CacheProvider,{value:i,children:r}):r}},5974:(e,t,r)=>{"use strict";r.d(t,{Z:()=>m});var o=r(2950),n=r(7462),a=r(4819),i=r(6760);const s="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var l=r(5893);const c=function(e){const{children:t,theme:r}=e,c=(0,i.Z)(),d=o.useMemo((()=>{const e=null===c?r:function(e,t){return"function"==typeof t?t(e):(0,n.Z)({},e,t)}(c,r);return null!=e&&(e[s]=null!==c),e}),[r,c]);return(0,l.jsx)(a.Z.Provider,{value:d,children:t})};var d=r(8292),u=r(6631);function p(e){const t=(0,u.Z)();return(0,l.jsx)(d.ThemeContext.Provider,{value:"object"==typeof t?t:{},children:e.children})}const m=function(e){const{children:t,theme:r}=e;return(0,l.jsx)(c,{theme:r,children:(0,l.jsx)(p,{children:t})})}},9707:(e,t,r)=>{"use strict";r.d(t,{Z:()=>l});var o=r(7462),n=r(3366),a=r(9766),i=r(6977);const s=["sx"];function l(e){const{sx:t}=e,r=(0,n.Z)(e,s),{systemProps:l,otherProps:c}=(e=>{const t={systemProps:{},otherProps:{}};return Object.keys(e).forEach((r=>{i.Gc[r]?t.systemProps[r]=e[r]:t.otherProps[r]=e[r]})),t})(r);let d;return d=Array.isArray(t)?[l,...t]:"function"==typeof t?(...e)=>{const r=t(...e);return(0,a.P)(r)?(0,o.Z)({},l,r):l}:(0,o.Z)({},l,t),(0,o.Z)({},c,{sx:d})}},7960:(e,t,r)=>{"use strict";function o(e,t){"function"==typeof e?e(t):e&&(e.current=t)}r.d(t,{Z:()=>o})},6600:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});var o=r(2950);const n="undefined"!=typeof window?o.useLayoutEffect:o.useEffect},67:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var o=r(2950),n=r(7960);function a(e,t){return o.useMemo((()=>null==e&&null==t?null:r=>{(0,n.Z)(e,r),(0,n.Z)(t,r)}),[e,t])}},4836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7326:(e,t,r)=>{"use strict";function o(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}r.d(t,{Z:()=>o})},9611:(e,t,r)=>{"use strict";function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}r.d(t,{Z:()=>o})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBUyxHQUV2QixDQUFDRixFQUFNQyxHQUNaLFlDWkFFLEVBQU8vdEIsUUFOUCxTQUFnQ2lSLEdBQzlCLE9BQU9BLEdBQU9BLEVBQUkrYyxXQUFhL2MsRUFBTSxDQUNuQyxRQUFXQSxFQUVmLEVBRXlDOGMsRUFBTy90QixRQUFRZ3VCLFlBQWEsRUFBTUQsRUFBTy90QixRQUFpQixRQUFJK3RCLEVBQU8vdEIscUNDTi9GLFNBQVNpdUIsRUFBdUJDLEdBQzdDLFFBQWEsSUFBVEEsRUFDRixNQUFNLElBQUlDLGVBQWUsNkRBRzNCLE9BQU9ELENBQ1QsK0NDTmUsU0FBU0UsRUFBZ0JDLEVBQUdDLEdBS3pDLE9BSkFGLEVBQWtCN3RCLE9BQU80UixlQUFpQjVSLE9BQU80UixlQUFldEIsT0FBUyxTQUF5QndkLEVBQUdDLEdBRW5HLE9BREFELEVBQUVFLFVBQVlELEVBQ1BELENBQ1QsRUFDT0QsRUFBZ0JDLEVBQUdDLEVBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9pc0hvc3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvU2hvcHBpbmdDYXJ0LmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL1BlcnNvbi5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BdmF0YXIvYXZhdGFyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BdmF0YXIvQXZhdGFyLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VQcmV2aW91c1Byb3BzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvQmFkZ2VVbnN0eWxlZC9iYWRnZVVuc3R5bGVkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL29taXRFdmVudEhhbmRsZXJzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvdXNlU2xvdFByb3BzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvcmVzb2x2ZUNvbXBvbmVudFByb3BzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvbWVyZ2VTbG90UHJvcHMuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9leHRyYWN0RXZlbnRIYW5kbGVycy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2FwcGVuZE93bmVyU3RhdGUuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9CYWRnZVVuc3R5bGVkL0JhZGdlVW5zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9CYWRnZVVuc3R5bGVkL3VzZUJhZGdlLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3Nob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CYWRnZS9iYWRnZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQmFkZ2UvQmFkZ2UuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQm90dG9tTmF2aWdhdGlvbkFjdGlvbi9ib3R0b21OYXZpZ2F0aW9uQWN0aW9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uL0JvdHRvbU5hdmlnYXRpb25BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQm90dG9tTmF2aWdhdGlvbi9ib3R0b21OYXZpZ2F0aW9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3R0b21OYXZpZ2F0aW9uL0JvdHRvbU5hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVCb3guanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQm94L0JveC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS90b3VjaFJpcHBsZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL2J1dHRvbkJhc2VDbGFzc2VzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvQnV0dG9uQmFzZS5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b24vYnV0dG9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25Hcm91cC9CdXR0b25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzL2NpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NpcmN1bGFyUHJvZ3Jlc3MvQ2lyY3VsYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JY29uQnV0dG9uL2ljb25CdXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ljb25CdXR0b24vSWNvbkJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcy9saW5lYXJQcm9ncmVzc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGluZWFyUHJvZ3Jlc3MvTGluZWFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1BdmF0YXIvbGlzdEl0ZW1BdmF0YXJDbGFzc2VzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtQXZhdGFyL0xpc3RJdGVtQXZhdGFyLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtVGV4dC9saXN0SXRlbVRleHRDbGFzc2VzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtVGV4dC9MaXN0SXRlbVRleHQuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW0vbGlzdEl0ZW1DbGFzc2VzLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtQnV0dG9uL2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbi9saXN0SXRlbVNlY29uZGFyeUFjdGlvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24vTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW0vTGlzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdC9saXN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0L0xpc3QuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdC9MaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYXBlci9wYXBlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeS90eXBvZ3JhcGh5Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlcHJlY2F0ZWRQcm9wVHlwZS5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9vd25lcldpbmRvdy5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9yZXF1aXJlUHJvcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9zZXRSZWYuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlkLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUlkLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdW5zdXBwb3J0ZWRQcm9wLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUNvbnRyb2xsZWQuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUNvbnRyb2xsZWQuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9pc011aUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL1N0eWxlZEVuZ2luZVByb3ZpZGVyL1N0eWxlZEVuZ2luZVByb3ZpZGVyLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2V4dGVuZFN4UHJvcC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vc2V0UmVmLmpzIiwid2VicGFjazovL25wd2RfYWdfZGFya3dlYi8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VFbmhhbmNlZEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vbnB3ZF9hZ19kYXJrd2ViLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9ucHdkX2FnX2Rhcmt3ZWIvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIERPTSBlbGVtZW50IG5hbWUgKGkuZS4gbm90IGEgUmVhY3QgY29tcG9uZW50KS5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0Q29tcG9uZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNIb3N0Q29tcG9uZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk03IDE4Yy0xLjEgMC0xLjk5LjktMS45OSAyUzUuOSAyMiA3IDIyczItLjkgMi0yLS45LTItMi0yek0xIDJ2MmgybDMuNiA3LjU5LTEuMzUgMi40NWMtLjE2LjI4LS4yNS42MS0uMjUuOTYgMCAxLjEuOSAyIDIgMmgxMnYtMkg3LjQyYy0uMTQgMC0uMjUtLjExLS4yNS0uMjVsLjAzLS4xMi45LTEuNjNoNy40NWMuNzUgMCAxLjQxLS40MSAxLjc1LTEuMDNsMy41OC02LjQ5Yy4wOC0uMTQuMTItLjMxLjEyLS40OCAwLS41NS0uNDUtMS0xLTFINS4yMWwtLjk0LTJIMXptMTYgMTZjLTEuMSAwLTEuOTkuOS0xLjk5IDJzLjg5IDIgMS45OSAyIDItLjkgMi0yLS45LTItMi0yelwiXG59KSwgJ1Nob3BwaW5nQ2FydCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWxzLmNyZWF0ZVN2Z0ljb247XG4gIH1cbn0pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvbWF0ZXJpYWwvdXRpbHNcIik7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDEyYzIuMjEgMCA0LTEuNzkgNC00cy0xLjc5LTQtNC00LTQgMS43OS00IDQgMS43OSA0IDQgNHptMCAyYy0yLjY3IDAtOCAxLjM0LTggNHYyaDE2di0yYzAtMi42Ni01LjMzLTQtOC00elwiXG59KSwgJ1BlcnNvbicpOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmF0YXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUF2YXRhcicsIHNsb3QpO1xufVxuY29uc3QgYXZhdGFyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUF2YXRhcicsIFsncm9vdCcsICdjb2xvckRlZmF1bHQnLCAnY2lyY3VsYXInLCAncm91bmRlZCcsICdzcXVhcmUnLCAnaW1nJywgJ2ZhbGxiYWNrJ10pO1xuZXhwb3J0IGRlZmF1bHQgYXZhdGFyQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWx0XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbWdQcm9wc1wiLCBcInNpemVzXCIsIFwic3JjXCIsIFwic3JjU2V0XCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUGVyc29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9QZXJzb24nO1xuaW1wb3J0IHsgZ2V0QXZhdGFyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9hdmF0YXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHZhcmlhbnQsXG4gICAgY29sb3JEZWZhdWx0XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBjb2xvckRlZmF1bHQgJiYgJ2NvbG9yRGVmYXVsdCddLFxuICAgIGltZzogWydpbWcnXSxcbiAgICBmYWxsYmFjazogWydmYWxsYmFjayddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QXZhdGFyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IEF2YXRhclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUF2YXRhcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5jb2xvckRlZmF1bHQgJiYgc3R5bGVzLmNvbG9yRGVmYXVsdF07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGZsZXhTaHJpbms6IDAsXG4gIHdpZHRoOiA0MCxcbiAgaGVpZ2h0OiA0MCxcbiAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKSxcbiAgbGluZUhlaWdodDogMSxcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB1c2VyU2VsZWN0OiAnbm9uZSdcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3JvdW5kZWQnICYmIHtcbiAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdzcXVhcmUnICYmIHtcbiAgYm9yZGVyUmFkaXVzOiAwXG59LCBvd25lclN0YXRlLmNvbG9yRGVmYXVsdCAmJiBfZXh0ZW5kcyh7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHRcbn0sIHRoZW1lLnZhcnMgPyB7XG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLkF2YXRhci5kZWZhdWx0Qmdcbn0gOiB7XG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNjAwXVxufSkpKTtcbmNvbnN0IEF2YXRhckltZyA9IHN0eWxlZCgnaW1nJywge1xuICBuYW1lOiAnTXVpQXZhdGFyJyxcbiAgc2xvdDogJ0ltZycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmltZ1xufSkoe1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgLy8gSGFuZGxlIG5vbi1zcXVhcmUgaW1hZ2UuIFRoZSBwcm9wZXJ0eSBpc24ndCBzdXBwb3J0ZWQgYnkgSUUxMS5cbiAgb2JqZWN0Rml0OiAnY292ZXInLFxuICAvLyBIaWRlIGFsdCB0ZXh0LlxuICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgLy8gSGlkZSB0aGUgaW1hZ2UgYnJva2VuIGljb24sIG9ubHkgd29ya3Mgb24gQ2hyb21lLlxuICB0ZXh0SW5kZW50OiAxMDAwMFxufSk7XG5jb25zdCBBdmF0YXJGYWxsYmFjayA9IHN0eWxlZChQZXJzb24sIHtcbiAgbmFtZTogJ011aUF2YXRhcicsXG4gIHNsb3Q6ICdGYWxsYmFjaycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmZhbGxiYWNrXG59KSh7XG4gIHdpZHRoOiAnNzUlJyxcbiAgaGVpZ2h0OiAnNzUlJ1xufSk7XG5cbmZ1bmN0aW9uIHVzZUxvYWRlZCh7XG4gIGNyb3NzT3JpZ2luLFxuICByZWZlcnJlclBvbGljeSxcbiAgc3JjLFxuICBzcmNTZXRcbn0pIHtcbiAgY29uc3QgW2xvYWRlZCwgc2V0TG9hZGVkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNyYyAmJiAhc3JjU2V0KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHNldExvYWRlZChmYWxzZSk7XG4gICAgbGV0IGFjdGl2ZSA9IHRydWU7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcblxuICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0TG9hZGVkKCdsb2FkZWQnKTtcbiAgICB9O1xuXG4gICAgaW1hZ2Uub25lcnJvciA9ICgpID0+IHtcbiAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0TG9hZGVkKCdlcnJvcicpO1xuICAgIH07XG5cbiAgICBpbWFnZS5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuICAgIGltYWdlLnJlZmVycmVyUG9saWN5ID0gcmVmZXJyZXJQb2xpY3k7XG4gICAgaW1hZ2Uuc3JjID0gc3JjO1xuXG4gICAgaWYgKHNyY1NldCkge1xuICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3JjU2V0O1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuICB9LCBbY3Jvc3NPcmlnaW4sIHJlZmVycmVyUG9saWN5LCBzcmMsIHNyY1NldF0pO1xuICByZXR1cm4gbG9hZGVkO1xufVxuXG5jb25zdCBBdmF0YXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBdmF0YXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUF2YXRhcidcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGFsdCxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICBpbWdQcm9wcyxcbiAgICBzaXplcyxcbiAgICBzcmMsXG4gICAgc3JjU2V0LFxuICAgIHZhcmlhbnQgPSAnY2lyY3VsYXInXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBsZXQgY2hpbGRyZW4gPSBudWxsOyAvLyBVc2UgYSBob29rIGluc3RlYWQgb2Ygb25FcnJvciBvbiB0aGUgaW1nIGVsZW1lbnQgdG8gc3VwcG9ydCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG5cbiAgY29uc3QgbG9hZGVkID0gdXNlTG9hZGVkKF9leHRlbmRzKHt9LCBpbWdQcm9wcywge1xuICAgIHNyYyxcbiAgICBzcmNTZXRcbiAgfSkpO1xuICBjb25zdCBoYXNJbWcgPSBzcmMgfHwgc3JjU2V0O1xuICBjb25zdCBoYXNJbWdOb3RGYWlsaW5nID0gaGFzSW1nICYmIGxvYWRlZCAhPT0gJ2Vycm9yJztcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3JEZWZhdWx0OiAhaGFzSW1nTm90RmFpbGluZyxcbiAgICBjb21wb25lbnQsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG5cbiAgaWYgKGhhc0ltZ05vdEZhaWxpbmcpIHtcbiAgICBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9fanN4KEF2YXRhckltZywgX2V4dGVuZHMoe1xuICAgICAgYWx0OiBhbHQsXG4gICAgICBzcmM6IHNyYyxcbiAgICAgIHNyY1NldDogc3JjU2V0LFxuICAgICAgc2l6ZXM6IHNpemVzLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbWdcbiAgICB9LCBpbWdQcm9wcykpO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuUHJvcCAhPSBudWxsKSB7XG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlblByb3A7XG4gIH0gZWxzZSBpZiAoaGFzSW1nICYmIGFsdCkge1xuICAgIGNoaWxkcmVuID0gYWx0WzBdO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL19qc3goQXZhdGFyRmFsbGJhY2ssIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5mYWxsYmFja1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEF2YXRhclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEF2YXRhci5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGBzcmNgIG9yIGBzcmNTZXRgIHRvXG4gICAqIHByb3ZpZGUgYW4gYWx0IGF0dHJpYnV0ZSBmb3IgdGhlIHJlbmRlcmVkIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gcmVuZGVyIGljb24gb3IgdGV4dCBlbGVtZW50cyBpbnNpZGUgdGhlIEF2YXRhciBpZiBgc3JjYCBpcyBub3Qgc2V0LlxuICAgKiBUaGlzIGNhbiBiZSBhbiBlbGVtZW50LCBvciBqdXN0IGEgc3RyaW5nLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2ltZyNhdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW1nYCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgdXNlZCB0byBkaXNwbGF5IGFuIGltYWdlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB0byBsaXN0ZW4gZm9yIHRoZSBsb2FkaW5nIGVycm9yIGV2ZW50LlxuICAgKi9cbiAgaW1nUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBgc2l6ZXNgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBzaXplczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGBzcmNgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBzcmM6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBgc3JjU2V0YCBhdHRyaWJ1dGUgZm9yIHRoZSBgaW1nYCBlbGVtZW50LlxuICAgKiBVc2UgdGhpcyBhdHRyaWJ1dGUgZm9yIHJlc3BvbnNpdmUgaW1hZ2UgZGlzcGxheS5cbiAgICovXG4gIHNyY1NldDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUgb2YgdGhlIGF2YXRhci5cbiAgICogQGRlZmF1bHQgJ2NpcmN1bGFyJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2lyY3VsYXInLCAncm91bmRlZCcsICdzcXVhcmUnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEF2YXRhcjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHVzZVByZXZpb3VzUHJvcHMgPSB2YWx1ZSA9PiB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZWYuY3VycmVudDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVByZXZpb3VzUHJvcHM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJhZGdlVW5zdHlsZWRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ0Jhc2VCYWRnZScsIHNsb3QpO1xufVxuY29uc3QgYmFkZ2VVbnN0eWxlZENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdCYXNlQmFkZ2UnLCBbJ3Jvb3QnLCAnYmFkZ2UnLCAnaW52aXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYmFkZ2VVbnN0eWxlZENsYXNzZXM7IiwiLyoqXG4gKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXJzIGZyb20gdGhlIGdpdmVuIG9iamVjdC5cbiAqIEEgZmllbGQgaXMgY29uc2lkZXJlZCBhbiBldmVudCBoYW5kbGVyIGlmIGl0IGlzIGEgZnVuY3Rpb24gd2l0aCBhIG5hbWUgYmVnaW5uaW5nIHdpdGggYG9uYC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IE9iamVjdCB0byByZW1vdmUgZXZlbnQgaGFuZGxlcnMgZnJvbS5cbiAqIEByZXR1cm5zIE9iamVjdCB3aXRoIGV2ZW50IGhhbmRsZXJzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9taXRFdmVudEhhbmRsZXJzKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5maWx0ZXIocHJvcCA9PiAhKHByb3AubWF0Y2goL15vbltBLVpdLykgJiYgdHlwZW9mIG9iamVjdFtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgcmVzdWx0W3Byb3BdID0gb2JqZWN0W3Byb3BdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZWxlbWVudFR5cGVcIiwgXCJleHRlcm5hbFNsb3RQcm9wc1wiLCBcIm93bmVyU3RhdGVcIl07XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBhcHBlbmRPd25lclN0YXRlIGZyb20gJy4vYXBwZW5kT3duZXJTdGF0ZSc7XG5pbXBvcnQgbWVyZ2VTbG90UHJvcHMgZnJvbSAnLi9tZXJnZVNsb3RQcm9wcyc7XG5pbXBvcnQgcmVzb2x2ZUNvbXBvbmVudFByb3BzIGZyb20gJy4vcmVzb2x2ZUNvbXBvbmVudFByb3BzJztcblxuLyoqXG4gKiBCdWlsZHMgdGhlIHByb3BzIHRvIGJlIHBhc3NlZCBpbnRvIHRoZSBzbG90IG9mIGFuIHVuc3R5bGVkIGNvbXBvbmVudC5cbiAqIEl0IG1lcmdlcyB0aGUgaW50ZXJuYWwgcHJvcHMgb2YgdGhlIGNvbXBvbmVudCB3aXRoIHRoZSBvbmVzIHN1cHBsaWVkIGJ5IHRoZSB1c2VyLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yLlxuICogSWYgdGhlIHNsb3QgY29tcG9uZW50IGlzIG5vdCBhIGhvc3QgY29tcG9uZW50LCBpdCBhbHNvIG1lcmdlcyBpbiB0aGUgYG93bmVyU3RhdGVgLlxuICpcbiAqIEBwYXJhbSBwYXJhbWV0ZXJzLmdldFNsb3RQcm9wcyAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBwcm9wcyB0byBiZSBwYXNzZWQgdG8gdGhlIHNsb3QgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTbG90UHJvcHMocGFyYW1ldGVycykge1xuICB2YXIgX3BhcmFtZXRlcnMkYWRkaXRpb25hO1xuXG4gIGNvbnN0IHtcbiAgICBlbGVtZW50VHlwZSxcbiAgICBleHRlcm5hbFNsb3RQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwYXJhbWV0ZXJzLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFyYW1ldGVycywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCByZXNvbHZlZENvbXBvbmVudHNQcm9wcyA9IHJlc29sdmVDb21wb25lbnRQcm9wcyhleHRlcm5hbFNsb3RQcm9wcywgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IHtcbiAgICBwcm9wczogbWVyZ2VkUHJvcHMsXG4gICAgaW50ZXJuYWxSZWZcbiAgfSA9IG1lcmdlU2xvdFByb3BzKF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzXG4gIH0pKTtcbiAgY29uc3QgcmVmID0gdXNlRm9ya1JlZihpbnRlcm5hbFJlZiwgdXNlRm9ya1JlZihyZXNvbHZlZENvbXBvbmVudHNQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMucmVmLCAoX3BhcmFtZXRlcnMkYWRkaXRpb25hID0gcGFyYW1ldGVycy5hZGRpdGlvbmFsUHJvcHMpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyYW1ldGVycyRhZGRpdGlvbmEucmVmKSk7XG4gIGNvbnN0IHByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShlbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIG1lcmdlZFByb3BzLCB7XG4gICAgcmVmXG4gIH0pLCBvd25lclN0YXRlKTtcbiAgcmV0dXJuIHByb3BzO1xufSIsIi8qKlxuICogSWYgYGNvbXBvbmVudFByb3BzYCBpcyBhIGZ1bmN0aW9uLCBjYWxscyBpdCB3aXRoIHRoZSBwcm92aWRlZCBgb3duZXJTdGF0ZWAuXG4gKiBPdGhlcndpc2UsIGp1c3QgcmV0dXJucyBgY29tcG9uZW50UHJvcHNgLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50UHJvcHMoY29tcG9uZW50UHJvcHMsIG93bmVyU3RhdGUpIHtcbiAgaWYgKHR5cGVvZiBjb21wb25lbnRQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjb21wb25lbnRQcm9wcyhvd25lclN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiBjb21wb25lbnRQcm9wcztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGV4dHJhY3RFdmVudEhhbmRsZXJzIGZyb20gJy4vZXh0cmFjdEV2ZW50SGFuZGxlcnMnO1xuaW1wb3J0IG9taXRFdmVudEhhbmRsZXJzIGZyb20gJy4vb21pdEV2ZW50SGFuZGxlcnMnO1xuXG4vKipcbiAqIE1lcmdlcyB0aGUgc2xvdCBjb21wb25lbnQgaW50ZXJuYWwgcHJvcHMgKHVzdWFsbHkgY29taW5nIGZyb20gYSBob29rKVxuICogd2l0aCB0aGUgZXh0ZXJuYWxseSBwcm92aWRlZCBvbmVzLlxuICpcbiAqIFRoZSBtZXJnZSBvcmRlciBpcyAodGhlIGxhdHRlciBvdmVycmlkZXMgdGhlIGZvcm1lcik6XG4gKiAxLiBUaGUgaW50ZXJuYWwgcHJvcHMgKHNwZWNpZmllZCBhcyBhIGdldHRlciBmdW5jdGlvbiB0byB3b3JrIHdpdGggZ2V0KlByb3BzIGhvb2sgcmVzdWx0KVxuICogMi4gQWRkaXRpb25hbCBwcm9wcyAoc3BlY2lmaWVkIGludGVybmFsbHkgb24gYW4gdW5zdHlsZWQgY29tcG9uZW50KVxuICogMy4gRXh0ZXJuYWwgcHJvcHMgc3BlY2lmaWVkIG9uIHRoZSBvd25lciBjb21wb25lbnQuIFRoZXNlIHNob3VsZCBvbmx5IGJlIHVzZWQgb24gYSByb290IHNsb3QuXG4gKiA0LiBFeHRlcm5hbCBwcm9wcyBzcGVjaWZpZWQgaW4gdGhlIGBjb21wb25lbnRzUHJvcHMuKmAgcHJvcC5cbiAqIDUuIFRoZSBgY2xhc3NOYW1lYCBwcm9wIC0gY29tYmluZWQgZnJvbSBhbGwgdGhlIGFib3ZlLlxuICogQHBhcmFtIHBhcmFtZXRlcnNcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlU2xvdFByb3BzKHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGdldFNsb3RQcm9wcyxcbiAgICBhZGRpdGlvbmFsUHJvcHMsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHMsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBjbGFzc05hbWVcbiAgfSA9IHBhcmFtZXRlcnM7XG5cbiAgaWYgKCFnZXRTbG90UHJvcHMpIHtcbiAgICAvLyBUaGUgc2ltcGxlciBjYXNlIC0gZ2V0U2xvdFByb3BzIGlzIG5vdCBkZWZpbmVkLCBzbyBubyBpbnRlcm5hbCBldmVudCBoYW5kbGVycyBhcmUgZGVmaW5lZCxcbiAgICAvLyBzbyB3ZSBjYW4gc2ltcGx5IG1lcmdlIGFsbCB0aGUgcHJvcHMgd2l0aG91dCBoYXZpbmcgdG8gd29ycnkgYWJvdXQgZXh0cmFjdGluZyBldmVudCBoYW5kbGVycy5cbiAgICBjb25zdCBqb2luZWRDbGFzc2VzID0gY2xzeChleHRlcm5hbEZvcndhcmRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbEZvcndhcmRlZFByb3BzLmNsYXNzTmFtZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5jbGFzc05hbWUpO1xuXG4gICAgY29uc3QgbWVyZ2VkU3R5bGUgPSBfZXh0ZW5kcyh7fSwgYWRkaXRpb25hbFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsUHJvcHMuc3R5bGUsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuc3R5bGUsIGV4dGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbFNsb3RQcm9wcy5zdHlsZSk7XG5cbiAgICBjb25zdCBwcm9wcyA9IF9leHRlbmRzKHt9LCBhZGRpdGlvbmFsUHJvcHMsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsIGV4dGVybmFsU2xvdFByb3BzKTtcblxuICAgIGlmIChqb2luZWRDbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3BzLmNsYXNzTmFtZSA9IGpvaW5lZENsYXNzZXM7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKG1lcmdlZFN0eWxlKS5sZW5ndGggPiAwKSB7XG4gICAgICBwcm9wcy5zdHlsZSA9IG1lcmdlZFN0eWxlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwcm9wcyxcbiAgICAgIGludGVybmFsUmVmOiB1bmRlZmluZWRcbiAgICB9O1xuICB9IC8vIEluIHRoaXMgY2FzZSwgZ2V0U2xvdFByb3BzIGlzIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIHRoZSBleHRlcm5hbCBldmVudCBoYW5kbGVycy5cbiAgLy8gV2UgZG9uJ3QgbmVlZCB0byBpbmNsdWRlIHRoZW0gaW4gdGhlIG1lcmdlZCBwcm9wcyBiZWNhdXNlIG9mIHRoaXMuXG5cblxuICBjb25zdCBldmVudEhhbmRsZXJzID0gZXh0cmFjdEV2ZW50SGFuZGxlcnMoX2V4dGVuZHMoe30sIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsIGV4dGVybmFsU2xvdFByb3BzKSk7XG4gIGNvbnN0IGNvbXBvbmVudHNQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzID0gb21pdEV2ZW50SGFuZGxlcnMoZXh0ZXJuYWxTbG90UHJvcHMpO1xuICBjb25zdCBvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMgPSBvbWl0RXZlbnRIYW5kbGVycyhleHRlcm5hbEZvcndhcmRlZFByb3BzKTtcbiAgY29uc3QgaW50ZXJuYWxTbG90UHJvcHMgPSBnZXRTbG90UHJvcHMoZXZlbnRIYW5kbGVycyk7IC8vIFRoZSBvcmRlciBvZiBjbGFzc2VzIGlzIGltcG9ydGFudCBoZXJlLlxuICAvLyBFbW90aW9uICh0aGF0IHdlIHVzZSBpbiBsaWJyYXJpZXMgY29uc3VtaW5nIE1VSSBCYXNlKSBkZXBlbmRzIG9uIHRoaXMgb3JkZXJcbiAgLy8gdG8gcHJvcGVybHkgb3ZlcnJpZGUgc3R5bGUuIEl0IHJlcXVpcmVzIHRoZSBtb3N0IGltcG9ydGFudCBjbGFzc2VzIHRvIGJlIGxhc3RcbiAgLy8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzMyMDUpIGZvciB0aGUgcmVsYXRlZCBkaXNjdXNzaW9uLlxuXG4gIGNvbnN0IGpvaW5lZENsYXNzZXMgPSBjbHN4KGludGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBpbnRlcm5hbFNsb3RQcm9wcy5jbGFzc05hbWUsIGFkZGl0aW9uYWxQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogYWRkaXRpb25hbFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBleHRlcm5hbEZvcndhcmRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbEZvcndhcmRlZFByb3BzLmNsYXNzTmFtZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLmNsYXNzTmFtZSk7XG5cbiAgY29uc3QgbWVyZ2VkU3R5bGUgPSBfZXh0ZW5kcyh7fSwgaW50ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGludGVybmFsU2xvdFByb3BzLnN0eWxlLCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5zdHlsZSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5zdHlsZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLnN0eWxlKTtcblxuICBjb25zdCBwcm9wcyA9IF9leHRlbmRzKHt9LCBpbnRlcm5hbFNsb3RQcm9wcywgYWRkaXRpb25hbFByb3BzLCBvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMsIGNvbXBvbmVudHNQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzKTtcblxuICBpZiAoam9pbmVkQ2xhc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgcHJvcHMuY2xhc3NOYW1lID0gam9pbmVkQ2xhc3NlcztcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhtZXJnZWRTdHlsZSkubGVuZ3RoID4gMCkge1xuICAgIHByb3BzLnN0eWxlID0gbWVyZ2VkU3R5bGU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHByb3BzLFxuICAgIGludGVybmFsUmVmOiBpbnRlcm5hbFNsb3RQcm9wcy5yZWZcbiAgfTtcbn0iLCIvKipcbiAqIEV4dHJhY3RzIGV2ZW50IGhhbmRsZXJzIGZyb20gYSBnaXZlbiBvYmplY3QuXG4gKiBBIHByb3AgaXMgY29uc2lkZXJlZCBhbiBldmVudCBoYW5kbGVyIGlmIGl0IGlzIGEgZnVuY3Rpb24gYW5kIGl0cyBuYW1lIHN0YXJ0cyB3aXRoIGBvbmAuXG4gKlxuICogQHBhcmFtIG9iamVjdCBBbiBvYmplY3QgdG8gZXh0cmFjdCBldmVudCBoYW5kbGVycyBmcm9tLlxuICogQHBhcmFtIGV4Y2x1ZGVLZXlzIEFuIGFycmF5IG9mIGtleXMgdG8gZXhjbHVkZSBmcm9tIHRoZSByZXR1cm5lZCBvYmplY3QuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dHJhY3RFdmVudEhhbmRsZXJzKG9iamVjdCwgZXhjbHVkZUtleXMgPSBbXSkge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5maWx0ZXIocHJvcCA9PiBwcm9wLm1hdGNoKC9eb25bQS1aXS8pICYmIHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdmdW5jdGlvbicgJiYgIWV4Y2x1ZGVLZXlzLmluY2x1ZGVzKHByb3ApKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIHJlc3VsdFtwcm9wXSA9IG9iamVjdFtwcm9wXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgaXNIb3N0Q29tcG9uZW50IGZyb20gJy4vaXNIb3N0Q29tcG9uZW50Jztcbi8qKlxuICogVHlwZSBvZiB0aGUgb3duZXJTdGF0ZSBiYXNlZCBvbiB0aGUgdHlwZSBvZiBhbiBlbGVtZW50IGl0IGFwcGxpZXMgdG8uXG4gKiBUaGlzIHJlc29sdmVzIHRvIHRoZSBwcm92aWRlZCBPd25lclN0YXRlIGZvciBSZWFjdCBjb21wb25lbnRzIGFuZCBgdW5kZWZpbmVkYCBmb3IgaG9zdCBjb21wb25lbnRzLlxuICogRmFsbHMgYmFjayB0byBgT3duZXJTdGF0ZSB8IHVuZGVmaW5lZGAgd2hlbiB0aGUgZXhhY3QgdHlwZSBjYW4ndCBiZSBkZXRlcm1pbmVkIGluIGRldmVsb3BtZW50IHRpbWUuXG4gKi9cblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBvd25lclN0YXRlIG9iamVjdCB0byB0aGUgcHJvcHMsIG1lcmdpbmcgd2l0aCB0aGUgZXhpc3Rpbmcgb25lIGlmIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudFR5cGUgVHlwZSBvZiB0aGUgZWxlbWVudCB0aGF0IG93bnMgdGhlIGBleGlzdGluZ1Byb3BzYC4gSWYgdGhlIGVsZW1lbnQgaXMgYSBET00gbm9kZSwgYG93bmVyU3RhdGVgIGlzIG5vdCBhcHBsaWVkLlxuICogQHBhcmFtIG90aGVyUHJvcHMgUHJvcHMgb2YgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gb3duZXJTdGF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBlbmRPd25lclN0YXRlKGVsZW1lbnRUeXBlLCBvdGhlclByb3BzID0ge30sIG93bmVyU3RhdGUpIHtcbiAgaWYgKGlzSG9zdENvbXBvbmVudChlbGVtZW50VHlwZSkpIHtcbiAgICByZXR1cm4gb3RoZXJQcm9wcztcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvdGhlclByb3BzLm93bmVyU3RhdGUsIG93bmVyU3RhdGUpXG4gIH0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJiYWRnZUNvbnRlbnRcIiwgXCJjb21wb25lbnRcIiwgXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJpbnZpc2libGVcIiwgXCJtYXhcIiwgXCJzaG93WmVyb1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnLi4vY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHVzZUJhZGdlIGZyb20gJy4vdXNlQmFkZ2UnO1xuaW1wb3J0IHsgZ2V0QmFkZ2VVbnN0eWxlZFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYmFkZ2VVbnN0eWxlZENsYXNzZXMnO1xuaW1wb3J0IHsgdXNlU2xvdFByb3BzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGludmlzaWJsZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgYmFkZ2U6IFsnYmFkZ2UnLCBpbnZpc2libGUgJiYgJ2ludmlzaWJsZSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QmFkZ2VVbnN0eWxlZFV0aWxpdHlDbGFzcywgdW5kZWZpbmVkKTtcbn07XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtCYWRnZV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvcmVhY3QtYmFkZ2UvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtCYWRnZVVuc3R5bGVkIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvYXBpL2JhZGdlLXVuc3R5bGVkLylcbiAqL1xuXG5cbmNvbnN0IEJhZGdlVW5zdHlsZWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCYWRnZVVuc3R5bGVkKHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIGNvbXBvbmVudCxcbiAgICBjaGlsZHJlbixcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgbWF4OiBtYXhQcm9wID0gOTksXG4gICAgc2hvd1plcm8gPSBmYWxzZVxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qge1xuICAgIGJhZGdlQ29udGVudCxcbiAgICBtYXgsXG4gICAgZGlzcGxheVZhbHVlLFxuICAgIGludmlzaWJsZVxuICB9ID0gdXNlQmFkZ2UoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgbWF4OiBtYXhQcm9wXG4gIH0pKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYmFkZ2VDb250ZW50LFxuICAgIGludmlzaWJsZSxcbiAgICBtYXgsXG4gICAgc2hvd1plcm9cbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBSb290ID0gY29tcG9uZW50IHx8IGNvbXBvbmVudHMuUm9vdCB8fCAnc3Bhbic7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFJvb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IGNvbXBvbmVudHNQcm9wcy5yb290LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgcmVmXG4gICAgfSxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yb290XG4gIH0pO1xuICBjb25zdCBCYWRnZSA9IGNvbXBvbmVudHMuQmFkZ2UgfHwgJ3NwYW4nO1xuICBjb25zdCBiYWRnZVByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogQmFkZ2UsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IGNvbXBvbmVudHNQcm9wcy5iYWRnZSxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5iYWRnZVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgLyojX19QVVJFX18qL19qc3goQmFkZ2UsIF9leHRlbmRzKHt9LCBiYWRnZVByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogZGlzcGxheVZhbHVlXG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJhZGdlVW5zdHlsZWQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHJlbmRlcmVkIHdpdGhpbiB0aGUgYmFkZ2UuXG4gICAqL1xuICBiYWRnZUNvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgYmFkZ2Ugd2lsbCBiZSBhZGRlZCByZWxhdGl2ZSB0byB0aGlzIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWRnZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgQmFkZ2U6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWRnZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWRnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWRnZSBpcyBpbnZpc2libGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNYXggY291bnQgdG8gc2hvdy5cbiAgICogQGRlZmF1bHQgOTlcbiAgICovXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciB0aGUgYmFkZ2UgaXMgaGlkZGVuIHdoZW4gYGJhZGdlQ29udGVudGAgaXMgemVyby5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNob3daZXJvOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJhZGdlVW5zdHlsZWQ7IiwiaW1wb3J0IHsgdXNlUHJldmlvdXNQcm9wcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQmFkZ2UocGFyYW1ldGVycykge1xuICBjb25zdCB7XG4gICAgYmFkZ2VDb250ZW50OiBiYWRnZUNvbnRlbnRQcm9wLFxuICAgIGludmlzaWJsZTogaW52aXNpYmxlUHJvcCA9IGZhbHNlLFxuICAgIG1heDogbWF4UHJvcCA9IDk5LFxuICAgIHNob3daZXJvID0gZmFsc2VcbiAgfSA9IHBhcmFtZXRlcnM7XG4gIGNvbnN0IHByZXZQcm9wcyA9IHVzZVByZXZpb3VzUHJvcHMoe1xuICAgIGJhZGdlQ29udGVudDogYmFkZ2VDb250ZW50UHJvcCxcbiAgICBtYXg6IG1heFByb3BcbiAgfSk7XG4gIGxldCBpbnZpc2libGUgPSBpbnZpc2libGVQcm9wO1xuXG4gIGlmIChpbnZpc2libGVQcm9wID09PSBmYWxzZSAmJiBiYWRnZUNvbnRlbnRQcm9wID09PSAwICYmICFzaG93WmVybykge1xuICAgIGludmlzaWJsZSA9IHRydWU7XG4gIH1cblxuICBjb25zdCB7XG4gICAgYmFkZ2VDb250ZW50LFxuICAgIG1heCA9IG1heFByb3BcbiAgfSA9IGludmlzaWJsZSA/IHByZXZQcm9wcyA6IHBhcmFtZXRlcnM7XG4gIGNvbnN0IGRpc3BsYXlWYWx1ZSA9IGJhZGdlQ29udGVudCAmJiBOdW1iZXIoYmFkZ2VDb250ZW50KSA+IG1heCA/IGAke21heH0rYCA6IGJhZGdlQ29udGVudDtcbiAgcmV0dXJuIHtcbiAgICBiYWRnZUNvbnRlbnQsXG4gICAgaW52aXNpYmxlLFxuICAgIG1heCxcbiAgICBkaXNwbGF5VmFsdWVcbiAgfTtcbn0iLCJpbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UnO1xuXG5jb25zdCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMgPSBTbG90ID0+IHtcbiAgcmV0dXJuICFTbG90IHx8ICFpc0hvc3RDb21wb25lbnQoU2xvdCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS9iYXNlL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvYmFzZS9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFkZ2VVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJhZGdlJywgc2xvdCk7XG59XG5jb25zdCBiYWRnZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCYWRnZScsIFsncm9vdCcsICdiYWRnZScsICdkb3QnLCAnc3RhbmRhcmQnLCAnYW5jaG9yT3JpZ2luVG9wUmlnaHQnLCAnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHQnLCAnYW5jaG9yT3JpZ2luVG9wTGVmdCcsICdhbmNob3JPcmlnaW5Cb3R0b21MZWZ0JywgJ2ludmlzaWJsZScsICdjb2xvckVycm9yJywgJ2NvbG9ySW5mbycsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdvdmVybGFwUmVjdGFuZ3VsYXInLCAnb3ZlcmxhcENpcmN1bGFyJywgLy8gVE9ETzogdjYgcmVtb3ZlIHRoZSBvdmVybGFwIHZhbHVlIGZyb20gdGhlc2UgY2xhc3Mga2V5c1xuJ2FuY2hvck9yaWdpblRvcExlZnRDaXJjdWxhcicsICdhbmNob3JPcmlnaW5Ub3BMZWZ0UmVjdGFuZ3VsYXInLCAnYW5jaG9yT3JpZ2luVG9wUmlnaHRDaXJjdWxhcicsICdhbmNob3JPcmlnaW5Ub3BSaWdodFJlY3Rhbmd1bGFyJywgJ2FuY2hvck9yaWdpbkJvdHRvbUxlZnRDaXJjdWxhcicsICdhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ3VsYXInLCAnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRDaXJjdWxhcicsICdhbmNob3JPcmlnaW5Cb3R0b21SaWdodFJlY3Rhbmd1bGFyJ10pO1xuZXhwb3J0IGRlZmF1bHQgYmFkZ2VDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbmNob3JPcmlnaW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwib3ZlcmxhcFwiLCBcImNvbG9yXCIsIFwiaW52aXNpYmxlXCIsIFwibWF4XCIsIFwiYmFkZ2VDb250ZW50XCIsIFwic2hvd1plcm9cIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdXNlUHJldmlvdXNQcm9wcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgQmFkZ2VVbnN0eWxlZCBmcm9tICdAbXVpL2Jhc2UvQmFkZ2VVbnN0eWxlZCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHNob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcyBmcm9tICcuLi91dGlscy9zaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgYmFkZ2VDbGFzc2VzLCB7IGdldEJhZGdlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9iYWRnZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFJBRElVU19TVEFOREFSRCA9IDEwO1xuY29uc3QgUkFESVVTX0RPVCA9IDQ7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBhbmNob3JPcmlnaW4sXG4gICAgaW52aXNpYmxlLFxuICAgIG92ZXJsYXAsXG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzID0ge31cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIGJhZGdlOiBbJ2JhZGdlJywgdmFyaWFudCwgaW52aXNpYmxlICYmICdpbnZpc2libGUnLCBgYW5jaG9yT3JpZ2luJHtjYXBpdGFsaXplKGFuY2hvck9yaWdpbi52ZXJ0aWNhbCl9JHtjYXBpdGFsaXplKGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKX1gLCBgYW5jaG9yT3JpZ2luJHtjYXBpdGFsaXplKGFuY2hvck9yaWdpbi52ZXJ0aWNhbCl9JHtjYXBpdGFsaXplKGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKX0ke2NhcGl0YWxpemUob3ZlcmxhcCl9YCwgYG92ZXJsYXAke2NhcGl0YWxpemUob3ZlcmxhcCl9YCwgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QmFkZ2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgQmFkZ2VSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQmFkZ2UnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIC8vIEZvciBjb3JyZWN0IGFsaWdubWVudCB3aXRoIHRoZSB0ZXh0LlxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgZmxleFNocmluazogMFxufSk7XG5jb25zdCBCYWRnZUJhZGdlID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQmFkZ2UnLFxuICBzbG90OiAnQmFkZ2UnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmJhZGdlLCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2BhbmNob3JPcmlnaW4ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwpfSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsKX0ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5vdmVybGFwKX1gXSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHN0eWxlcy5pbnZpc2libGVdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICBmbGV4V3JhcDogJ3dyYXAnLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgbWluV2lkdGg6IFJBRElVU19TVEFOREFSRCAqIDIsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIHBhZGRpbmc6ICcwIDZweCcsXG4gIGhlaWdodDogUkFESVVTX1NUQU5EQVJEICogMixcbiAgYm9yZGVyUmFkaXVzOiBSQURJVVNfU1RBTkRBUkQsXG4gIHpJbmRleDogMSxcbiAgLy8gUmVuZGVyIHRoZSBiYWRnZSBvbiB0b3Agb2YgcG90ZW50aWFsIHJpcHBsZXMuXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCxcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW5cbiAgfSlcbn0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dFxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZG90JyAmJiB7XG4gIGJvcmRlclJhZGl1czogUkFESVVTX0RPVCxcbiAgaGVpZ2h0OiBSQURJVVNfRE9UICogMixcbiAgbWluV2lkdGg6IFJBRElVU19ET1QgKiAyLFxuICBwYWRkaW5nOiAwXG59LCBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ3RvcCcgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdyZWN0YW5ndWxhcicgJiYge1xuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCAtNTAlKScsXG4gIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMCUnLFxuICBbYCYuJHtiYWRnZUNsYXNzZXMuaW52aXNpYmxlfWBdOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKDUwJSwgLTUwJSknXG4gIH1cbn0sIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAnYm90dG9tJyAmJiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAncmlnaHQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ3JlY3Rhbmd1bGFyJyAmJiB7XG4gIGJvdHRvbTogMCxcbiAgcmlnaHQ6IDAsXG4gIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSg1MCUsIDUwJSknLFxuICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDEwMCUnLFxuICBbYCYuJHtiYWRnZUNsYXNzZXMuaW52aXNpYmxlfWBdOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKDUwJSwgNTAlKSdcbiAgfVxufSwgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwgPT09ICd0b3AnICYmIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdsZWZ0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdyZWN0YW5ndWxhcicgJiYge1xuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJyxcbiAgW2AmLiR7YmFkZ2VDbGFzc2VzLmludmlzaWJsZX1gXToge1xuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgfVxufSwgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwgPT09ICdib3R0b20nICYmIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdsZWZ0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdyZWN0YW5ndWxhcicgJiYge1xuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsXG4gIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgNTAlKSdcbiAgfVxufSwgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwgPT09ICd0b3AnICYmIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdyaWdodCcgJiYgb3duZXJTdGF0ZS5vdmVybGFwID09PSAnY2lyY3VsYXInICYmIHtcbiAgdG9wOiAnMTQlJyxcbiAgcmlnaHQ6ICcxNCUnLFxuICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCAtNTAlKScsXG4gIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMCUnLFxuICBbYCYuJHtiYWRnZUNsYXNzZXMuaW52aXNpYmxlfWBdOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKDUwJSwgLTUwJSknXG4gIH1cbn0sIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAnYm90dG9tJyAmJiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAncmlnaHQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ2NpcmN1bGFyJyAmJiB7XG4gIGJvdHRvbTogJzE0JScsXG4gIHJpZ2h0OiAnMTQlJyxcbiAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgNTAlKScsXG4gIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCA1MCUpJ1xuICB9XG59LCBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ3RvcCcgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ2xlZnQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ2NpcmN1bGFyJyAmJiB7XG4gIHRvcDogJzE0JScsXG4gIGxlZnQ6ICcxNCUnLFxuICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJScsXG4gIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgLTUwJSknXG4gIH1cbn0sIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAnYm90dG9tJyAmJiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAnbGVmdCcgJiYgb3duZXJTdGF0ZS5vdmVybGFwID09PSAnY2lyY3VsYXInICYmIHtcbiAgYm90dG9tOiAnMTQlJyxcbiAgbGVmdDogJzE0JScsXG4gIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsXG4gIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgNTAlKSdcbiAgfVxufSwgb3duZXJTdGF0ZS5pbnZpc2libGUgJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsXG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfSlcbn0pKTtcbmNvbnN0IEJhZGdlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQmFkZ2UoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfY29tcG9uZW50c1Byb3BzJHJvb3QsIF9jb21wb25lbnRzUHJvcHMkcm9vdDIsIF9jb21wb25lbnRzUHJvcHMkYmFkZywgX2NvbXBvbmVudHNQcm9wcyRiYWRnMjtcblxuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCYWRnZSdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGFuY2hvck9yaWdpbjogYW5jaG9yT3JpZ2luUHJvcCA9IHtcbiAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgIGhvcml6b250YWw6ICdyaWdodCdcbiAgICB9LFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQgPSAnc3BhbicsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIG92ZXJsYXA6IG92ZXJsYXBQcm9wID0gJ3JlY3Rhbmd1bGFyJyxcbiAgICBjb2xvcjogY29sb3JQcm9wID0gJ2RlZmF1bHQnLFxuICAgIGludmlzaWJsZTogaW52aXNpYmxlUHJvcCA9IGZhbHNlLFxuICAgIG1heCxcbiAgICBiYWRnZUNvbnRlbnQ6IGJhZGdlQ29udGVudFByb3AsXG4gICAgc2hvd1plcm8gPSBmYWxzZSxcbiAgICB2YXJpYW50OiB2YXJpYW50UHJvcCA9ICdzdGFuZGFyZCdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHByZXZQcm9wcyA9IHVzZVByZXZpb3VzUHJvcHMoe1xuICAgIGFuY2hvck9yaWdpbjogYW5jaG9yT3JpZ2luUHJvcCxcbiAgICBjb2xvcjogY29sb3JQcm9wLFxuICAgIG92ZXJsYXA6IG92ZXJsYXBQcm9wLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRQcm9wXG4gIH0pO1xuICBsZXQgaW52aXNpYmxlID0gaW52aXNpYmxlUHJvcDtcblxuICBpZiAoaW52aXNpYmxlUHJvcCA9PT0gZmFsc2UgJiYgKGJhZGdlQ29udGVudFByb3AgPT09IDAgJiYgIXNob3daZXJvIHx8IGJhZGdlQ29udGVudFByb3AgPT0gbnVsbCAmJiB2YXJpYW50UHJvcCAhPT0gJ2RvdCcpKSB7XG4gICAgaW52aXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBjb2xvciA9IGNvbG9yUHJvcCxcbiAgICBvdmVybGFwID0gb3ZlcmxhcFByb3AsXG4gICAgYW5jaG9yT3JpZ2luID0gYW5jaG9yT3JpZ2luUHJvcCxcbiAgICB2YXJpYW50ID0gdmFyaWFudFByb3BcbiAgfSA9IGludmlzaWJsZSA/IHByZXZQcm9wcyA6IHByb3BzO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbmNob3JPcmlnaW4sXG4gICAgaW52aXNpYmxlLFxuICAgIGNvbG9yLFxuICAgIG92ZXJsYXAsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGxldCBkaXNwbGF5VmFsdWU7XG5cbiAgaWYgKHZhcmlhbnQgIT09ICdkb3QnKSB7XG4gICAgZGlzcGxheVZhbHVlID0gYmFkZ2VDb250ZW50UHJvcCAmJiBOdW1iZXIoYmFkZ2VDb250ZW50UHJvcCkgPiBtYXggPyBgJHttYXh9K2AgOiBiYWRnZUNvbnRlbnRQcm9wO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEJhZGdlVW5zdHlsZWQsIF9leHRlbmRzKHtcbiAgICBpbnZpc2libGU6IGludmlzaWJsZVByb3AsXG4gICAgYmFkZ2VDb250ZW50OiBkaXNwbGF5VmFsdWUsXG4gICAgc2hvd1plcm86IHNob3daZXJvLFxuICAgIG1heDogbWF4XG4gIH0sIG90aGVyLCB7XG4gICAgY29tcG9uZW50czogX2V4dGVuZHMoe1xuICAgICAgUm9vdDogQmFkZ2VSb290LFxuICAgICAgQmFkZ2U6IEJhZGdlQmFkZ2VcbiAgICB9LCBjb21wb25lbnRzKSxcbiAgICBjbGFzc05hbWU6IGNsc3goKF9jb21wb25lbnRzUHJvcHMkcm9vdCA9IGNvbXBvbmVudHNQcm9wcy5yb290KSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyRyb290LmNsYXNzTmFtZSwgY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGNvbXBvbmVudHNQcm9wczoge1xuICAgICAgcm9vdDogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy5yb290LCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMoY29tcG9uZW50cy5Sb290KSAmJiB7XG4gICAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCAoX2NvbXBvbmVudHNQcm9wcyRyb290MiA9IGNvbXBvbmVudHNQcm9wcy5yb290KSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyRyb290Mi5vd25lclN0YXRlLCB7XG4gICAgICAgICAgYW5jaG9yT3JpZ2luLFxuICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgIG92ZXJsYXAsXG4gICAgICAgICAgdmFyaWFudFxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICBiYWRnZTogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy5iYWRnZSwge1xuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5iYWRnZSwgKF9jb21wb25lbnRzUHJvcHMkYmFkZyA9IGNvbXBvbmVudHNQcm9wcy5iYWRnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb21wb25lbnRzUHJvcHMkYmFkZy5jbGFzc05hbWUpXG4gICAgICB9LCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMoY29tcG9uZW50cy5CYWRnZSkgJiYge1xuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkYmFkZzIgPSBjb21wb25lbnRzUHJvcHMuYmFkZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfY29tcG9uZW50c1Byb3BzJGJhZGcyLm93bmVyU3RhdGUsIHtcbiAgICAgICAgICBhbmNob3JPcmlnaW4sXG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgICB2YXJpYW50XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sXG4gICAgcmVmOiByZWZcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWRnZS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGFuY2hvciBvZiB0aGUgYmFkZ2UuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAqICAgaG9yaXpvbnRhbDogJ3JpZ2h0JyxcbiAgICogfVxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ3RvcCddKS5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCByZW5kZXJlZCB3aXRoaW4gdGhlIGJhZGdlLlxuICAgKi9cbiAgYmFkZ2VDb250ZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGJhZGdlIHdpbGwgYmUgYWRkZWQgcmVsYXRpdmUgdG8gdGhpcyBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jYWRkaW5nLW5ldy1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAnZGVmYXVsdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWRnZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgQmFkZ2U6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWRnZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWRnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWRnZSBpcyBpbnZpc2libGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNYXggY291bnQgdG8gc2hvdy5cbiAgICogQGRlZmF1bHQgOTlcbiAgICovXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogV3JhcHBlZCBzaGFwZSB0aGUgYmFkZ2Ugc2hvdWxkIG92ZXJsYXAuXG4gICAqIEBkZWZhdWx0ICdyZWN0YW5ndWxhcidcbiAgICovXG4gIG92ZXJsYXA6IFByb3BUeXBlcy5vbmVPZihbJ2NpcmN1bGFyJywgJ3JlY3Rhbmd1bGFyJ10pLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGV0aGVyIHRoZSBiYWRnZSBpcyBoaWRkZW4gd2hlbiBgYmFkZ2VDb250ZW50YCBpcyB6ZXJvLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2hvd1plcm86IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3N0YW5kYXJkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZG90JywgJ3N0YW5kYXJkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCYWRnZTsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm90dG9tTmF2aWdhdGlvbkFjdGlvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQm90dG9tTmF2aWdhdGlvbkFjdGlvbicsIHNsb3QpO1xufVxuY29uc3QgYm90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCb3R0b21OYXZpZ2F0aW9uQWN0aW9uJywgWydyb290JywgJ2ljb25Pbmx5JywgJ3NlbGVjdGVkJywgJ2xhYmVsJ10pO1xuZXhwb3J0IGRlZmF1bHQgYm90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImljb25cIiwgXCJsYWJlbFwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcInNlbGVjdGVkXCIsIFwic2hvd0xhYmVsXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJy4uL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcCc7XG5pbXBvcnQgYm90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMsIHsgZ2V0Qm90dG9tTmF2aWdhdGlvbkFjdGlvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYm90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgc2hvd0xhYmVsLFxuICAgIHNlbGVjdGVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhc2hvd0xhYmVsICYmICFzZWxlY3RlZCAmJiAnaWNvbk9ubHknLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnXSxcbiAgICBsYWJlbDogWydsYWJlbCcsICFzaG93TGFiZWwgJiYgIXNlbGVjdGVkICYmICdpY29uT25seScsIHNlbGVjdGVkICYmICdzZWxlY3RlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Qm90dG9tTmF2aWdhdGlvbkFjdGlvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIG5hbWU6ICdNdWlCb3R0b21OYXZpZ2F0aW9uQWN0aW9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsICFvd25lclN0YXRlLnNob3dMYWJlbCAmJiAhb3duZXJTdGF0ZS5zZWxlY3RlZCAmJiBzdHlsZXMuaWNvbk9ubHldO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICdwYWRkaW5nLXRvcCddLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gIH0pLFxuICBwYWRkaW5nOiAnMHB4IDEycHgnLFxuICBtaW5XaWR0aDogODAsXG4gIG1heFdpZHRoOiAxNjgsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGZsZXg6ICcxJ1xufSwgIW93bmVyU3RhdGUuc2hvd0xhYmVsICYmICFvd25lclN0YXRlLnNlbGVjdGVkICYmIHtcbiAgcGFkZGluZ1RvcDogMTRcbn0sICFvd25lclN0YXRlLnNob3dMYWJlbCAmJiAhb3duZXJTdGF0ZS5zZWxlY3RlZCAmJiAhb3duZXJTdGF0ZS5sYWJlbCAmJiB7XG4gIHBhZGRpbmdUb3A6IDBcbn0sIHtcbiAgW2AmLiR7Ym90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gIH1cbn0pKTtcbmNvbnN0IEJvdHRvbU5hdmlnYXRpb25BY3Rpb25MYWJlbCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUJvdHRvbU5hdmlnYXRpb25BY3Rpb24nLFxuICBzbG90OiAnTGFiZWwnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5sYWJlbFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgb3BhY2l0eTogMSxcbiAgdHJhbnNpdGlvbjogJ2ZvbnQtc2l6ZSAwLjJzLCBvcGFjaXR5IDAuMnMnLFxuICB0cmFuc2l0aW9uRGVsYXk6ICcwLjFzJ1xufSwgIW93bmVyU3RhdGUuc2hvd0xhYmVsICYmICFvd25lclN0YXRlLnNlbGVjdGVkICYmIHtcbiAgb3BhY2l0eTogMCxcbiAgdHJhbnNpdGlvbkRlbGF5OiAnMHMnXG59LCB7XG4gIFtgJi4ke2JvdHRvbU5hdmlnYXRpb25BY3Rpb25DbGFzc2VzLnNlbGVjdGVkfWBdOiB7XG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNClcbiAgfVxufSkpO1xuY29uc3QgQm90dG9tTmF2aWdhdGlvbkFjdGlvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJvdHRvbU5hdmlnYXRpb25BY3Rpb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUJvdHRvbU5hdmlnYXRpb25BY3Rpb24nXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgaWNvbixcbiAgICBsYWJlbCxcbiAgICBvbkNoYW5nZSxcbiAgICBvbkNsaWNrLFxuICAgIHZhbHVlXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhCb3R0b21OYXZpZ2F0aW9uQWN0aW9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZm9jdXNSaXBwbGU6IHRydWUsXG4gICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2ljb24sIC8qI19fUFVSRV9fKi9fanN4KEJvdHRvbU5hdmlnYXRpb25BY3Rpb25MYWJlbCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBsYWJlbFxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJvdHRvbU5hdmlnYXRpb25BY3Rpb24ucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBpc24ndCBzdXBwb3J0ZWQuXG4gICAqIFVzZSB0aGUgYGNvbXBvbmVudGAgcHJvcCBpZiB5b3UgbmVlZCB0byBjaGFuZ2UgdGhlIGNoaWxkcmVuIHN0cnVjdHVyZS5cbiAgICovXG4gIGNoaWxkcmVuOiB1bnN1cHBvcnRlZFByb3AsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYEJvdHRvbU5hdmlnYXRpb25BY3Rpb25gIHdpbGwgc2hvdyBpdHMgbGFiZWwuXG4gICAqIEJ5IGRlZmF1bHQsIG9ubHkgdGhlIHNlbGVjdGVkIGBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uYFxuICAgKiBpbnNpZGUgYEJvdHRvbU5hdmlnYXRpb25gIHdpbGwgc2hvdyBpdHMgbGFiZWwuXG4gICAqXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBCb3R0b21OYXZpZ2F0aW9uIGNvbXBvbmVudC5cbiAgICovXG4gIHNob3dMYWJlbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogWW91IGNhbiBwcm92aWRlIHlvdXIgb3duIHZhbHVlLiBPdGhlcndpc2UsIHdlIGZhbGxiYWNrIHRvIHRoZSBjaGlsZCBwb3NpdGlvbiBpbmRleC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQm90dG9tTmF2aWdhdGlvbkFjdGlvbjsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm90dG9tTmF2aWdhdGlvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQm90dG9tTmF2aWdhdGlvbicsIHNsb3QpO1xufVxuY29uc3QgYm90dG9tTmF2aWdhdGlvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCb3R0b21OYXZpZ2F0aW9uJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgYm90dG9tTmF2aWdhdGlvbkNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwib25DaGFuZ2VcIiwgXCJzaG93TGFiZWxzXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGdldEJvdHRvbU5hdmlnYXRpb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2JvdHRvbU5hdmlnYXRpb25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJvdHRvbU5hdmlnYXRpb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgQm90dG9tTmF2aWdhdGlvblJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUJvdHRvbU5hdmlnYXRpb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgaGVpZ2h0OiA1NixcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyXG59KSk7XG5jb25zdCBCb3R0b21OYXZpZ2F0aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm90dG9tTmF2aWdhdGlvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQm90dG9tTmF2aWdhdGlvbidcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICBvbkNoYW5nZSxcbiAgICBzaG93TGFiZWxzID0gZmFsc2UsXG4gICAgdmFsdWVcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgc2hvd0xhYmVsc1xuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChCb3R0b21OYXZpZ2F0aW9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBjaGlsZEluZGV4KSA9PiB7XG4gICAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIEJvdHRvbU5hdmlnYXRpb24gY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjaGlsZFZhbHVlID0gY2hpbGQucHJvcHMudmFsdWUgPT09IHVuZGVmaW5lZCA/IGNoaWxkSW5kZXggOiBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIHNlbGVjdGVkOiBjaGlsZFZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgc2hvd0xhYmVsOiBjaGlsZC5wcm9wcy5zaG93TGFiZWwgIT09IHVuZGVmaW5lZCA/IGNoaWxkLnByb3BzLnNob3dMYWJlbCA6IHNob3dMYWJlbHMsXG4gICAgICAgIHZhbHVlOiBjaGlsZFZhbHVlLFxuICAgICAgICBvbkNoYW5nZVxuICAgICAgfSk7XG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCb3R0b21OYXZpZ2F0aW9uLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay4gKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFdlIGRlZmF1bHQgdG8gdGhlIGluZGV4IG9mIHRoZSBjaGlsZC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhbGwgYEJvdHRvbU5hdmlnYXRpb25BY3Rpb25gcyB3aWxsIHNob3cgdGhlaXIgbGFiZWxzLlxuICAgKiBCeSBkZWZhdWx0LCBvbmx5IHRoZSBzZWxlY3RlZCBgQm90dG9tTmF2aWdhdGlvbkFjdGlvbmAgd2lsbCBzaG93IGl0cyBsYWJlbC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNob3dMYWJlbHM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uYC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQm90dG9tTmF2aWdhdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgZGVmYXVsdFN0eWxlRnVuY3Rpb25TeCwgeyBleHRlbmRTeFByb3AgfSBmcm9tICcuL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm94KG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdFRoZW1lLFxuICAgIGRlZmF1bHRDbGFzc05hbWUgPSAnTXVpQm94LXJvb3QnLFxuICAgIGdlbmVyYXRlQ2xhc3NOYW1lLFxuICAgIHN0eWxlRnVuY3Rpb25TeCA9IGRlZmF1bHRTdHlsZUZ1bmN0aW9uU3hcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IEJveFJvb3QgPSBzdHlsZWQoJ2RpdicpKHN0eWxlRnVuY3Rpb25TeCk7XG4gIGNvbnN0IEJveCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJveChpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG5cbiAgICBjb25zdCBfZXh0ZW5kU3hQcm9wID0gZXh0ZW5kU3hQcm9wKGluUHJvcHMpLFxuICAgICAgICAgIHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnXG4gICAgfSA9IF9leHRlbmRTeFByb3AsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfZXh0ZW5kU3hQcm9wLCBfZXhjbHVkZWQpO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEJveFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc05hbWUsIGdlbmVyYXRlQ2xhc3NOYW1lID8gZ2VuZXJhdGVDbGFzc05hbWUoZGVmYXVsdENsYXNzTmFtZSkgOiBkZWZhdWx0Q2xhc3NOYW1lKSxcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH0sIG90aGVyKSk7XG4gIH0pO1xuICByZXR1cm4gQm94O1xufSIsImltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnLi4vc3R5bGVzJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5jb25zdCBCb3ggPSBjcmVhdGVCb3goe1xuICBkZWZhdWx0VGhlbWUsXG4gIGRlZmF1bHRDbGFzc05hbWU6ICdNdWlCb3gtcm9vdCcsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGVcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQm94LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCb3g7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0gKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgaGFzTmV4dCA9IChrZXkgaW4gbmV4dENoaWxkTWFwcGluZyk7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAqXG4gKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAqXG4gKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAqIGl0ZW1zLlxuICovXG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBub2RlIGlzIGB1bmRlZmluZWRgIHdoZW4gdXNlciBwcm92aWRlZCBgbm9kZVJlZmAgcHJvcFxuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNlbnRlclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl07XG5cbmxldCBfID0gdCA9PiB0LFxuICAgIF90LFxuICAgIF90MixcbiAgICBfdDMsXG4gICAgX3Q0O1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbmltcG9ydCB0b3VjaFJpcHBsZUNsYXNzZXMgZnJvbSAnLi90b3VjaFJpcHBsZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IGNvbnN0IERFTEFZX1JJUFBMRSA9IDgwO1xuY29uc3QgZW50ZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICBvcGFjaXR5OiAwLjE7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIG9wYWNpdHk6IDAuMztcbiAgfVxuYCkpO1xuY29uc3QgZXhpdEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5gKSk7XG5jb25zdCBwdWxzYXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuXG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmApKTtcbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSb290J1xufSkoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHpJbmRleDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xufSk7IC8vIFRoaXMgYHN0eWxlZCgpYCBmdW5jdGlvbiBpbnZva2VzIGtleWZyYW1lcy4gYHN0eWxlZC1jb21wb25lbnRzYCBvbmx5IHN1cHBvcnRzIGtleWZyYW1lc1xuLy8gaW4gc3RyaW5nIHRlbXBsYXRlcy4gRG8gbm90IGNvbnZlcnQgdGhlc2Ugc3R5bGVzIGluIEpTIG9iamVjdCBhcyBpdCB3aWxsIGJyZWFrLlxuXG5leHBvcnQgY29uc3QgVG91Y2hSaXBwbGVSaXBwbGUgPSBzdHlsZWQoUmlwcGxlLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSaXBwbGUnXG59KShfdDQgfHwgKF90NCA9IF9gXG4gIG9wYWNpdHk6IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblxuICAmLiR7MH0ge1xuICAgIG9wYWNpdHk6IDAuMztcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gIH1cblxuICAmLiR7MH0ge1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAvKiBAbm9mbGlwICovXG4gICAgbGVmdDogMHB4O1xuICAgIHRvcDogMDtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDI1MDBtcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICAgIGFuaW1hdGlvbi1kZWxheTogMjAwbXM7XG4gIH1cbmApLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSwgZW50ZXJLZXlmcmFtZSwgRFVSQVRJT04sICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZywgZXhpdEtleWZyYW1lLCBEVVJBVElPTiwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZFB1bHNhdGUsIHB1bHNhdGVLZXlmcmFtZSwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5cbmNvbnN0IFRvdWNoUmlwcGxlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG91Y2hSaXBwbGUoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRvdWNoUmlwcGxlJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2VudGVyOiBjZW50ZXJQcm9wID0gZmFsc2UsXG4gICAgY2xhc3NlcyA9IHt9LFxuICAgIGNsYXNzTmFtZVxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgW3JpcHBsZXMsIHNldFJpcHBsZXNdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuICBjb25zdCBuZXh0S2V5ID0gUmVhY3QudXNlUmVmKDApO1xuICBjb25zdCByaXBwbGVDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmlwcGxlQ2FsbGJhY2suY3VycmVudCkge1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbcmlwcGxlc10pOyAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cblxuICBjb25zdCBpZ25vcmluZ01vdXNlRG93biA9IFJlYWN0LnVzZVJlZihmYWxzZSk7IC8vIFdlIHVzZSBhIHRpbWVyIGluIG9yZGVyIHRvIG9ubHkgc2hvdyB0aGUgcmlwcGxlcyBmb3IgdG91Y2ggXCJjbGlja1wiIGxpa2UgZXZlbnRzLlxuICAvLyBXZSBkb24ndCB3YW50IHRvIGRpc3BsYXkgdGhlIHJpcHBsZSBmb3IgdG91Y2ggc2Nyb2xsIGV2ZW50cy5cblxuICBjb25zdCBzdGFydFRpbWVyID0gUmVhY3QudXNlUmVmKG51bGwpOyAvLyBUaGlzIGlzIHRoZSBob29rIGNhbGxlZCBvbmNlIHRoZSBwcmV2aW91cyB0aW1lb3V0IGlzIHJlYWR5LlxuXG4gIGNvbnN0IHN0YXJ0VGltZXJDb21taXQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGNvbnRhaW5lciA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICBjb25zdCBzdGFydENvbW1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKHBhcmFtcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVgsXG4gICAgICByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgIGNiXG4gICAgfSA9IHBhcmFtcztcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4gWy4uLm9sZFJpcHBsZXMsIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUmlwcGxlLCB7XG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIHJpcHBsZTogY2xzeChjbGFzc2VzLnJpcHBsZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZSksXG4gICAgICAgIHJpcHBsZVZpc2libGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSksXG4gICAgICAgIHJpcHBsZVB1bHNhdGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSksXG4gICAgICAgIGNoaWxkOiBjbHN4KGNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCksXG4gICAgICAgIGNoaWxkTGVhdmluZzogY2xzeChjbGFzc2VzLmNoaWxkTGVhdmluZywgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZyksXG4gICAgICAgIGNoaWxkUHVsc2F0ZTogY2xzeChjbGFzc2VzLmNoaWxkUHVsc2F0ZSwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSlcbiAgICAgIH0sXG4gICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICB9LCBuZXh0S2V5LmN1cnJlbnQpXSk7XG4gICAgbmV4dEtleS5jdXJyZW50ICs9IDE7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbY2xhc3Nlc10pO1xuICBjb25zdCBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCA9IHt9LCBvcHRpb25zID0ge30sIGNiKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgICAgY2VudGVyID0gY2VudGVyUHJvcCB8fCBvcHRpb25zLnB1bHNhdGUsXG4gICAgICBmYWtlRWxlbWVudCA9IGZhbHNlIC8vIEZvciB0ZXN0IHB1cnBvc2VzXG5cbiAgICB9ID0gb3B0aW9ucztcblxuICAgIGlmICgoZXZlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IGV2ZW50LnR5cGUpID09PSAnbW91c2Vkb3duJyAmJiBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50KSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKChldmVudCA9PSBudWxsID8gdm9pZCAwIDogZXZlbnQudHlwZSkgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07IC8vIEdldCB0aGUgc2l6ZSBvZiB0aGUgcmlwcGxlXG5cbiAgICBsZXQgcmlwcGxlWDtcbiAgICBsZXQgcmlwcGxlWTtcbiAgICBsZXQgcmlwcGxlU2l6ZTtcblxuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAwID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50O1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cblxuICAgIGlmIChjZW50ZXIpIHtcbiAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoKDIgKiByZWN0LndpZHRoICoqIDIgKyByZWN0LmhlaWdodCAqKiAyKSAvIDMpOyAvLyBGb3Igc29tZSByZWFzb24gdGhlIGFuaW1hdGlvbiBpcyBicm9rZW4gb24gTW9iaWxlIENocm9tZSBpZiB0aGUgc2l6ZSBpcyBldmVuLlxuXG4gICAgICBpZiAocmlwcGxlU2l6ZSAlIDIgPT09IDApIHtcbiAgICAgICAgcmlwcGxlU2l6ZSArPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzaXplWCA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRXaWR0aCA6IDApIC0gcmlwcGxlWCksIHJpcHBsZVgpICogMiArIDI7XG4gICAgICBjb25zdCBzaXplWSA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRIZWlnaHQgOiAwKSAtIHJpcHBsZVkpLCByaXBwbGVZKSAqIDIgKyAyO1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydChzaXplWCAqKiAyICsgc2l6ZVkgKiogMik7XG4gICAgfSAvLyBUb3VjaGUgZGV2aWNlc1xuXG5cbiAgICBpZiAoZXZlbnQgIT0gbnVsbCAmJiBldmVudC50b3VjaGVzKSB7XG4gICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXNuJ3QgYW5vdGhlciB0b3VjaHN0YXJ0IGR1ZSB0byBtdWx0aXRvdWNoXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCBvbmx5IGNsZWFyIGEgc2luZ2xlIHRpbWVyIHdoZW4gdW5tb3VudGluZyB3aGlsZSB0d29cbiAgICAgIC8vIGFyZSBydW5uaW5nXG4gICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9ICgpID0+IHtcbiAgICAgICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYLFxuICAgICAgICByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICBjYlxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY2VudGVyUHJvcCwgc3RhcnRDb21taXRdKTtcbiAgY29uc3QgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgY29uc3Qgc3RvcCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCwgY2IpID0+IHtcbiAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cblxuICAgIGlmICgoZXZlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IGV2ZW50LnR5cGUpID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgc2V0UmlwcGxlcyhvbGRSaXBwbGVzID0+IHtcbiAgICAgIGlmIChvbGRSaXBwbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFJpcHBsZXMuc2xpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICBwdWxzYXRlLFxuICAgIHN0YXJ0LFxuICAgIHN0b3BcbiAgfSksIFtwdWxzYXRlLCBzdGFydCwgc3RvcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVG91Y2hSaXBwbGVSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KHRvdWNoUmlwcGxlQ2xhc3Nlcy5yb290LCBjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiBjb250YWluZXJcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICBleGl0OiB0cnVlLFxuICAgICAgY2hpbGRyZW46IHJpcHBsZXNcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG91Y2hSaXBwbGU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuXG4gIGlmICghaW5Qcm9wICYmICFsZWF2aW5nKSB7XG4gICAgc2V0TGVhdmluZyh0cnVlKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3AgJiYgb25FeGl0ZWQgIT0gbnVsbCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dChvbkV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b25CYXNlJywgc2xvdCk7XG59XG5jb25zdCBidXR0b25CYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbkJhc2UnLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQmFzZUNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJMaW5rQ29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uQ29udGV4dE1lbnVcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInRvdWNoUmlwcGxlUmVmXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHVzZUlzRm9jdXNWaXNpYmxlIGZyb20gJy4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlJztcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tICcuL1RvdWNoUmlwcGxlJztcbmltcG9ydCBidXR0b25CYXNlQ2xhc3NlcywgeyBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9idXR0b25CYXNlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgZGlzYWJsZWQsXG4gICAgZm9jdXNWaXNpYmxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBmb2N1c1Zpc2libGUgJiYgJ2ZvY3VzVmlzaWJsZSddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcblxuICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSkge1xuICAgIGNvbXBvc2VkQ2xhc3Nlcy5yb290ICs9IGAgJHtmb2N1c1Zpc2libGVDbGFzc05hbWV9YDtcbiAgfVxuXG4gIHJldHVybiBjb21wb3NlZENsYXNzZXM7XG59O1xuXG5leHBvcnQgY29uc3QgQnV0dG9uQmFzZVJvb3QgPSBzdHlsZWQoJ2J1dHRvbicsIHtcbiAgbmFtZTogJ011aUJ1dHRvbkJhc2UnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAvLyBSZXNldCBkZWZhdWx0IHZhbHVlXG4gIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gIG91dGxpbmU6IDAsXG4gIGJvcmRlcjogMCxcbiAgbWFyZ2luOiAwLFxuICAvLyBSZW1vdmUgdGhlIG1hcmdpbiBpbiBTYWZhcmlcbiAgYm9yZGVyUmFkaXVzOiAwLFxuICBwYWRkaW5nOiAwLFxuICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gRmlyZWZveFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgTW96QXBwZWFyYW5jZTogJ25vbmUnLFxuICAvLyBSZXNldFxuICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gIC8vIFNvIHdlIHRha2UgcHJlY2VkZW50IG92ZXIgdGhlIHN0eWxlIG9mIGEgbmF0aXZlIDxhIC8+IGVsZW1lbnQuXG4gIGNvbG9yOiAnaW5oZXJpdCcsXG4gICcmOjotbW96LWZvY3VzLWlubmVyJzoge1xuICAgIGJvcmRlclN0eWxlOiAnbm9uZScgLy8gUmVtb3ZlIEZpcmVmb3ggZG90dGVkIG91dGxpbmUuXG5cbiAgfSxcbiAgW2AmLiR7YnV0dG9uQmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH0sXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgfVxufSk7XG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5cbmNvbnN0IEJ1dHRvbkJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b25CYXNlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYWN0aW9uLFxuICAgIGNlbnRlclJpcHBsZSA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQgPSAnYnV0dG9uJyxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGRpc2FibGVSaXBwbGUgPSBmYWxzZSxcbiAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBmYWxzZSxcbiAgICBmb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgIExpbmtDb21wb25lbnQgPSAnYScsXG4gICAgb25CbHVyLFxuICAgIG9uQ2xpY2ssXG4gICAgb25Db250ZXh0TWVudSxcbiAgICBvbkRyYWdMZWF2ZSxcbiAgICBvbkZvY3VzLFxuICAgIG9uRm9jdXNWaXNpYmxlLFxuICAgIG9uS2V5RG93bixcbiAgICBvbktleVVwLFxuICAgIG9uTW91c2VEb3duLFxuICAgIG9uTW91c2VMZWF2ZSxcbiAgICBvbk1vdXNlVXAsXG4gICAgb25Ub3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQsXG4gICAgdGFiSW5kZXggPSAwLFxuICAgIFRvdWNoUmlwcGxlUHJvcHMsXG4gICAgdG91Y2hSaXBwbGVSZWYsXG4gICAgdHlwZVxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgYnV0dG9uUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCByaXBwbGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJpcHBsZVJlZiA9IHVzZUZvcmtSZWYocmlwcGxlUmVmLCB0b3VjaFJpcHBsZVJlZik7XG4gIGNvbnN0IHtcbiAgICBpc0ZvY3VzVmlzaWJsZVJlZixcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1Zpc2libGUsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICByZWY6IGZvY3VzVmlzaWJsZVJlZlxuICB9ID0gdXNlSXNGb2N1c1Zpc2libGUoKTtcbiAgY29uc3QgW2ZvY3VzVmlzaWJsZSwgc2V0Rm9jdXNWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcblxuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNWaXNpYmxlKSB7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiAoe1xuICAgIGZvY3VzVmlzaWJsZTogKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0pLCBbXSk7XG4gIGNvbnN0IFttb3VudGVkU3RhdGUsIHNldE1vdW50ZWRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICB9LCBbXSk7XG4gIGNvbnN0IGVuYWJsZVRvdWNoUmlwcGxlID0gbW91bnRlZFN0YXRlICYmICFkaXNhYmxlUmlwcGxlICYmICFkaXNhYmxlZDtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzUmlwcGxlICYmICFkaXNhYmxlUmlwcGxlICYmIG1vdW50ZWRTdGF0ZSkge1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZSgpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVSaXBwbGUsIGZvY3VzUmlwcGxlLCBmb2N1c1Zpc2libGUsIG1vdW50ZWRTdGF0ZV0pO1xuXG4gIGZ1bmN0aW9uIHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlQWN0aW9uLCBldmVudENhbGxiYWNrLCBza2lwUmlwcGxlQWN0aW9uID0gZGlzYWJsZVRvdWNoUmlwcGxlKSB7XG4gICAgcmV0dXJuIHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50Q2FsbGJhY2spIHtcbiAgICAgICAgZXZlbnRDYWxsYmFjayhldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlnbm9yZSA9IHNraXBSaXBwbGVBY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlICYmIHJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50W3JpcHBsZUFjdGlvbl0oZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICBjb25zdCBoYW5kbGVDb250ZXh0TWVudSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkNvbnRleHRNZW51KTtcbiAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgY29uc3QgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICBjb25zdCBoYW5kbGVNb3VzZUxlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGV2ZW50ID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlVG91Y2hTdGFydCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgY29uc3QgaGFuZGxlVG91Y2hFbmQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaEVuZCk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoTW92ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoTW92ZSk7XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZXZlbnQgPT4ge1xuICAgIGhhbmRsZUJsdXJWaXNpYmxlKGV2ZW50KTtcblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSBmYWxzZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cblxuICAgIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCk7XG5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuXG4gICAgICBpZiAob25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGlzTm9uTmF0aXZlQnV0dG9uID0gKCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGJ1dHRvblJlZi5jdXJyZW50O1xuICAgIHJldHVybiBjb21wb25lbnQgJiYgY29tcG9uZW50ICE9PSAnYnV0dG9uJyAmJiAhKGJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgYnV0dG9uLmhyZWYpO1xuICB9O1xuICAvKipcbiAgICogSUUxMSBzaGltIGZvciBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9yZXBlYXRcbiAgICovXG5cblxuICBjb25zdCBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgKCkgPT4ge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2J1dHRvbi1rZXl1cC1wcmV2ZW50ZGVmYXVsdC1kbjdmMFxuICAgIGlmIChmb2N1c1JpcHBsZSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgKCkgPT4ge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgbGV0IENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIChvdGhlci5ocmVmIHx8IG90aGVyLnRvKSkge1xuICAgIENvbXBvbmVudFByb3AgPSBMaW5rQ29tcG9uZW50O1xuICB9XG5cbiAgY29uc3QgYnV0dG9uUHJvcHMgPSB7fTtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZSA9PT0gdW5kZWZpbmVkID8gJ2J1dHRvbicgOiB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvdGhlci5ocmVmICYmICFvdGhlci50bykge1xuICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgYnV0dG9uUHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IGRpc2FibGVkO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZU93blJlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCBidXR0b25SZWYpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaGFuZGxlT3duUmVmKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoZW5hYmxlVG91Y2hSaXBwbGUgJiYgIXJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZSBgY29tcG9uZW50YCBwcm9wIHByb3ZpZGVkIHRvIEJ1dHRvbkJhc2UgaXMgaW52YWxpZC4nLCAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgY2hpbGRyZW4gcHJvcCBpcyByZW5kZXJlZCBpbiB0aGlzIGN1c3RvbSBjb21wb25lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtlbmFibGVUb3VjaFJpcHBsZV0pO1xuICB9XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNlbnRlclJpcHBsZSxcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZVJpcHBsZSxcbiAgICBkaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgZm9jdXNSaXBwbGUsXG4gICAgdGFiSW5kZXgsXG4gICAgZm9jdXNWaXNpYmxlXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhCdXR0b25CYXNlUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBDb21wb25lbnRQcm9wLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkNvbnRleHRNZW51OiBoYW5kbGVDb250ZXh0TWVudSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsXG4gICAgb25Ub3VjaEVuZDogaGFuZGxlVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmU6IGhhbmRsZVRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQ6IGhhbmRsZVRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleCxcbiAgICB0eXBlOiB0eXBlXG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIGVuYWJsZVRvdWNoUmlwcGxlID9cbiAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAvKiBUb3VjaFJpcHBsZSBpcyBvbmx5IG5lZWRlZCBjbGllbnQtc2lkZSwgeDIgYm9vc3Qgb24gdGhlIHNlcnZlci4gKi9cbiAgICBfanN4KFRvdWNoUmlwcGxlLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGhhbmRsZVJpcHBsZVJlZixcbiAgICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gICAgfSwgVG91Y2hSaXBwbGVQcm9wcykpIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyBhcmUgY2VudGVyZWQuXG4gICAqIFRoZXkgd29uJ3Qgc3RhcnQgYXQgdGhlIGN1cnNvciBpbnRlcmFjdGlvbiBwb3NpdGlvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNlbnRlclJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVRvdWNoUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFzZSBidXR0b24gd2lsbCBoYXZlIGEga2V5Ym9hcmQgZm9jdXMgcmlwcGxlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmFueSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciBhIGxpbmsgd2hlbiB0aGUgYGhyZWZgIHByb3AgaXMgcHJvdmlkZWQuXG4gICAqIEBkZWZhdWx0ICdhJ1xuICAgKi9cbiAgTGlua0NvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Db250ZXh0TWVudTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRHJhZ0xlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgcmVmIHRoYXQgcG9pbnRzIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICB0b3VjaFJpcHBsZVJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1bHNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBzdGFydDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHN0b3A6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KVxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b25CYXNlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJ1dHRvbicsIHNsb3QpO1xufVxuY29uc3QgYnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbicsIFsncm9vdCcsICd0ZXh0JywgJ3RleHRJbmhlcml0JywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAndGV4dFN1Y2Nlc3MnLCAndGV4dEVycm9yJywgJ3RleHRJbmZvJywgJ3RleHRXYXJuaW5nJywgJ291dGxpbmVkJywgJ291dGxpbmVkSW5oZXJpdCcsICdvdXRsaW5lZFByaW1hcnknLCAnb3V0bGluZWRTZWNvbmRhcnknLCAnb3V0bGluZWRTdWNjZXNzJywgJ291dGxpbmVkRXJyb3InLCAnb3V0bGluZWRJbmZvJywgJ291dGxpbmVkV2FybmluZycsICdjb250YWluZWQnLCAnY29udGFpbmVkSW5oZXJpdCcsICdjb250YWluZWRQcmltYXJ5JywgJ2NvbnRhaW5lZFNlY29uZGFyeScsICdjb250YWluZWRTdWNjZXNzJywgJ2NvbnRhaW5lZEVycm9yJywgJ2NvbnRhaW5lZEluZm8nLCAnY29udGFpbmVkV2FybmluZycsICdkaXNhYmxlRWxldmF0aW9uJywgJ2ZvY3VzVmlzaWJsZScsICdkaXNhYmxlZCcsICdjb2xvckluaGVyaXQnLCAndGV4dFNpemVTbWFsbCcsICd0ZXh0U2l6ZU1lZGl1bScsICd0ZXh0U2l6ZUxhcmdlJywgJ291dGxpbmVkU2l6ZVNtYWxsJywgJ291dGxpbmVkU2l6ZU1lZGl1bScsICdvdXRsaW5lZFNpemVMYXJnZScsICdjb250YWluZWRTaXplU21hbGwnLCAnY29udGFpbmVkU2l6ZU1lZGl1bScsICdjb250YWluZWRTaXplTGFyZ2UnLCAnc2l6ZU1lZGl1bScsICdzaXplU21hbGwnLCAnc2l6ZUxhcmdlJywgJ2Z1bGxXaWR0aCcsICdzdGFydEljb24nLCAnZW5kSWNvbicsICdpY29uU2l6ZVNtYWxsJywgJ2ljb25TaXplTWVkaXVtJywgJ2ljb25TaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBidXR0b25DbGFzc2VzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBCdXR0b25Hcm91cENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEJ1dHRvbkdyb3VwQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdCdXR0b25Hcm91cENvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25Hcm91cENvbnRleHQ7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVFbGV2YXRpb25cIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJlbmRJY29uXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiZnVsbFdpZHRoXCIsIFwic2l6ZVwiLCBcInN0YXJ0SWNvblwiLCBcInR5cGVcIiwgXCJ2YXJpYW50XCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcInJvb3RcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBpbnRlcm5hbF9yZXNvbHZlUHJvcHMgYXMgcmVzb2x2ZVByb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGJ1dHRvbkNsYXNzZXMsIHsgZ2V0QnV0dG9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9idXR0b25DbGFzc2VzJztcbmltcG9ydCBCdXR0b25Hcm91cENvbnRleHQgZnJvbSAnLi4vQnV0dG9uR3JvdXAvQnV0dG9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlRWxldmF0aW9uLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgYCR7dmFyaWFudH0ke2NhcGl0YWxpemUoY29sb3IpfWAsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIGAke3ZhcmlhbnR9U2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBjb2xvciA9PT0gJ2luaGVyaXQnICYmICdjb2xvckluaGVyaXQnLCBkaXNhYmxlRWxldmF0aW9uICYmICdkaXNhYmxlRWxldmF0aW9uJywgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnXSxcbiAgICBsYWJlbDogWydsYWJlbCddLFxuICAgIHN0YXJ0SWNvbjogWydzdGFydEljb24nLCBgaWNvblNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF0sXG4gICAgZW5kSWNvbjogWydlbmRJY29uJywgYGljb25TaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRCdXR0b25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuXG5jb25zdCBjb21tb25JY29uU3R5bGVzID0gb3duZXJTdGF0ZSA9PiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgJyYgPiAqOm50aC1vZi10eXBlKDEpJzoge1xuICAgIGZvbnRTaXplOiAxOFxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdtZWRpdW0nICYmIHtcbiAgJyYgPiAqOm50aC1vZi10eXBlKDEpJzoge1xuICAgIGZvbnRTaXplOiAyMFxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYge1xuICAnJiA+ICo6bnRoLW9mLXR5cGUoMSknOiB7XG4gICAgZm9udFNpemU6IDIyXG4gIH1cbn0pO1xuXG5jb25zdCBCdXR0b25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aUJ1dHRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2Ake293bmVyU3RhdGUudmFyaWFudH0ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBzdHlsZXNbYCR7b3duZXJTdGF0ZS52YXJpYW50fVNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHN0eWxlcy5jb2xvckluaGVyaXQsIG93bmVyU3RhdGUuZGlzYWJsZUVsZXZhdGlvbiAmJiBzdHlsZXMuZGlzYWJsZUVsZXZhdGlvbiwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYgc3R5bGVzLmZ1bGxXaWR0aF07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkcGFsZXR0ZSRnZXRDb24sIF90aGVtZSRwYWxldHRlO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5idXR0b24sIHtcbiAgICBtaW5XaWR0aDogNjQsXG4gICAgcGFkZGluZzogJzZweCAxNnB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnYmFja2dyb3VuZC1jb2xvcicsICdib3gtc2hhZG93JywgJ2JvcmRlci1jb2xvcicsICdjb2xvciddLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICB9KSxcbiAgICAnJjpob3Zlcic6IF9leHRlbmRzKHtcbiAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnByaW1hcnlDaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgfVxuICAgIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWlufWAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmdyZXkuQTEwMCxcbiAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbNF0sXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzJdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgfVxuICAgIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFyayxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICAgICAgfVxuICAgIH0pLFxuICAgICcmOmFjdGl2ZSc6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbOF1cbiAgICB9KSxcbiAgICBbYCYuJHtidXR0b25DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1s2XVxuICAgIH0pLFxuICAgIFtgJi4ke2J1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IF9leHRlbmRzKHtcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZH1gXG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgPT09ICdzZWNvbmRhcnknICYmIHtcbiAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZH1gXG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1swXSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgIH0pXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIHtcbiAgICBwYWRkaW5nOiAnNnB4IDhweCdcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgIHBhZGRpbmc6ICc1cHggMTVweCcsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIGN1cnJlbnRDb2xvcidcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICAgYm9yZGVyOiB0aGVtZS52YXJzID8gYDFweCBzb2xpZCByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvIDAuNSlgIDogYDFweCBzb2xpZCAke2FscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC41KX1gXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgIGNvbG9yOiB0aGVtZS52YXJzID8gLy8gdGhpcyBpcyBzYWZlIGJlY2F1c2UgZ3JleSBkb2VzIG5vdCBjaGFuZ2UgYmV0d2VlbiBkZWZhdWx0IGxpZ2h0L2RhcmsgbW9kZVxuICAgIHRoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnByaW1hcnkgOiAoX3RoZW1lJHBhbGV0dGUkZ2V0Q29uID0gKF90aGVtZSRwYWxldHRlID0gdGhlbWUucGFsZXR0ZSkuZ2V0Q29udHJhc3RUZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHBhbGV0dGUkZ2V0Q29uLmNhbGwoX3RoZW1lJHBhbGV0dGUsIHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdKSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzJdXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uY29udHJhc3RUZXh0LFxuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgYm9yZGVyQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICd0ZXh0JyAmJiB7XG4gICAgcGFkZGluZzogJzRweCA1cHgnLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xhcmdlJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICd0ZXh0JyAmJiB7XG4gICAgcGFkZGluZzogJzhweCAxMXB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgICBwYWRkaW5nOiAnM3B4IDlweCcsXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gICAgcGFkZGluZzogJzdweCAyMXB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgcGFkZGluZzogJzRweCAxMHB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgcGFkZGluZzogJzhweCAyMnB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICB9LCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiB7XG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9KTtcbn0sICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUuZGlzYWJsZUVsZXZhdGlvbiAmJiB7XG4gIGJveFNoYWRvdzogJ25vbmUnLFxuICAnJjpob3Zlcic6IHtcbiAgICBib3hTaGFkb3c6ICdub25lJ1xuICB9LFxuICBbYCYuJHtidXR0b25DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJveFNoYWRvdzogJ25vbmUnXG4gIH0sXG4gICcmOmFjdGl2ZSc6IHtcbiAgICBib3hTaGFkb3c6ICdub25lJ1xuICB9LFxuICBbYCYuJHtidXR0b25DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgYm94U2hhZG93OiAnbm9uZSdcbiAgfVxufSk7XG5jb25zdCBCdXR0b25TdGFydEljb24gPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b24nLFxuICBzbG90OiAnU3RhcnRJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5zdGFydEljb24sIHN0eWxlc1tgaWNvblNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2luaGVyaXQnLFxuICBtYXJnaW5SaWdodDogOCxcbiAgbWFyZ2luTGVmdDogLTRcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIG1hcmdpbkxlZnQ6IC0yXG59LCBjb21tb25JY29uU3R5bGVzKG93bmVyU3RhdGUpKSk7XG5jb25zdCBCdXR0b25FbmRJY29uID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQnV0dG9uJyxcbiAgc2xvdDogJ0VuZEljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmVuZEljb24sIHN0eWxlc1tgaWNvblNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2luaGVyaXQnLFxuICBtYXJnaW5SaWdodDogLTQsXG4gIG1hcmdpbkxlZnQ6IDhcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIG1hcmdpblJpZ2h0OiAtMlxufSwgY29tbW9uSWNvblN0eWxlcyhvd25lclN0YXRlKSkpO1xuY29uc3QgQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uKGluUHJvcHMsIHJlZikge1xuICAvLyBwcm9wcyBwcmlvcml0eTogYGluUHJvcHNgID4gYGNvbnRleHRQcm9wc2AgPiBgdGhlbWVEZWZhdWx0UHJvcHNgXG4gIGNvbnN0IGNvbnRleHRQcm9wcyA9IFJlYWN0LnVzZUNvbnRleHQoQnV0dG9uR3JvdXBDb250ZXh0KTtcbiAgY29uc3QgcmVzb2x2ZWRQcm9wcyA9IHJlc29sdmVQcm9wcyhjb250ZXh0UHJvcHMsIGluUHJvcHMpO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiByZXNvbHZlZFByb3BzLFxuICAgIG5hbWU6ICdNdWlCdXR0b24nXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICBjb21wb25lbnQgPSAnYnV0dG9uJyxcbiAgICBjbGFzc05hbWUsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBkaXNhYmxlRWxldmF0aW9uID0gZmFsc2UsXG4gICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gZmFsc2UsXG4gICAgZW5kSWNvbjogZW5kSWNvblByb3AsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICBzdGFydEljb246IHN0YXJ0SWNvblByb3AsXG4gICAgdHlwZSxcbiAgICB2YXJpYW50ID0gJ3RleHQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVFbGV2YXRpb24sXG4gICAgZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBzaXplLFxuICAgIHR5cGUsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBfdXNlVXRpbGl0eUNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKSxcbiAgICAgICAge1xuICAgIHJvb3Q6IGNsYXNzZXNSb290XG4gIH0gPSBfdXNlVXRpbGl0eUNsYXNzZXMsXG4gICAgICAgIGNsYXNzZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdXNlVXRpbGl0eUNsYXNzZXMsIF9leGNsdWRlZDIpO1xuXG4gIGNvbnN0IHN0YXJ0SWNvbiA9IHN0YXJ0SWNvblByb3AgJiYgLyojX19QVVJFX18qL19qc3goQnV0dG9uU3RhcnRJY29uLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN0YXJ0SWNvbixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNoaWxkcmVuOiBzdGFydEljb25Qcm9wXG4gIH0pO1xuXG4gIGNvbnN0IGVuZEljb24gPSBlbmRJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovX2pzeChCdXR0b25FbmRJY29uLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmVuZEljb24sXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogZW5kSWNvblByb3BcbiAgfSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhCdXR0b25Sb290LCBfZXh0ZW5kcyh7XG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY29udGV4dFByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlc1Jvb3QsIGNsYXNzTmFtZSksXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICBjaGlsZHJlbjogW3N0YXJ0SWNvbiwgY2hpbGRyZW4sIGVuZEljb25dXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jYWRkaW5nLW5ldy1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnZXJyb3InLCAnaW5mbycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgbm8gZWxldmF0aW9uIGlzIHVzZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRWxldmF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgLk11aS1mb2N1c1Zpc2libGVgIGNsYXNzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGFmdGVyIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIGVuZEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gbGluayB0byB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICogSWYgZGVmaW5lZCwgYW4gYGFgIGVsZW1lbnQgd2lsbCBiZSB1c2VkIGFzIHRoZSByb290IG5vZGUuXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGJlZm9yZSB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBzdGFydEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NvbnRhaW5lZCcsICdvdXRsaW5lZCcsICd0ZXh0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b247IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBzbG90KTtcbn1cbmNvbnN0IGNpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2lyY3VsYXJQcm9ncmVzcycsIFsncm9vdCcsICdkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdzdmcnLCAnY2lyY2xlJywgJ2NpcmNsZURldGVybWluYXRlJywgJ2NpcmNsZUluZGV0ZXJtaW5hdGUnLCAnY2lyY2xlRGlzYWJsZVNocmluayddKTtcbmV4cG9ydCBkZWZhdWx0IGNpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVTaHJpbmtcIiwgXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ0aGlja25lc3NcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl07XG5cbmxldCBfID0gdCA9PiB0LFxuICAgIF90LFxuICAgIF90MixcbiAgICBfdDMsXG4gICAgX3Q0O1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jaXJjdWxhclByb2dyZXNzQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgU0laRSA9IDQ0O1xuY29uc3QgY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG5gKSk7XG5jb25zdCBjaXJjdWxhckRhc2hLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDIgfHwgKF90MiA9IF9gXG4gIDAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICB9XG5cbiAgNTAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxMDBweCwgMjAwcHg7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xNXB4O1xuICB9XG5cbiAgMTAwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMTAwcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAtMTI1cHg7XG4gIH1cbmApKTtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlU2hyaW5rXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIHN2ZzogWydzdmcnXSxcbiAgICBjaXJjbGU6IFsnY2lyY2xlJywgYGNpcmNsZSR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBkaXNhYmxlU2hyaW5rICYmICdjaXJjbGVEaXNhYmxlU2hyaW5rJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScpXG59LCBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmIGNzcyhfdDMgfHwgKF90MyA9IF9gXG4gICAgICBhbmltYXRpb246ICR7MH0gMS40cyBsaW5lYXIgaW5maW5pdGU7XG4gICAgYCksIGNpcmN1bGFyUm90YXRlS2V5ZnJhbWUpKTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NTVkcgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnU3ZnJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuc3ZnXG59KSh7XG4gIGRpc3BsYXk6ICdibG9jaycgLy8gS2VlcHMgdGhlIHByb2dyZXNzIGNlbnRlcmVkXG5cbn0pO1xuY29uc3QgQ2lyY3VsYXJQcm9ncmVzc0NpcmNsZSA9IHN0eWxlZCgnY2lyY2xlJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdDaXJjbGUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmNpcmNsZSwgc3R5bGVzW2BjaXJjbGUke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5kaXNhYmxlU2hyaW5rICYmIHN0eWxlcy5jaXJjbGVEaXNhYmxlU2hyaW5rXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgc3Ryb2tlOiAnY3VycmVudENvbG9yJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHtcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdzdHJva2UtZGFzaG9mZnNldCcpXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiB7XG4gIC8vIFNvbWUgZGVmYXVsdCB2YWx1ZSB0aGF0IGxvb2tzIGZpbmUgd2FpdGluZyBmb3IgdGhlIGFuaW1hdGlvbiB0byBraWNrcyBpbi5cbiAgc3Ryb2tlRGFzaGFycmF5OiAnODBweCwgMjAwcHgnLFxuICBzdHJva2VEYXNob2Zmc2V0OiAwIC8vIEFkZCB0aGUgdW5pdCB0byBmaXggYSBFZGdlIDE2IGFuZCBiZWxvdyBidWcuXG5cbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiAhb3duZXJTdGF0ZS5kaXNhYmxlU2hyaW5rICYmIGNzcyhfdDQgfHwgKF90NCA9IF9gXG4gICAgICBhbmltYXRpb246ICR7MH0gMS40cyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgICBgKSwgY2lyY3VsYXJEYXNoS2V5ZnJhbWUpKTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG5jb25zdCBDaXJjdWxhclByb2dyZXNzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2lyY3VsYXJQcm9ncmVzcyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcydcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICBkaXNhYmxlU2hyaW5rID0gZmFsc2UsXG4gICAgc2l6ZSA9IDQwLFxuICAgIHN0eWxlLFxuICAgIHRoaWNrbmVzcyA9IDMuNixcbiAgICB2YWx1ZSA9IDAsXG4gICAgdmFyaWFudCA9ICdpbmRldGVybWluYXRlJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVTaHJpbmssXG4gICAgc2l6ZSxcbiAgICB0aGlja25lc3MsXG4gICAgdmFsdWUsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNpcmNsZVN0eWxlID0ge307XG4gIGNvbnN0IHJvb3RTdHlsZSA9IHt9O1xuICBjb25zdCByb290UHJvcHMgPSB7fTtcblxuICBpZiAodmFyaWFudCA9PT0gJ2RldGVybWluYXRlJykge1xuICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSAyICogTWF0aC5QSSAqICgoU0laRSAtIHRoaWNrbmVzcykgLyAyKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBjaXJjdW1mZXJlbmNlLnRvRml4ZWQoMyk7XG4gICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gYCR7KCgxMDAgLSB2YWx1ZSkgLyAxMDAgKiBjaXJjdW1mZXJlbmNlKS50b0ZpeGVkKDMpfXB4YDtcbiAgICByb290U3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgtOTBkZWcpJztcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplXG4gICAgfSwgcm9vdFN0eWxlLCBzdHlsZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzU1ZHLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ZnLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHZpZXdCb3g6IGAke1NJWkUgLyAyfSAke1NJWkUgLyAyfSAke1NJWkV9ICR7U0laRX1gLFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNpcmNsZSxcbiAgICAgICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjeDogU0laRSxcbiAgICAgICAgY3k6IFNJWkUsXG4gICAgICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgICAgIGZpbGw6IFwibm9uZVwiLFxuICAgICAgICBzdHJva2VXaWR0aDogdGhpY2tuZXNzXG4gICAgICB9KVxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2lyY3VsYXJQcm9ncmVzcy5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2FkZGluZy1uZXctY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlU2hyaW5rICYmIHByb3BzLnZhcmlhbnQgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIHRoZSBgZGlzYWJsZVNocmlua2AgcHJvcCAnICsgJ3dpdGggYSB2YXJpYW50IG90aGVyIHRoYW4gYGluZGV0ZXJtaW5hdGVgLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJZiB1c2luZyBhIG51bWJlciwgdGhlIHBpeGVsIHVuaXQgaXMgYXNzdW1lZC5cbiAgICogSWYgdXNpbmcgYSBzdHJpbmcsIHlvdSBuZWVkIHRvIHByb3ZpZGUgdGhlIENTUyB1bml0LCBlLmcgJzNyZW0nLlxuICAgKiBAZGVmYXVsdCA0MFxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBjaXJjbGUuXG4gICAqIEBkZWZhdWx0IDMuNlxuICAgKi9cbiAgdGhpY2tuZXNzOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIHZhcmlhbnQuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKiBAZGVmYXVsdCAnaW5kZXRlcm1pbmF0ZSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaXJjdWxhclByb2dyZXNzOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJY29uQnV0dG9uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJY29uQnV0dG9uJywgc2xvdCk7XG59XG5jb25zdCBpY29uQnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUljb25CdXR0b24nLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnY29sb3JJbmhlcml0JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdlZGdlU3RhcnQnLCAnZWRnZUVuZCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdzaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBpY29uQnV0dG9uQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZWRnZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcInNpemVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBpY29uQnV0dG9uQ2xhc3NlcywgeyBnZXRJY29uQnV0dG9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pY29uQnV0dG9uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlZCxcbiAgICBjb2xvcixcbiAgICBlZGdlLFxuICAgIHNpemVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBlZGdlICYmIGBlZGdlJHtjYXBpdGFsaXplKGVkZ2UpfWAsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBJY29uQnV0dG9uUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIG5hbWU6ICdNdWlJY29uQnV0dG9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLmVkZ2UgJiYgc3R5bGVzW2BlZGdlJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuZWRnZSl9YF0sIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgZmxleDogJzAgMCBhdXRvJyxcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gIHBhZGRpbmc6IDgsXG4gIGJvcmRlclJhZGl1czogJzUwJScsXG4gIG92ZXJmbG93OiAndmlzaWJsZScsXG4gIC8vIEV4cGxpY2l0bHkgc2V0IHRoZSBkZWZhdWx0IHZhbHVlIHRvIHNvbHZlIGEgYnVnIG9uIElFMTEuXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlUmlwcGxlICYmIHtcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZX0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgfVxuICB9XG59LCBvd25lclN0YXRlLmVkZ2UgPT09ICdzdGFydCcgJiYge1xuICBtYXJnaW5MZWZ0OiBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgPyAtMyA6IC0xMlxufSwgb3duZXJTdGF0ZS5lZGdlID09PSAnZW5kJyAmJiB7XG4gIG1hcmdpblJpZ2h0OiBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgPyAtMyA6IC0xMlxufSksICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgY29sb3I6ICdpbmhlcml0J1xufSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBfZXh0ZW5kcyh7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlUmlwcGxlICYmIHtcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfVxufSksIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmc6IDUsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTgpXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYge1xuICBwYWRkaW5nOiAxMixcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyOClcbn0sIHtcbiAgW2AmLiR7aWNvbkJ1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICB9XG59KSk7XG4vKipcbiAqIFJlZmVyIHRvIHRoZSBbSWNvbnNdKC9tYXRlcmlhbC11aS9pY29ucy8pIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb25cbiAqIHJlZ2FyZGluZyB0aGUgYXZhaWxhYmxlIGljb24gb3B0aW9ucy5cbiAqL1xuXG5jb25zdCBJY29uQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSWNvbkJ1dHRvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpSWNvbkJ1dHRvbidcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGVkZ2UgPSBmYWxzZSxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IgPSAnZGVmYXVsdCcsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICBzaXplID0gJ21lZGl1bSdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBlZGdlLFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBzaXplXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEljb25CdXR0b25Sb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBjZW50ZXJSaXBwbGU6IHRydWUsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJY29uQnV0dG9uLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5LlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLCBwcm9wcyA9PiB7XG4gICAgY29uc3QgZm91bmQgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5zb21lKGNoaWxkID0+IC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQucHJvcHMub25DbGljayk7XG5cbiAgICBpZiAoZm91bmQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFlvdSBhcmUgcHJvdmlkaW5nIGFuIG9uQ2xpY2sgZXZlbnQgbGlzdGVuZXIgdG8gYSBjaGlsZCBvZiBhIGJ1dHRvbiBlbGVtZW50LicsICdQcmVmZXIgYXBwbHlpbmcgaXQgdG8gdGhlIEljb25CdXR0b24gZGlyZWN0bHkuJywgJ1RoaXMgZ3VhcmFudGVlcyB0aGF0IHRoZSB3aG9sZSA8YnV0dG9uPiB3aWxsIGJlIHJlc3BvbnNpdmUgdG8gY2xpY2sgZXZlbnRzLiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNhZGRpbmctbmV3LWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdkZWZhdWx0J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnZGVmYXVsdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydlbmQnLCAnc3RhcnQnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEljb25CdXR0b247IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpbmVhclByb2dyZXNzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaW5lYXJQcm9ncmVzcycsIHNsb3QpO1xufVxuY29uc3QgbGluZWFyUHJvZ3Jlc3NDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGluZWFyUHJvZ3Jlc3MnLCBbJ3Jvb3QnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnLCAnYnVmZmVyJywgJ3F1ZXJ5JywgJ2Rhc2hlZCcsICdkYXNoZWRDb2xvclByaW1hcnknLCAnZGFzaGVkQ29sb3JTZWNvbmRhcnknLCAnYmFyJywgJ2JhckNvbG9yUHJpbWFyeScsICdiYXJDb2xvclNlY29uZGFyeScsICdiYXIxSW5kZXRlcm1pbmF0ZScsICdiYXIxRGV0ZXJtaW5hdGUnLCAnYmFyMUJ1ZmZlcicsICdiYXIySW5kZXRlcm1pbmF0ZScsICdiYXIyQnVmZmVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGluZWFyUHJvZ3Jlc3NDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcInZhbHVlXCIsIFwidmFsdWVCdWZmZXJcIiwgXCJ2YXJpYW50XCJdO1xuXG5sZXQgXyA9IHQgPT4gdCxcbiAgICBfdCxcbiAgICBfdDIsXG4gICAgX3QzLFxuICAgIF90NCxcbiAgICBfdDUsXG4gICAgX3Q2O1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBrZXlmcmFtZXMsIGNzcywgZGFya2VuLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRMaW5lYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vbGluZWFyUHJvZ3Jlc3NDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBUUkFOU0lUSU9OX0RVUkFUSU9OID0gNDsgLy8gc2Vjb25kc1xuXG5jb25zdCBpbmRldGVybWluYXRlMUtleWZyYW1lID0ga2V5ZnJhbWVzKF90IHx8IChfdCA9IF9gXG4gIDAlIHtcbiAgICBsZWZ0OiAtMzUlO1xuICAgIHJpZ2h0OiAxMDAlO1xuICB9XG5cbiAgNjAlIHtcbiAgICBsZWZ0OiAxMDAlO1xuICAgIHJpZ2h0OiAtOTAlO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgbGVmdDogMTAwJTtcbiAgICByaWdodDogLTkwJTtcbiAgfVxuYCkpO1xuY29uc3QgaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDIgfHwgKF90MiA9IF9gXG4gIDAlIHtcbiAgICBsZWZ0OiAtMjAwJTtcbiAgICByaWdodDogMTAwJTtcbiAgfVxuXG4gIDYwJSB7XG4gICAgbGVmdDogMTA3JTtcbiAgICByaWdodDogLTglO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgbGVmdDogMTA3JTtcbiAgICByaWdodDogLTglO1xuICB9XG5gKSk7XG5jb25zdCBidWZmZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDMgfHwgKF90MyA9IF9gXG4gIDAlIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgLTIzcHg7XG4gIH1cblxuICA2MCUge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAtMjNweDtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IC0yM3B4O1xuICB9XG5gKSk7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHZhcmlhbnQsXG4gICAgY29sb3JcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgdmFyaWFudF0sXG4gICAgZGFzaGVkOiBbJ2Rhc2hlZCcsIGBkYXNoZWRDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgYmFyMTogWydiYXInLCBgYmFyQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsICh2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgJ2JhcjFJbmRldGVybWluYXRlJywgdmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiAnYmFyMURldGVybWluYXRlJywgdmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgJ2JhcjFCdWZmZXInXSxcbiAgICBiYXIyOiBbJ2JhcicsIHZhcmlhbnQgIT09ICdidWZmZXInICYmIGBiYXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgdmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCAodmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdxdWVyeScpICYmICdiYXIySW5kZXRlcm1pbmF0ZScsIHZhcmlhbnQgPT09ICdidWZmZXInICYmICdiYXIyQnVmZmVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaW5lYXJQcm9ncmVzc1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBnZXRDb2xvclNoYWRlID0gKHRoZW1lLCBjb2xvcikgPT4ge1xuICBpZiAoY29sb3IgPT09ICdpbmhlcml0Jykge1xuICAgIHJldHVybiAnY3VycmVudENvbG9yJztcbiAgfVxuXG4gIGlmICh0aGVtZS52YXJzKSB7XG4gICAgcmV0dXJuIHRoZW1lLnZhcnMucGFsZXR0ZS5MaW5lYXJQcm9ncmVzc1tgJHtjb2xvcn1CZ2BdO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IGxpZ2h0ZW4odGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC42MikgOiBkYXJrZW4odGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC41KTtcbn07XG5cbmNvbnN0IExpbmVhclByb2dyZXNzUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgaGVpZ2h0OiA0LFxuICB6SW5kZXg6IDAsXG4gIC8vIEZpeCBTYWZhcmkncyBidWcgZHVyaW5nIGNvbXBvc2l0aW9uIG9mIGRpZmZlcmVudCBwYWludC5cbiAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICB9LFxuICBiYWNrZ3JvdW5kQ29sb3I6IGdldENvbG9yU2hhZGUodGhlbWUsIG93bmVyU3RhdGUuY29sb3IpXG59LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ25vbmUnLFxuICAnJjo6YmVmb3JlJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAwLFxuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICBvcGFjaXR5OiAwLjNcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknICYmIHtcbiAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG59KSk7XG5jb25zdCBMaW5lYXJQcm9ncmVzc0Rhc2hlZCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ0Rhc2hlZCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuZGFzaGVkLCBzdHlsZXNbYGRhc2hlZENvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IHtcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gZ2V0Q29sb3JTaGFkZSh0aGVtZSwgb3duZXJTdGF0ZS5jb2xvcik7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgICBvcGFjaXR5OiAwLjNcbiAgfSwge1xuICAgIGJhY2tncm91bmRJbWFnZTogYHJhZGlhbC1ncmFkaWVudCgke2JhY2tncm91bmRDb2xvcn0gMCUsICR7YmFja2dyb3VuZENvbG9yfSAxNiUsIHRyYW5zcGFyZW50IDQyJSlgLFxuICAgIGJhY2tncm91bmRTaXplOiAnMTBweCAxMHB4JyxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICcwIC0yM3B4J1xuICB9KTtcbn0sIGNzcyhfdDQgfHwgKF90NCA9IF9gXG4gICAgYW5pbWF0aW9uOiAkezB9IDNzIGluZmluaXRlIGxpbmVhcjtcbiAgYCksIGJ1ZmZlcktleWZyYW1lKSk7XG5jb25zdCBMaW5lYXJQcm9ncmVzc0JhcjEgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdCYXIxJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5iYXIsIHN0eWxlc1tgYmFyQ29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIHN0eWxlcy5iYXIxSW5kZXRlcm1pbmF0ZSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHN0eWxlcy5iYXIxRGV0ZXJtaW5hdGUsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgc3R5bGVzLmJhcjFCdWZmZXJdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICB3aWR0aDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMC4ycyBsaW5lYXInLFxuICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0JyxcbiAgYmFja2dyb3VuZENvbG9yOiBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgPyAnY3VycmVudENvbG9yJyA6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiB7XG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gLiR7VFJBTlNJVElPTl9EVVJBVElPTn1zIGxpbmVhcmBcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYge1xuICB6SW5kZXg6IDEsXG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gLiR7VFJBTlNJVElPTl9EVVJBVElPTn1zIGxpbmVhcmBcbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiAob3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknKSAmJiBjc3MoX3Q1IHx8IChfdDUgPSBfYFxuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBhbmltYXRpb246ICR7MH0gMi4xcyBjdWJpYy1iZXppZXIoMC42NSwgMC44MTUsIDAuNzM1LCAwLjM5NSkgaW5maW5pdGU7XG4gICAgYCksIGluZGV0ZXJtaW5hdGUxS2V5ZnJhbWUpKTtcbmNvbnN0IExpbmVhclByb2dyZXNzQmFyMiA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ0JhcjInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmJhciwgc3R5bGVzW2BiYXJDb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgc3R5bGVzLmJhcjJJbmRldGVybWluYXRlLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHN0eWxlcy5iYXIyQnVmZmVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgdG9wOiAwLFxuICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDAuMnMgbGluZWFyJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCdcbn0sIG93bmVyU3RhdGUudmFyaWFudCAhPT0gJ2J1ZmZlcicgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6IG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyA/ICdjdXJyZW50Q29sb3InIDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgb3BhY2l0eTogMC4zXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiBnZXRDb2xvclNoYWRlKHRoZW1lLCBvd25lclN0YXRlLmNvbG9yKSxcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAuJHtUUkFOU0lUSU9OX0RVUkFUSU9OfXMgbGluZWFyYFxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIGNzcyhfdDYgfHwgKF90NiA9IF9gXG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGFuaW1hdGlvbjogJHswfSAyLjFzIGN1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSkgMS4xNXMgaW5maW5pdGU7XG4gICAgYCksIGluZGV0ZXJtaW5hdGUyS2V5ZnJhbWUpKTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG5jb25zdCBMaW5lYXJQcm9ncmVzcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmVhclByb2dyZXNzKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcydcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICB2YWx1ZSxcbiAgICB2YWx1ZUJ1ZmZlcixcbiAgICB2YXJpYW50ID0gJ2luZGV0ZXJtaW5hdGUnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgcm9vdFByb3BzID0ge307XG4gIGNvbnN0IGlubGluZVN0eWxlcyA9IHtcbiAgICBiYXIxOiB7fSxcbiAgICBiYXIyOiB7fVxuICB9O1xuXG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdidWZmZXInKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW5vdyddID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVtaW4nXSA9IDA7XG4gICAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVtYXgnXSA9IDEwMDtcbiAgICAgIGxldCB0cmFuc2Zvcm0gPSB2YWx1ZSAtIDEwMDtcblxuICAgICAgaWYgKHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgdHJhbnNmb3JtID0gLXRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaW5saW5lU3R5bGVzLmJhcjEudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0cmFuc2Zvcm19JSlgO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgdmFsdWUgcHJvcCAnICsgJ3doZW4gdXNpbmcgdGhlIGRldGVybWluYXRlIG9yIGJ1ZmZlciB2YXJpYW50IG9mIExpbmVhclByb2dyZXNzIC4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAodmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWVCdWZmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHRyYW5zZm9ybSA9ICh2YWx1ZUJ1ZmZlciB8fCAwKSAtIDEwMDtcblxuICAgICAgaWYgKHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgdHJhbnNmb3JtID0gLXRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaW5saW5lU3R5bGVzLmJhcjIudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0cmFuc2Zvcm19JSlgO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgdmFsdWVCdWZmZXIgcHJvcCAnICsgJ3doZW4gdXNpbmcgdGhlIGJ1ZmZlciB2YXJpYW50IG9mIExpbmVhclByb2dyZXNzLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoTGluZWFyUHJvZ3Jlc3NSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJvbGU6IFwicHJvZ3Jlc3NiYXJcIlxuICB9LCByb290UHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbdmFyaWFudCA9PT0gJ2J1ZmZlcicgPyAvKiNfX1BVUkVfXyovX2pzeChMaW5lYXJQcm9ncmVzc0Rhc2hlZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmRhc2hlZCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KSA6IG51bGwsIC8qI19fUFVSRV9fKi9fanN4KExpbmVhclByb2dyZXNzQmFyMSwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmJhcjEsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgc3R5bGU6IGlubGluZVN0eWxlcy5iYXIxXG4gICAgfSksIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgPyBudWxsIDogLyojX19QVVJFX18qL19qc3goTGluZWFyUHJvZ3Jlc3NCYXIyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYmFyMixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBzdHlsZTogaW5saW5lU3R5bGVzLmJhcjJcbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaW5lYXJQcm9ncmVzcy5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2FkZGluZy1uZXctY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgYW5kIGJ1ZmZlciB2YXJpYW50cy5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhbHVlIGZvciB0aGUgYnVmZmVyIHZhcmlhbnQuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWVCdWZmZXI6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogVXNlIGluZGV0ZXJtaW5hdGUgb3IgcXVlcnkgd2hlbiB0aGVyZSBpcyBubyBwcm9ncmVzcyB2YWx1ZS5cbiAgICogQGRlZmF1bHQgJ2luZGV0ZXJtaW5hdGUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydidWZmZXInLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdxdWVyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpbmVhclByb2dyZXNzOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbUF2YXRhclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1BdmF0YXInLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtQXZhdGFyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtQXZhdGFyJywgWydyb290JywgJ2FsaWduSXRlbXNGbGV4U3RhcnQnXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbUF2YXRhckNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRMaXN0SXRlbUF2YXRhclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vbGlzdEl0ZW1BdmF0YXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbkl0ZW1zLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiAnYWxpZ25JdGVtc0ZsZXhTdGFydCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1BdmF0YXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgTGlzdEl0ZW1BdmF0YXJSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbUF2YXRhcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiBzdHlsZXMuYWxpZ25JdGVtc0ZsZXhTdGFydF07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgbWluV2lkdGg6IDU2LFxuICBmbGV4U2hyaW5rOiAwXG59LCBvd25lclN0YXRlLmFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiB7XG4gIG1hcmdpblRvcDogOFxufSkpO1xuLyoqXG4gKiBBIHNpbXBsZSB3cmFwcGVyIHRvIGFwcGx5IGBMaXN0YCBzdHlsZXMgdG8gYW4gYEF2YXRhcmAuXG4gKi9cblxuY29uc3QgTGlzdEl0ZW1BdmF0YXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbUF2YXRhcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdEl0ZW1BdmF0YXInXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWVcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ25JdGVtczogY29udGV4dC5hbGlnbkl0ZW1zXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RJdGVtQXZhdGFyUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbUF2YXRhci5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYW4gYEF2YXRhcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdEl0ZW1BdmF0YXI7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpc3RJdGVtVGV4dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1UZXh0Jywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbVRleHRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGlzdEl0ZW1UZXh0JywgWydyb290JywgJ211bHRpbGluZScsICdkZW5zZScsICdpbnNldCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RJdGVtVGV4dENsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJpbnNldFwiLCBcInByaW1hcnlcIiwgXCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzXCIsIFwic2Vjb25kYXJ5XCIsIFwic2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGxpc3RJdGVtVGV4dENsYXNzZXMsIHsgZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbVRleHRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGluc2V0LFxuICAgIHByaW1hcnksXG4gICAgc2Vjb25kYXJ5LFxuICAgIGRlbnNlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpbnNldCAmJiAnaW5zZXQnLCBkZW5zZSAmJiAnZGVuc2UnLCBwcmltYXJ5ICYmIHNlY29uZGFyeSAmJiAnbXVsdGlsaW5lJ10sXG4gICAgcHJpbWFyeTogWydwcmltYXJ5J10sXG4gICAgc2Vjb25kYXJ5OiBbJ3NlY29uZGFyeSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IExpc3RJdGVtVGV4dFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtVGV4dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHtsaXN0SXRlbVRleHRDbGFzc2VzLnByaW1hcnl9YF06IHN0eWxlcy5wcmltYXJ5XG4gICAgfSwge1xuICAgICAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMuc2Vjb25kYXJ5fWBdOiBzdHlsZXMuc2Vjb25kYXJ5XG4gICAgfSwgc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuaW5zZXQgJiYgc3R5bGVzLmluc2V0LCBvd25lclN0YXRlLnByaW1hcnkgJiYgb3duZXJTdGF0ZS5zZWNvbmRhcnkgJiYgc3R5bGVzLm11bHRpbGluZSwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2VdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGZsZXg6ICcxIDEgYXV0bycsXG4gIG1pbldpZHRoOiAwLFxuICBtYXJnaW5Ub3A6IDQsXG4gIG1hcmdpbkJvdHRvbTogNFxufSwgb3duZXJTdGF0ZS5wcmltYXJ5ICYmIG93bmVyU3RhdGUuc2Vjb25kYXJ5ICYmIHtcbiAgbWFyZ2luVG9wOiA2LFxuICBtYXJnaW5Cb3R0b206IDZcbn0sIG93bmVyU3RhdGUuaW5zZXQgJiYge1xuICBwYWRkaW5nTGVmdDogNTZcbn0pKTtcbmNvbnN0IExpc3RJdGVtVGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RJdGVtVGV4dChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdEl0ZW1UZXh0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGRpc2FibGVUeXBvZ3JhcGh5ID0gZmFsc2UsXG4gICAgaW5zZXQgPSBmYWxzZSxcbiAgICBwcmltYXJ5OiBwcmltYXJ5UHJvcCxcbiAgICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzLFxuICAgIHNlY29uZGFyeTogc2Vjb25kYXJ5UHJvcCxcbiAgICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHNcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHtcbiAgICBkZW5zZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGxldCBwcmltYXJ5ID0gcHJpbWFyeVByb3AgIT0gbnVsbCA/IHByaW1hcnlQcm9wIDogY2hpbGRyZW47XG4gIGxldCBzZWNvbmRhcnkgPSBzZWNvbmRhcnlQcm9wO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlVHlwb2dyYXBoeSxcbiAgICBpbnNldCxcbiAgICBwcmltYXJ5OiAhIXByaW1hcnksXG4gICAgc2Vjb25kYXJ5OiAhIXNlY29uZGFyeSxcbiAgICBkZW5zZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG5cbiAgaWYgKHByaW1hcnkgIT0gbnVsbCAmJiBwcmltYXJ5LnR5cGUgIT09IFR5cG9ncmFwaHkgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgcHJpbWFyeSA9IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGRlbnNlID8gJ2JvZHkyJyA6ICdib2R5MScsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMucHJpbWFyeSxcbiAgICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICB9LCBwcmltYXJ5VHlwb2dyYXBoeVByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogcHJpbWFyeVxuICAgIH0pKTtcbiAgfVxuXG4gIGlmIChzZWNvbmRhcnkgIT0gbnVsbCAmJiBzZWNvbmRhcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBzZWNvbmRhcnkgPSAvKiNfX1BVUkVfXyovX2pzeChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBcImJvZHkyXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IFwidGV4dC5zZWNvbmRhcnlcIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcywge1xuICAgICAgY2hpbGRyZW46IHNlY29uZGFyeVxuICAgIH0pKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdEl0ZW1UZXh0Um9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbcHJpbWFyeSwgc2Vjb25kYXJ5XVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtVGV4dC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQWxpYXMgZm9yIHRoZSBgcHJpbWFyeWAgcHJvcC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiB3b24ndCBiZSB3cmFwcGVkIGJ5IGEgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCB0byByZW5kZXIgYW4gYWx0ZXJuYXRpdmUgVHlwb2dyYXBoeSB2YXJpYW50IGJ5IHdyYXBwaW5nXG4gICAqIHRoZSBgY2hpbGRyZW5gIChvciBgcHJpbWFyeWApIHRleHQsIGFuZCBvcHRpb25hbCBgc2Vjb25kYXJ5YCB0ZXh0XG4gICAqIHdpdGggdGhlIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiBhcmUgaW5kZW50ZWQuXG4gICAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5zZXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgbWFpbiBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBwcmltYXJ5OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHByaW1hcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kYXJ5IGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBzZWNvbmRhcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtVGV4dDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtJywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbScsIFsncm9vdCcsICdjb250YWluZXInLCAnZm9jdXNWaXNpYmxlJywgJ2RlbnNlJywgJ2FsaWduSXRlbXNGbGV4U3RhcnQnLCAnZGlzYWJsZWQnLCAnZGl2aWRlcicsICdndXR0ZXJzJywgJ3BhZGRpbmcnLCAnYnV0dG9uJywgJ3NlY29uZGFyeUFjdGlvbicsICdzZWxlY3RlZCddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RJdGVtQ2xhc3NlczsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1CdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtQnV0dG9uJywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbUJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbUJ1dHRvbicsIFsncm9vdCcsICdmb2N1c1Zpc2libGUnLCAnZGVuc2UnLCAnYWxpZ25JdGVtc0ZsZXhTdGFydCcsICdkaXNhYmxlZCcsICdkaXZpZGVyJywgJ2d1dHRlcnMnLCAnc2VsZWN0ZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbUJ1dHRvbkNsYXNzZXM7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uQ2xhc3Nlc1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJywgWydyb290JywgJ2Rpc2FibGVHdXR0ZXJzJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0TGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbVNlY29uZGFyeUFjdGlvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVHdXR0ZXJzICYmICdkaXNhYmxlR3V0dGVycyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiBzdHlsZXMuZGlzYWJsZUd1dHRlcnNdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICByaWdodDogMTYsXG4gIHRvcDogJzUwJScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknXG59LCBvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHtcbiAgcmlnaHQ6IDBcbn0pKTtcbi8qKlxuICogTXVzdCBiZSB1c2VkIGFzIHRoZSBsYXN0IGNoaWxkIG9mIExpc3RJdGVtIHRvIGZ1bmN0aW9uIHByb3Blcmx5LlxuICovXG5cbmNvbnN0IExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVHdXR0ZXJzOiBjb250ZXh0LmRpc2FibGVHdXR0ZXJzXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbi5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYW4gYEljb25CdXR0b25gIG9yIHNlbGVjdGlvbiBjb250cm9sLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbkxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLm11aU5hbWUgPSAnTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nO1xuZXhwb3J0IGRlZmF1bHQgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb247IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhbGlnbkl0ZW1zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiYnV0dG9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiQ29udGFpbmVyQ29tcG9uZW50XCIsIFwiQ29udGFpbmVyUHJvcHNcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcImRpdmlkZXJcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJzZWNvbmRhcnlBY3Rpb25cIiwgXCJzZWxlY3RlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzLCBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuLi91dGlscy91c2VFbmhhbmNlZEVmZmVjdCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmltcG9ydCBsaXN0SXRlbUNsYXNzZXMsIHsgZ2V0TGlzdEl0ZW1VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpc3RJdGVtQ2xhc3Nlcyc7XG5pbXBvcnQgeyBsaXN0SXRlbUJ1dHRvbkNsYXNzZXMgfSBmcm9tICcuLi9MaXN0SXRlbUJ1dHRvbic7XG5pbXBvcnQgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24gZnJvbSAnLi4vTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIHN0eWxlcy5hbGlnbkl0ZW1zRmxleFN0YXJ0LCBvd25lclN0YXRlLmRpdmlkZXIgJiYgc3R5bGVzLmRpdmlkZXIsICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5ndXR0ZXJzLCAhb3duZXJTdGF0ZS5kaXNhYmxlUGFkZGluZyAmJiBzdHlsZXMucGFkZGluZywgb3duZXJTdGF0ZS5idXR0b24gJiYgc3R5bGVzLmJ1dHRvbiwgb3duZXJTdGF0ZS5oYXNTZWNvbmRhcnlBY3Rpb24gJiYgc3R5bGVzLnNlY29uZGFyeUFjdGlvbl07XG59O1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgYWxpZ25JdGVtcyxcbiAgICBidXR0b24sXG4gICAgY2xhc3NlcyxcbiAgICBkZW5zZSxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBkaXNhYmxlUGFkZGluZyxcbiAgICBkaXZpZGVyLFxuICAgIGhhc1NlY29uZGFyeUFjdGlvbixcbiAgICBzZWxlY3RlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGVuc2UgJiYgJ2RlbnNlJywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJywgIWRpc2FibGVQYWRkaW5nICYmICdwYWRkaW5nJywgZGl2aWRlciAmJiAnZGl2aWRlcicsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGJ1dHRvbiAmJiAnYnV0dG9uJywgYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmICdhbGlnbkl0ZW1zRmxleFN0YXJ0JywgaGFzU2Vjb25kYXJ5QWN0aW9uICYmICdzZWNvbmRhcnlBY3Rpb24nLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnXSxcbiAgICBjb250YWluZXI6IFsnY29udGFpbmVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0SXRlbVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5leHBvcnQgY29uc3QgTGlzdEl0ZW1Sb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgdGV4dEFsaWduOiAnbGVmdCdcbn0sICFvd25lclN0YXRlLmRpc2FibGVQYWRkaW5nICYmIF9leHRlbmRzKHtcbiAgcGFkZGluZ1RvcDogOCxcbiAgcGFkZGluZ0JvdHRvbTogOFxufSwgb3duZXJTdGF0ZS5kZW5zZSAmJiB7XG4gIHBhZGRpbmdUb3A6IDQsXG4gIHBhZGRpbmdCb3R0b206IDRcbn0sICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDE2LFxuICBwYWRkaW5nUmlnaHQ6IDE2XG59LCAhIW93bmVyU3RhdGUuc2Vjb25kYXJ5QWN0aW9uICYmIHtcbiAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgLy8gaXMgYWJzb2x1dGVseSBwb3NpdGlvbmVkLlxuICBwYWRkaW5nUmlnaHQ6IDQ4XG59KSwgISFvd25lclN0YXRlLnNlY29uZGFyeUFjdGlvbiAmJiB7XG4gIFtgJiA+IC4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5yb290fWBdOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiA0OFxuICB9XG59LCB7XG4gIFtgJi4ke2xpc3RJdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICB9LFxuICBbYCYuJHtsaXN0SXRlbUNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICBbYCYuJHtsaXN0SXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LFxuICBbYCYuJHtsaXN0SXRlbUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH1cbn0sIG93bmVyU3RhdGUuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIHtcbiAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG59LCBvd25lclN0YXRlLmRpdmlkZXIgJiYge1xuICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWAsXG4gIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG59LCBvd25lclN0YXRlLmJ1dHRvbiAmJiB7XG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfSksXG4gICcmOmhvdmVyJzoge1xuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXIsXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH0sXG4gIFtgJi4ke2xpc3RJdGVtQ2xhc3Nlcy5zZWxlY3RlZH06aG92ZXJgXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KVxuICAgIH1cbiAgfVxufSwgb3duZXJTdGF0ZS5oYXNTZWNvbmRhcnlBY3Rpb24gJiYge1xuICAvLyBBZGQgc29tZSBzcGFjZSB0byBhdm9pZCBjb2xsaXNpb24gYXMgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYFxuICAvLyBpcyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQuXG4gIHBhZGRpbmdSaWdodDogNDhcbn0pKTtcbmNvbnN0IExpc3RJdGVtQ29udGFpbmVyID0gc3R5bGVkKCdsaScsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtJyxcbiAgc2xvdDogJ0NvbnRhaW5lcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmNvbnRhaW5lclxufSkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSk7XG4vKipcbiAqIFVzZXMgYW4gYWRkaXRpb25hbCBjb250YWluZXIgY29tcG9uZW50IGlmIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmAgaXMgdGhlIGxhc3QgY2hpbGQuXG4gKi9cblxuY29uc3QgTGlzdEl0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdEl0ZW0nXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBhbGlnbkl0ZW1zID0gJ2NlbnRlcicsXG4gICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgYnV0dG9uID0gZmFsc2UsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuUHJvcCxcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50OiBjb21wb25lbnRQcm9wLFxuICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICBDb250YWluZXJDb21wb25lbnQgPSAnbGknLFxuICAgIENvbnRhaW5lclByb3BzOiB7XG4gICAgICBjbGFzc05hbWU6IENvbnRhaW5lckNsYXNzTmFtZVxuICAgIH0gPSB7fSxcbiAgICBkZW5zZSA9IGZhbHNlLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICBkaXNhYmxlUGFkZGluZyA9IGZhbHNlLFxuICAgIGRpdmlkZXIgPSBmYWxzZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgc2Vjb25kYXJ5QWN0aW9uLFxuICAgIHNlbGVjdGVkID0gZmFsc2VcbiAgfSA9IHByb3BzLFxuICAgICAgICBDb250YWluZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLkNvbnRhaW5lclByb3BzLCBfZXhjbHVkZWQpLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcblxuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IHtcbiAgICBkZW5zZTogZGVuc2UgfHwgY29udGV4dC5kZW5zZSB8fCBmYWxzZSxcbiAgICBhbGlnbkl0ZW1zLFxuICAgIGRpc2FibGVHdXR0ZXJzXG4gIH07XG4gIGNvbnN0IGxpc3RJdGVtUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1dG9Gb2N1cykge1xuICAgICAgaWYgKGxpc3RJdGVtUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgbGlzdEl0ZW1SZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogVW5hYmxlIHRvIHNldCBmb2N1cyB0byBhIExpc3RJdGVtIHdob3NlIGNvbXBvbmVudCBoYXMgbm90IGJlZW4gcmVuZGVyZWQuJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYXV0b0ZvY3VzXSk7XG4gIGNvbnN0IGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlblByb3ApOyAvLyB2NCBpbXBsZW1lbnRhdGlvbiwgZGVwcmVjYXRlZCBpbiB2NSwgd2lsbCBiZSByZW1vdmVkIGluIHY2XG5cbiAgY29uc3QgaGFzU2Vjb25kYXJ5QWN0aW9uID0gY2hpbGRyZW4ubGVuZ3RoICYmIGlzTXVpRWxlbWVudChjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSwgWydMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiddKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ25JdGVtcyxcbiAgICBhdXRvRm9jdXMsXG4gICAgYnV0dG9uLFxuICAgIGRlbnNlOiBjaGlsZENvbnRleHQuZGVuc2UsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgZGlzYWJsZVBhZGRpbmcsXG4gICAgZGl2aWRlcixcbiAgICBoYXNTZWNvbmRhcnlBY3Rpb24sXG4gICAgc2VsZWN0ZWRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGxpc3RJdGVtUmVmLCByZWYpO1xuICBjb25zdCBSb290ID0gY29tcG9uZW50cy5Sb290IHx8IExpc3RJdGVtUm9vdDtcbiAgY29uc3Qgcm9vdFByb3BzID0gY29tcG9uZW50c1Byb3BzLnJvb3QgfHwge307XG5cbiAgY29uc3QgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgcm9vdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKSxcbiAgICBkaXNhYmxlZFxuICB9LCBvdGhlcik7XG5cbiAgbGV0IENvbXBvbmVudCA9IGNvbXBvbmVudFByb3AgfHwgJ2xpJztcblxuICBpZiAoYnV0dG9uKSB7XG4gICAgY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAnZGl2JztcbiAgICBjb21wb25lbnRQcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUgPSBjbHN4KGxpc3RJdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSk7XG4gICAgQ29tcG9uZW50ID0gQnV0dG9uQmFzZTtcbiAgfSAvLyB2NCBpbXBsZW1lbnRhdGlvbiwgZGVwcmVjYXRlZCBpbiB2NSwgd2lsbCBiZSByZW1vdmVkIGluIHY2XG5cblxuICBpZiAoaGFzU2Vjb25kYXJ5QWN0aW9uKSB7XG4gICAgLy8gVXNlIGRpdiBieSBkZWZhdWx0LlxuICAgIENvbXBvbmVudCA9ICFjb21wb25lbnRQcm9wcy5jb21wb25lbnQgJiYgIWNvbXBvbmVudFByb3AgPyAnZGl2JyA6IENvbXBvbmVudDsgLy8gQXZvaWQgbmVzdGluZyBvZiBsaSA+IGxpLlxuXG4gICAgaWYgKENvbnRhaW5lckNvbXBvbmVudCA9PT0gJ2xpJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gJ2xpJykge1xuICAgICAgICBDb21wb25lbnQgPSAnZGl2JztcbiAgICAgIH0gZWxzZSBpZiAoY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgIGNvbXBvbmVudFByb3BzLmNvbXBvbmVudCA9ICdkaXYnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNoaWxkQ29udGV4dCxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdEl0ZW1Db250YWluZXIsIF9leHRlbmRzKHtcbiAgICAgICAgYXM6IENvbnRhaW5lckNvbXBvbmVudCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY29udGFpbmVyLCBDb250YWluZXJDbGFzc05hbWUpLFxuICAgICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgICAgfSwgQ29udGFpbmVyUHJvcHMsIHtcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KFJvb3QpICYmIHtcbiAgICAgICAgICBhczogQ29tcG9uZW50LFxuICAgICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCByb290UHJvcHMub3duZXJTdGF0ZSlcbiAgICAgICAgfSwgY29tcG9uZW50UHJvcHMsIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfSkpLCBjaGlsZHJlbi5wb3AoKV1cbiAgICAgIH0pKVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNoaWxkQ29udGV4dCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIHtcbiAgICAgIGFzOiBDb21wb25lbnQsXG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCAhaXNIb3N0Q29tcG9uZW50KFJvb3QpICYmIHtcbiAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCByb290UHJvcHMub3duZXJTdGF0ZSlcbiAgICB9LCBjb21wb25lbnRQcm9wcywge1xuICAgICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgc2Vjb25kYXJ5QWN0aW9uICYmIC8qI19fUFVSRV9fKi9fanN4KExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLCB7XG4gICAgICAgIGNoaWxkcmVuOiBzZWNvbmRhcnlBY3Rpb25cbiAgICAgIH0pXVxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdEl0ZW0ucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqIEBkZWZhdWx0ICdjZW50ZXInXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnZmxleC1zdGFydCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogRm9jdXMgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBpZiB0aGUgdmFsdWUgY2hhbmdlcyBmcm9tIGZhbHNlIHRvIHRydWUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqIEBkZXByZWNhdGVkIGNoZWNrb3V0IFtMaXN0SXRlbUJ1dHRvbl0oL21hdGVyaWFsLXVpL2FwaS9saXN0LWl0ZW0tYnV0dG9uLykgaW5zdGVhZFxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIGlzIGEgYnV0dG9uICh1c2luZyBgQnV0dG9uQmFzZWApLiBQcm9wcyBpbnRlbmRlZFxuICAgKiBmb3IgYEJ1dHRvbkJhc2VgIGNhbiB0aGVuIGJlIGFwcGxpZWQgdG8gYExpc3RJdGVtYC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICogQGRlcHJlY2F0ZWQgY2hlY2tvdXQgW0xpc3RJdGVtQnV0dG9uXSgvbWF0ZXJpYWwtdWkvYXBpL2xpc3QtaXRlbS1idXR0b24vKSBpbnN0ZWFkXG4gICAqL1xuICBidXR0b246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50IGlmIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB1c2VkIGl0IG11c3RcbiAgICogYmUgdGhlIGxhc3QgY2hpbGQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIHByb3BzID0+IHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pOyAvLyBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5maW5kTGFzdEluZGV4KGlzTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24pXG5cbiAgICBsZXQgc2Vjb25kYXJ5QWN0aW9uSW5kZXggPSAtMTtcblxuICAgIGZvciAobGV0IGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGlzTXVpRWxlbWVudChjaGlsZCwgWydMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiddKSkge1xuICAgICAgICBzZWNvbmRhcnlBY3Rpb25JbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gLy8gIGlzIExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uIHRoZSBsYXN0IGNoaWxkIG9mIExpc3RJdGVtXG5cblxuICAgIGlmIChzZWNvbmRhcnlBY3Rpb25JbmRleCAhPT0gLTEgJiYgc2Vjb25kYXJ5QWN0aW9uSW5kZXggIT09IGNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogWW91IHVzZWQgYW4gZWxlbWVudCBhZnRlciBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbi4gJyArICdGb3IgTGlzdEl0ZW0gdG8gZGV0ZWN0IHRoYXQgaXQgaGFzIGEgc2Vjb25kYXJ5IGFjdGlvbiAnICsgJ3lvdSBtdXN0IHBhc3MgaXQgYXMgdGhlIGxhc3QgY2hpbGQgdG8gTGlzdEl0ZW0uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dEJhc2UuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcblxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIElucHV0LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgY29tcG9uZW50IHVzZWQgd2hlbiBhIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmAgaXMgdGhlIGxhc3QgY2hpbGQuXG4gICAqIEBkZWZhdWx0ICdsaSdcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIENvbnRhaW5lckNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBjb21wb25lbnQgaWYgdXNlZC5cbiAgICogQGRlZmF1bHQge31cbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIENvbnRhaW5lclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IGlzIHVzZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IExpc3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVuc2U6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqIEBkZXByZWNhdGVkIGNoZWNrb3V0IFtMaXN0SXRlbUJ1dHRvbl0oL21hdGVyaWFsLXVpL2FwaS9saXN0LWl0ZW0tYnV0dG9uLykgaW5zdGVhZFxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYWxsIHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGVsZW1lbnQgdG8gZGlzcGxheSBhdCB0aGUgZW5kIG9mIExpc3RJdGVtLlxuICAgKi9cbiAgc2Vjb25kYXJ5QWN0aW9uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVXNlIHRvIGFwcGx5IHNlbGVjdGVkIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqIEBkZXByZWNhdGVkIGNoZWNrb3V0IFtMaXN0SXRlbUJ1dHRvbl0oL21hdGVyaWFsLXVpL2FwaS9saXN0LWl0ZW0tYnV0dG9uLykgaW5zdGVhZFxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaXN0SXRlbTsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdCcsIHNsb3QpO1xufVxuY29uc3QgbGlzdENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0JywgWydyb290JywgJ3BhZGRpbmcnLCAnZGVuc2UnLCAnc3ViaGVhZGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdENsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcInN1YmhlYWRlclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5pbXBvcnQgeyBnZXRMaXN0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlUGFkZGluZyxcbiAgICBkZW5zZSxcbiAgICBzdWJoZWFkZXJcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlUGFkZGluZyAmJiAncGFkZGluZycsIGRlbnNlICYmICdkZW5zZScsIHN1YmhlYWRlciAmJiAnc3ViaGVhZGVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IExpc3RSb290ID0gc3R5bGVkKCd1bCcsIHtcbiAgbmFtZTogJ011aUxpc3QnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYgc3R5bGVzLnBhZGRpbmcsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlLCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiBzdHlsZXMuc3ViaGVhZGVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYge1xuICBwYWRkaW5nVG9wOiA4LFxuICBwYWRkaW5nQm90dG9tOiA4XG59LCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiB7XG4gIHBhZGRpbmdUb3A6IDBcbn0pKTtcbmNvbnN0IExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICd1bCcsXG4gICAgZGVuc2UgPSBmYWxzZSxcbiAgICBkaXNhYmxlUGFkZGluZyA9IGZhbHNlLFxuICAgIHN1YmhlYWRlclxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkZW5zZVxuICB9KSwgW2RlbnNlXSk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBkZW5zZSxcbiAgICBkaXNhYmxlUGFkZGluZ1xuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBbc3ViaGVhZGVyLCBjaGlsZHJlbl1cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgaXMgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wIGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHN1YmhlYWRlciwgbm9ybWFsbHkgYExpc3RTdWJoZWFkZXJgLlxuICAgKi9cbiAgc3ViaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuY29uc3QgTGlzdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIExpc3RDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0xpc3RDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlQYXBlcicsIHNsb3QpO1xufVxuY29uc3QgcGFwZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUGFwZXInLCBbJ3Jvb3QnLCAncm91bmRlZCcsICdvdXRsaW5lZCcsICdlbGV2YXRpb24nLCAnZWxldmF0aW9uMCcsICdlbGV2YXRpb24xJywgJ2VsZXZhdGlvbjInLCAnZWxldmF0aW9uMycsICdlbGV2YXRpb240JywgJ2VsZXZhdGlvbjUnLCAnZWxldmF0aW9uNicsICdlbGV2YXRpb243JywgJ2VsZXZhdGlvbjgnLCAnZWxldmF0aW9uOScsICdlbGV2YXRpb24xMCcsICdlbGV2YXRpb24xMScsICdlbGV2YXRpb24xMicsICdlbGV2YXRpb24xMycsICdlbGV2YXRpb24xNCcsICdlbGV2YXRpb24xNScsICdlbGV2YXRpb24xNicsICdlbGV2YXRpb24xNycsICdlbGV2YXRpb24xOCcsICdlbGV2YXRpb24xOScsICdlbGV2YXRpb24yMCcsICdlbGV2YXRpb24yMScsICdlbGV2YXRpb24yMicsICdlbGV2YXRpb24yMycsICdlbGV2YXRpb24yNCddKTtcbmV4cG9ydCBkZWZhdWx0IHBhcGVyQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZWxldmF0aW9uXCIsIFwic3F1YXJlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBpbnRlZ2VyUHJvcFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgZ2V0UGFwZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3BhcGVyQ2xhc3Nlcyc7IC8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtaW9zL2Jsb2IvYmNhMzYxMDc0MDU1OTRkNWI3YjE2MjY1YTViMGVkNjk4Zjg1YTVlZS9jb21wb25lbnRzL0VsZXZhdGlvbi9zcmMvVUlDb2xvciUyQk1hdGVyaWFsRWxldmF0aW9uLm0jTDYxXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3QgZ2V0T3ZlcmxheUFscGhhID0gZWxldmF0aW9uID0+IHtcbiAgbGV0IGFscGhhVmFsdWU7XG5cbiAgaWYgKGVsZXZhdGlvbiA8IDEpIHtcbiAgICBhbHBoYVZhbHVlID0gNS4xMTkxNiAqIGVsZXZhdGlvbiAqKiAyO1xuICB9IGVsc2Uge1xuICAgIGFscGhhVmFsdWUgPSA0LjUgKiBNYXRoLmxvZyhlbGV2YXRpb24gKyAxKSArIDI7XG4gIH1cblxuICByZXR1cm4gKGFscGhhVmFsdWUgLyAxMDApLnRvRml4ZWQoMik7XG59O1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgc3F1YXJlLFxuICAgIGVsZXZhdGlvbixcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsICFzcXVhcmUgJiYgJ3JvdW5kZWQnLCB2YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBgZWxldmF0aW9uJHtlbGV2YXRpb259YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRQYXBlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBQYXBlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVBhcGVyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCAhb3duZXJTdGF0ZS5zcXVhcmUgJiYgc3R5bGVzLnJvdW5kZWQsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgc3R5bGVzW2BlbGV2YXRpb24ke293bmVyU3RhdGUuZWxldmF0aW9ufWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJzJG92ZXJsYXlzO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3gtc2hhZG93JylcbiAgfSwgIW93bmVyU3RhdGUuc3F1YXJlICYmIHtcbiAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgIGJvcmRlcjogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIF9leHRlbmRzKHtcbiAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzW293bmVyU3RhdGUuZWxldmF0aW9uXVxuICB9LCAhdGhlbWUudmFycyAmJiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJyAmJiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KCR7YWxwaGEoJyNmZmYnLCBnZXRPdmVybGF5QWxwaGEob3duZXJTdGF0ZS5lbGV2YXRpb24pKX0sICR7YWxwaGEoJyNmZmYnLCBnZXRPdmVybGF5QWxwaGEob3duZXJTdGF0ZS5lbGV2YXRpb24pKX0pYFxuICB9LCB0aGVtZS52YXJzICYmIHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IChfdGhlbWUkdmFycyRvdmVybGF5cyA9IHRoZW1lLnZhcnMub3ZlcmxheXMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFycyRvdmVybGF5c1tvd25lclN0YXRlLmVsZXZhdGlvbl1cbiAgfSkpO1xufSk7XG5jb25zdCBQYXBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQYXBlcidcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICBlbGV2YXRpb24gPSAxLFxuICAgIHNxdWFyZSA9IGZhbHNlLFxuICAgIHZhcmlhbnQgPSAnZWxldmF0aW9uJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBlbGV2YXRpb24sXG4gICAgc3F1YXJlLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuXG4gICAgaWYgKHRoZW1lLnNoYWRvd3NbZWxldmF0aW9uXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgZWxldmF0aW9uIHByb3ZpZGVkIDxQYXBlciBlbGV2YXRpb249eyR7ZWxldmF0aW9ufX0+IGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIHRoZW1lLmAsIGBQbGVhc2UgbWFrZSBzdXJlIHRoYXQgXFxgdGhlbWUuc2hhZG93c1ske2VsZXZhdGlvbn1dXFxgIGlzIGRlZmluZWQuYF0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQYXBlclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYXBlci5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgZWxldmF0aW9uOiBjaGFpblByb3BUeXBlcyhpbnRlZ2VyUHJvcFR5cGUsIHByb3BzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb24sXG4gICAgICB2YXJpYW50XG4gICAgfSA9IHByb3BzO1xuXG4gICAgaWYgKGVsZXZhdGlvbiA+IDAgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgTVVJOiBDb21iaW5pbmcgXFxgZWxldmF0aW9uPXske2VsZXZhdGlvbn19XFxgIHdpdGggXFxgdmFyaWFudD1cIiR7dmFyaWFudH1cIlxcYCBoYXMgbm8gZWZmZWN0LiBFaXRoZXIgdXNlIFxcYGVsZXZhdGlvbj17MH1cXGAgb3IgdXNlIGEgZGlmZmVyZW50IFxcYHZhcmlhbnRcXGAuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHJvdW5kZWQgY29ybmVycyBhcmUgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzcXVhcmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ2VsZXZhdGlvbidcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUGFwZXI7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVR5cG9ncmFwaHknLCBzbG90KTtcbn1cbmNvbnN0IHR5cG9ncmFwaHlDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVHlwb2dyYXBoeScsIFsncm9vdCcsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2luaGVyaXQnLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnb3ZlcmxpbmUnLCAnYWxpZ25MZWZ0JywgJ2FsaWduUmlnaHQnLCAnYWxpZ25DZW50ZXInLCAnYWxpZ25KdXN0aWZ5JywgJ25vV3JhcCcsICdndXR0ZXJCb3R0b20nLCAncGFyYWdyYXBoJ10pO1xuZXhwb3J0IGRlZmF1bHQgdHlwb2dyYXBoeUNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFsaWduXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZ3V0dGVyQm90dG9tXCIsIFwibm9XcmFwXCIsIFwicGFyYWdyYXBoXCIsIFwidmFyaWFudFwiLCBcInZhcmlhbnRNYXBwaW5nXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfZXh0ZW5kU3hQcm9wIGFzIGV4dGVuZFN4UHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3R5cG9ncmFwaHlDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbixcbiAgICBndXR0ZXJCb3R0b20sXG4gICAgbm9XcmFwLFxuICAgIHBhcmFncmFwaCxcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBgYWxpZ24ke2NhcGl0YWxpemUoYWxpZ24pfWAsIGd1dHRlckJvdHRvbSAmJiAnZ3V0dGVyQm90dG9tJywgbm9XcmFwICYmICdub1dyYXAnLCBwYXJhZ3JhcGggJiYgJ3BhcmFncmFwaCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5leHBvcnQgY29uc3QgVHlwb2dyYXBoeVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUeXBvZ3JhcGh5JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgYWxpZ24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbGlnbil9YF0sIG93bmVyU3RhdGUubm9XcmFwICYmIHN0eWxlcy5ub1dyYXAsIG93bmVyU3RhdGUuZ3V0dGVyQm90dG9tICYmIHN0eWxlcy5ndXR0ZXJCb3R0b20sIG93bmVyU3RhdGUucGFyYWdyYXBoICYmIHN0eWxlcy5wYXJhZ3JhcGhdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtYXJnaW46IDBcbn0sIG93bmVyU3RhdGUudmFyaWFudCAmJiB0aGVtZS50eXBvZ3JhcGh5W293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiB7XG4gIHRleHRBbGlnbjogb3duZXJTdGF0ZS5hbGlnblxufSwgb3duZXJTdGF0ZS5ub1dyYXAgJiYge1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbn0sIG93bmVyU3RhdGUuZ3V0dGVyQm90dG9tICYmIHtcbiAgbWFyZ2luQm90dG9tOiAnMC4zNWVtJ1xufSwgb3duZXJTdGF0ZS5wYXJhZ3JhcGggJiYge1xuICBtYXJnaW5Cb3R0b206IDE2XG59KSk7XG5jb25zdCBkZWZhdWx0VmFyaWFudE1hcHBpbmcgPSB7XG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIHN1YnRpdGxlMTogJ2g2JyxcbiAgc3VidGl0bGUyOiAnaDYnLFxuICBib2R5MTogJ3AnLFxuICBib2R5MjogJ3AnLFxuICBpbmhlcml0OiAncCdcbn07IC8vIFRPRE8gdjY6IGRlcHJlY2F0ZSB0aGVzZSBjb2xvciB2YWx1ZXMgaW4gdjUueCBhbmQgcmVtb3ZlIHRoZSB0cmFuc2Zvcm1hdGlvbiBpbiB2NlxuXG5jb25zdCBjb2xvclRyYW5zZm9ybWF0aW9ucyA9IHtcbiAgcHJpbWFyeTogJ3ByaW1hcnkubWFpbicsXG4gIHRleHRQcmltYXJ5OiAndGV4dC5wcmltYXJ5JyxcbiAgc2Vjb25kYXJ5OiAnc2Vjb25kYXJ5Lm1haW4nLFxuICB0ZXh0U2Vjb25kYXJ5OiAndGV4dC5zZWNvbmRhcnknLFxuICBlcnJvcjogJ2Vycm9yLm1haW4nXG59O1xuXG5jb25zdCB0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzID0gY29sb3IgPT4ge1xuICByZXR1cm4gY29sb3JUcmFuc2Zvcm1hdGlvbnNbY29sb3JdIHx8IGNvbG9yO1xufTtcblxuY29uc3QgVHlwb2dyYXBoeSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFR5cG9ncmFwaHkoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVHlwb2dyYXBoeSdcbiAgfSk7XG4gIGNvbnN0IGNvbG9yID0gdHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyh0aGVtZVByb3BzLmNvbG9yKTtcbiAgY29uc3QgcHJvcHMgPSBleHRlbmRTeFByb3AoX2V4dGVuZHMoe30sIHRoZW1lUHJvcHMsIHtcbiAgICBjb2xvclxuICB9KSk7XG5cbiAgY29uc3Qge1xuICAgIGFsaWduID0gJ2luaGVyaXQnLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQsXG4gICAgZ3V0dGVyQm90dG9tID0gZmFsc2UsXG4gICAgbm9XcmFwID0gZmFsc2UsXG4gICAgcGFyYWdyYXBoID0gZmFsc2UsXG4gICAgdmFyaWFudCA9ICdib2R5MScsXG4gICAgdmFyaWFudE1hcHBpbmcgPSBkZWZhdWx0VmFyaWFudE1hcHBpbmdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbGlnbixcbiAgICBjb2xvcixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50LFxuICAgIGd1dHRlckJvdHRvbSxcbiAgICBub1dyYXAsXG4gICAgcGFyYWdyYXBoLFxuICAgIHZhcmlhbnQsXG4gICAgdmFyaWFudE1hcHBpbmdcbiAgfSk7XG5cbiAgY29uc3QgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IChwYXJhZ3JhcGggPyAncCcgOiB2YXJpYW50TWFwcGluZ1t2YXJpYW50XSB8fCBkZWZhdWx0VmFyaWFudE1hcHBpbmdbdmFyaWFudF0pIHx8ICdzcGFuJztcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHlwb2dyYXBoeVJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogQ29tcG9uZW50LFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUeXBvZ3JhcGh5LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2luaGVyaXQnLCAnanVzdGlmeScsICdsZWZ0JywgJ3JpZ2h0J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBndXR0ZXJCb3R0b206IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgbm90IHdyYXAsIGJ1dCBpbnN0ZWFkIHdpbGwgdHJ1bmNhdGUgd2l0aCBhIHRleHQgb3ZlcmZsb3cgZWxsaXBzaXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0ZXh0IG92ZXJmbG93IGNhbiBvbmx5IGhhcHBlbiB3aXRoIGJsb2NrIG9yIGlubGluZS1ibG9jayBsZXZlbCBlbGVtZW50c1xuICAgKiAodGhlIGVsZW1lbnQgbmVlZHMgdG8gaGF2ZSBhIHdpZHRoIGluIG9yZGVyIHRvIG92ZXJmbG93KS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG5vV3JhcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGVsZW1lbnQgd2lsbCBiZSBhIHBhcmFncmFwaCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcGFyYWdyYXBoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICogQGRlZmF1bHQgJ2JvZHkxJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm9keTEnLCAnYm9keTInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaW5oZXJpdCcsICdvdmVybGluZScsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgaDE6ICdoMScsXG4gICAqICAgaDI6ICdoMicsXG4gICAqICAgaDM6ICdoMycsXG4gICAqICAgaDQ6ICdoNCcsXG4gICAqICAgaDU6ICdoNScsXG4gICAqICAgaDY6ICdoNicsXG4gICAqICAgc3VidGl0bGUxOiAnaDYnLFxuICAgKiAgIHN1YnRpdGxlMjogJ2g2JyxcbiAgICogICBib2R5MTogJ3AnLFxuICAgKiAgIGJvZHkyOiAncCcsXG4gICAqICAgaW5oZXJpdDogJ3AnLFxuICAgKiB9XG4gICAqL1xuICB2YXJpYW50TWFwcGluZzogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFR5cG9ncmFwaHk7IiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGM9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxkPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxlPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxmPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxnPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxoPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LnNlcnZlcl9jb250ZXh0XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLG09U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIikscD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKSx1O3U9U3ltYm9sLmZvcihcInJlYWN0Lm1vZHVsZS5yZWZlcmVuY2VcIik7XG5mdW5jdGlvbiB2KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciByPWEuJCR0eXBlb2Y7c3dpdGNoKHIpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBtOmNhc2UgbjpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgaDpjYXNlIGw6Y2FzZSBxOmNhc2UgcDpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gcn19Y2FzZSBjOnJldHVybiByfX19ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj1nO2V4cG9ydHMuRWxlbWVudD1iO2V4cG9ydHMuRm9yd2FyZFJlZj1sO2V4cG9ydHMuRnJhZ21lbnQ9ZDtleHBvcnRzLkxhenk9cTtleHBvcnRzLk1lbW89cDtleHBvcnRzLlBvcnRhbD1jO2V4cG9ydHMuUHJvZmlsZXI9ZjtleHBvcnRzLlN0cmljdE1vZGU9ZTtleHBvcnRzLlN1c3BlbnNlPW07XG5leHBvcnRzLlN1c3BlbnNlTGlzdD1uO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bH07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1xfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXB9O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bX07ZXhwb3J0cy5pc1N1c3BlbnNlTGlzdD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW59O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09ZXx8YT09PW18fGE9PT1ufHxhPT09dHx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09bHx8YS4kJHR5cGVvZj09PXV8fHZvaWQgMCE9PWEuZ2V0TW9kdWxlSWQpPyEwOiExfTtleHBvcnRzLnR5cGVPZj12O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVN5c3RlbSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWVTeXN0ZW0oZGVmYXVsdFRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvbi5cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKC4uLmZ1bmNzKSB7XG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoKGFjYywgZnVuYykgPT4ge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sICgpID0+IHt9KTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9kZWJvdW5jZSBhcyBkZWJvdW5jZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZGVib3VuY2U7IiwiLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuLy8gQSBmZXcgYnl0ZXMgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyB+MyBrQiBhbmQgZGVib3VuY2UgfjMwMCBCLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCA9IDE2Nikge1xuICBsZXQgdGltZW91dDtcblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoLi4uYXJncykge1xuICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuXG4gIGRlYm91bmNlZC5jbGVhciA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9kZXByZWNhdGVkUHJvcFR5cGUgYXMgZGVwcmVjYXRlZFByb3BUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBkZXByZWNhdGVkUHJvcFR5cGU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVwcmVjYXRlZFByb3BUeXBlKHZhbGlkYXRvciwgcmVhc29uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICgpID0+IG51bGw7XG4gIH1cblxuICByZXR1cm4gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlICR7bG9jYXRpb259IFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVTYWZlfVxcYCBpcyBkZXByZWNhdGVkLiAke3JlYXNvbn1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lckRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xufSIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJEb2N1bWVudDsiLCJpbXBvcnQgeyB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJXaW5kb3c7IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfcmVxdWlyZVByb3BGYWN0b3J5IGFzIHJlcXVpcmVQcm9wRmFjdG9yeSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgcmVxdWlyZVByb3BGYWN0b3J5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZVByb3BGYWN0b3J5KGNvbXBvbmVudE5hbWVJbkVycm9yLCBDb21wb25lbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZm9yYmlkLWZvcmVpZ24tcHJvcC10eXBlc1xuXG5cbiAgY29uc3QgcHJldlByb3BUeXBlcyA9IENvbXBvbmVudCA/IF9leHRlbmRzKHt9LCBDb21wb25lbnQucHJvcFR5cGVzKSA6IG51bGw7XG5cbiAgY29uc3QgcmVxdWlyZVByb3AgPSByZXF1aXJlZFByb3AgPT4gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgY29uc3QgZGVmYXVsdFR5cGVDaGVja2VyID0gcHJldlByb3BUeXBlcyA9PSBudWxsID8gdm9pZCAwIDogcHJldlByb3BUeXBlc1twcm9wRnVsbE5hbWVTYWZlXTtcblxuICAgIGlmIChkZWZhdWx0VHlwZUNoZWNrZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVDaGVja2VyUmVzdWx0ID0gZGVmYXVsdFR5cGVDaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncyk7XG5cbiAgICAgIGlmICh0eXBlQ2hlY2tlclJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdHlwZUNoZWNrZXJSZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnICYmICFwcm9wc1tyZXF1aXJlZFByb3BdKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBUaGUgcHJvcCBcXGAke3Byb3BGdWxsTmFtZVNhZmV9XFxgIG9mIGAgKyBgXFxgJHtjb21wb25lbnROYW1lSW5FcnJvcn1cXGAgY2FuIG9ubHkgYmUgdXNlZCB0b2dldGhlciB3aXRoIHRoZSBcXGAke3JlcXVpcmVkUHJvcH1cXGAgcHJvcC5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gcmVxdWlyZVByb3A7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfc2V0UmVmIGFzIHNldFJlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgc2V0UmVmOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBnbG9iYWxJZCA9IDA7XG5cbmZ1bmN0aW9uIHVzZUdsb2JhbElkKGlkT3ZlcnJpZGUpIHtcbiAgY29uc3QgW2RlZmF1bHRJZCwgc2V0RGVmYXVsdElkXSA9IFJlYWN0LnVzZVN0YXRlKGlkT3ZlcnJpZGUpO1xuICBjb25zdCBpZCA9IGlkT3ZlcnJpZGUgfHwgZGVmYXVsdElkO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkZWZhdWx0SWQgPT0gbnVsbCkge1xuICAgICAgLy8gRmFsbGJhY2sgdG8gdGhpcyBkZWZhdWx0IGlkIHdoZW4gcG9zc2libGUuXG4gICAgICAvLyBVc2UgdGhlIGluY3JlbWVudGluZyB2YWx1ZSBmb3IgY2xpZW50LXNpZGUgcmVuZGVyaW5nIG9ubHkuXG4gICAgICAvLyBXZSBjYW4ndCB1c2UgaXQgc2VydmVyLXNpZGUuXG4gICAgICAvLyBJZiB5b3Ugd2FudCB0byB1c2UgcmFuZG9tIHZhbHVlcyBwbGVhc2UgY29uc2lkZXIgdGhlIEJpcnRoZGF5IFByb2JsZW06IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JpcnRoZGF5X3Byb2JsZW1cbiAgICAgIGdsb2JhbElkICs9IDE7XG4gICAgICBzZXREZWZhdWx0SWQoYG11aS0ke2dsb2JhbElkfWApO1xuICAgIH1cbiAgfSwgW2RlZmF1bHRJZF0pO1xuICByZXR1cm4gaWQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNvbmNhdCAtLSBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrL2lzc3Vlcy8xNDgxNFxuXG5cbmNvbnN0IG1heWJlUmVhY3RVc2VJZCA9IFJlYWN0Wyd1c2VJZCcgKyAnJ107XG4vKipcbiAqXG4gKiBAZXhhbXBsZSA8ZGl2IGlkPXt1c2VJZCgpfSAvPlxuICogQHBhcmFtIGlkT3ZlcnJpZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSWQoaWRPdmVycmlkZSkge1xuICBpZiAobWF5YmVSZWFjdFVzZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCByZWFjdElkID0gbWF5YmVSZWFjdFVzZUlkKCk7XG4gICAgcmV0dXJuIGlkT3ZlcnJpZGUgIT0gbnVsbCA/IGlkT3ZlcnJpZGUgOiByZWFjdElkO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcyAtLSBgUmVhY3QudXNlSWRgIGlzIGludmFyaWFudCBhdCBydW50aW1lLlxuXG5cbiAgcmV0dXJuIHVzZUdsb2JhbElkKGlkT3ZlcnJpZGUpO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUlkIGFzIHVzZUlkIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VJZDsiLCJpbXBvcnQgeyB1bnN0YWJsZV91bnN1cHBvcnRlZFByb3AgYXMgdW5zdXBwb3J0ZWRQcm9wIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1bnN1cHBvcnRlZFByb3A7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5zdXBwb3J0ZWRQcm9wKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKGBUaGUgcHJvcCBcXGAke3Byb3BGdWxsTmFtZVNhZmV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSByZW1vdmUgaXQuYCk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VDb250cm9sbGVkIGFzIHVzZUNvbnRyb2xsZWQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUNvbnRyb2xsZWQ7IiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MsIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29udHJvbGxlZCh7XG4gIGNvbnRyb2xsZWQsXG4gIGRlZmF1bHQ6IGRlZmF1bHRQcm9wLFxuICBuYW1lLFxuICBzdGF0ZSA9ICd2YWx1ZSdcbn0pIHtcbiAgLy8gaXNDb250cm9sbGVkIGlzIGlnbm9yZWQgaW4gdGhlIGhvb2sgZGVwZW5kZW5jeSBsaXN0cyBhcyBpdCBzaG91bGQgbmV2ZXIgY2hhbmdlLlxuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKTtcbiAgY29uc3QgW3ZhbHVlU3RhdGUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGRlZmF1bHRQcm9wKTtcbiAgY29uc3QgdmFsdWUgPSBpc0NvbnRyb2xsZWQgPyBjb250cm9sbGVkIDogdmFsdWVTdGF0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgJHtpc0NvbnRyb2xsZWQgPyAnJyA6ICd1bid9Y29udHJvbGxlZCAke3N0YXRlfSBzdGF0ZSBvZiAke25hbWV9IHRvIGJlICR7aXNDb250cm9sbGVkID8gJ3VuJyA6ICcnfWNvbnRyb2xsZWQuYCwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIGBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICR7bmFtZX0gYCArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCBcIlRoZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGlzIGRldGVybWluZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIuIEl0J3MgY29uc2lkZXJlZCBjb250cm9sbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXCIsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtzdGF0ZSwgbmFtZSwgY29udHJvbGxlZF0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZVxuICAgIH0gPSBSZWFjdC51c2VSZWYoZGVmYXVsdFByb3ApO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWlzQ29udHJvbGxlZCAmJiBkZWZhdWx0VmFsdWUgIT09IGRlZmF1bHRQcm9wKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBkZWZhdWx0ICR7c3RhdGV9IHN0YXRlIG9mIGFuIHVuY29udHJvbGxlZCAke25hbWV9IGFmdGVyIGJlaW5nIGluaXRpYWxpemVkLiBgICsgYFRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBvcHQgdG8gdXNlIGEgY29udHJvbGxlZCAke25hbWV9LmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbSlNPTi5zdHJpbmdpZnkoZGVmYXVsdFByb3ApXSk7XG4gIH1cblxuICBjb25zdCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3VmFsdWUgPT4ge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzZXRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBbXSk7XG4gIHJldHVybiBbdmFsdWUsIHNldFZhbHVlSWZVbmNvbnRyb2xsZWRdO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciBhcyBDbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICdAbXVpL2Jhc2UvY2xhc3NOYW1lJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJy4vY2FwaXRhbGl6ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJy4vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3JlYXRlU3ZnSWNvbiB9IGZyb20gJy4vY3JlYXRlU3ZnSWNvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlYm91bmNlIH0gZnJvbSAnLi9kZWJvdW5jZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlcHJlY2F0ZWRQcm9wVHlwZSB9IGZyb20gJy4vZGVwcmVjYXRlZFByb3BUeXBlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNNdWlFbGVtZW50IH0gZnJvbSAnLi9pc011aUVsZW1lbnQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvd25lckRvY3VtZW50IH0gZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3duZXJXaW5kb3cgfSBmcm9tICcuL293bmVyV2luZG93JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVxdWlyZVByb3BGYWN0b3J5IH0gZnJvbSAnLi9yZXF1aXJlUHJvcEZhY3RvcnknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzZXRSZWYgfSBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IH0gZnJvbSAnLi91c2VFbmhhbmNlZEVmZmVjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3RhYmxlX3VzZUlkIH0gZnJvbSAnLi91c2VJZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3VwcG9ydGVkUHJvcCB9IGZyb20gJy4vdW5zdXBwb3J0ZWRQcm9wJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlQ29udHJvbGxlZCB9IGZyb20gJy4vdXNlQ29udHJvbGxlZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUV2ZW50Q2FsbGJhY2sgfSBmcm9tICcuL3VzZUV2ZW50Q2FsbGJhY2snO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnLi91c2VGb3JrUmVmJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlSXNGb2N1c1Zpc2libGUgfSBmcm9tICcuL3VzZUlzRm9jdXNWaXNpYmxlJzsgLy8gVE9ETzogcmVtb3ZlIHRoaXMgZXhwb3J0IG9uY2UgQ2xhc3NOYW1lR2VuZXJhdG9yIGlzIHN0YWJsZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuXG5leHBvcnQgY29uc3QgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yID0ge1xuICBjb25maWd1cmU6IGdlbmVyYXRvciA9PiB7XG4gICAgY29uc29sZS53YXJuKFsnTVVJOiBgQ2xhc3NOYW1lR2VuZXJhdG9yYCBpbXBvcnQgZnJvbSBgQG11aS9tYXRlcmlhbC91dGlsc2AgaXMgb3V0ZGF0ZWQgYW5kIG1pZ2h0IGNhdXNlIHVuZXhwZWN0ZWQgaXNzdWVzLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICdAbXVpL21hdGVyaWFsL2NsYXNzTmFtZSdgIGluc3RlYWRcIiwgJycsICdUaGUgZGV0YWlsIG9mIHRoZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzAwMTEjaXNzdWVjb21tZW50LTEwMjQ5OTM0MDEnLCAnJywgJ1RoZSB1cGRhdGVkIGRvY3VtZW50YXRpb246IGh0dHBzOi8vbXVpLmNvbS9ndWlkZXMvY2xhc3NuYW1lLWdlbmVyYXRvci8nXS5qb2luKCdcXG4nKSk7XG4gICAgQ2xhc3NOYW1lR2VuZXJhdG9yLmNvbmZpZ3VyZShnZW5lcmF0b3IpO1xuICB9XG59OyIsImltcG9ydCB7IHVuc3RhYmxlX2lzTXVpRWxlbWVudCBhcyBpc011aUVsZW1lbnQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGlzTXVpRWxlbWVudDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSAmJiBtdWlOYW1lcy5pbmRleE9mKGVsZW1lbnQudHlwZS5tdWlOYW1lKSAhPT0gLTE7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUV2ZW50Q2FsbGJhY2sgYXMgdXNlRXZlbnRDYWxsYmFjayB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRXZlbnRDYWxsYmFjazsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi91c2VFbmhhbmNlZEVmZmVjdCc7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soKC4uLmFyZ3MpID0+IC8vIEB0cy1leHBlY3QtZXJyb3IgaGlkZSBgdGhpc2BcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi1jb21tYS1vcGVyYXRvclxuICAoMCwgcmVmLmN1cnJlbnQpKC4uLmFyZ3MpLCBbXSk7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VGb3JrUmVmOyIsIi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi92NC4xLjUvc3JjL2ZvY3VzLXZpc2libGUuanNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xubGV0IGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dDtcbmNvbnN0IGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIHRhZ05hbWVcbiAgfSA9IG5vZGU7XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gIGlmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlYXJkb3duKGRvYykge1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICBjb25zdCB7XG4gICAgdGFyZ2V0XG4gIH0gPSBldmVudDtcblxuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsvLyBCcm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvci5cbiAgICAvLyBXZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgIC8vIFJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gICAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIH0gLy8gTm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gVGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHkuXG5cblxuICByZXR1cm4gaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSh0YXJnZXQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJc0ZvY3VzVmlzaWJsZSgpIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcHJlcGFyZShub2RlLm93bmVyRG9jdW1lbnQpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBpc0ZvY3VzVmlzaWJsZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZFxuICAgKi9cblxuICBmdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgICAvLyBjaGVja2luZyBhZ2FpbnN0IHBvdGVudGlhbCBzdGF0ZSB2YXJpYWJsZSBkb2VzIG5vdCBzdWZmaWNlIGlmIHdlIGZvY3VzIGFuZCBibHVyIHN5bmNocm9ub3VzbHkuXG4gICAgLy8gUmVhY3Qgd291bGRuJ3QgaGF2ZSB0aW1lIHRvIHRyaWdnZXIgYSByZS1yZW5kZXIgc28gYGZvY3VzVmlzaWJsZWAgd291bGQgYmUgc3RhbGUuXG4gICAgLy8gSWRlYWxseSB3ZSB3b3VsZCBhZGp1c3QgYGlzRm9jdXNWaXNpYmxlKGV2ZW50KWAgdG8gbG9vayBhdCBgcmVsYXRlZFRhcmdldGAgZm9yIGJsdXIgZXZlbnRzLlxuICAgIC8vIFRoaXMgZG9lc24ndCB3b3JrIGluIElFMTEgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzc1MVxuICAgIC8vIFRPRE86IGNoZWNrIGFnYWluIGlmIFJlYWN0IHJlbGVhc2VzIHRoZWlyIGludGVybmFsIGNoYW5nZXMgdG8gZm9jdXMgZXZlbnQgaGFuZGxpbmcgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE5MTg2KS5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCkge1xuICAgICAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAgICAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG5cblxuICBmdW5jdGlvbiBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICBpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmXG4gIH07XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlSXNGb2N1c1Zpc2libGUgYXMgdXNlSXNGb2N1c1Zpc2libGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUlzRm9jdXNWaXNpYmxlOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBDYWNoZVByb3ZpZGVyIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJzsgLy8gcHJlcGVuZDogdHJ1ZSBtb3ZlcyBNVUkgc3R5bGVzIHRvIHRoZSB0b3Agb2YgdGhlIDxoZWFkPiBzbyB0aGV5J3JlIGxvYWRlZCBmaXJzdC5cbi8vIEl0IGFsbG93cyBkZXZlbG9wZXJzIHRvIGVhc2lseSBvdmVycmlkZSBNVUkgc3R5bGVzIHdpdGggb3RoZXIgc3R5bGluZyBzb2x1dGlvbnMsIGxpa2UgQ1NTIG1vZHVsZXMuXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBjYWNoZSA9IGNyZWF0ZUNhY2hlKHtcbiAga2V5OiAnY3NzJyxcbiAgcHJlcGVuZDogdHJ1ZVxufSk7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZWRFbmdpbmVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgaW5qZWN0Rmlyc3QsXG4gICAgY2hpbGRyZW5cbiAgfSA9IHByb3BzO1xuICByZXR1cm4gaW5qZWN0Rmlyc3QgPyAvKiNfX1BVUkVfXyovX2pzeChDYWNoZVByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNhY2hlLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSA6IGNoaWxkcmVuO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVkRW5naW5lUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgbGFzdCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgdGhlIHBhZ2UuXG4gICAqIEFzIGEgcmVzdWx0LCB0aGV5IGdhaW4gbW9yZSBzcGVjaWZpY2l0eSB0aGFuIGFueSBvdGhlciBzdHlsZSBzaGVldC5cbiAgICogSWYgeW91IHdhbnQgdG8gb3ZlcnJpZGUgTVVJJ3Mgc3R5bGVzLCBzZXQgdGhpcyBwcm9wLlxuICAgKi9cbiAgaW5qZWN0Rmlyc3Q6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwOyIsImNvbnN0IGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbmV4cG9ydCBkZWZhdWx0IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ211aS5uZXN0ZWQnKSA6ICdfX1RIRU1FX05FU1RFRF9fJzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi4vdXNlVGhlbWUvVGhlbWVDb250ZXh0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgbmVzdGVkIGZyb20gJy4vbmVzdGVkJzsgLy8gVG8gc3VwcG9ydCBjb21wb3NpdGlvbiBvZiB0aGVtZS5cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuZnVuY3Rpb24gbWVyZ2VPdXRlckxvY2FsVGhlbWUob3V0ZXJUaGVtZSwgbG9jYWxUaGVtZSkge1xuICBpZiAodHlwZW9mIGxvY2FsVGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBtZXJnZWRUaGVtZSA9IGxvY2FsVGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFtZXJnZWRUaGVtZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBZb3Ugc2hvdWxkIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIHRoZW1lIGZ1bmN0aW9uLCBpLmUuJywgJzxUaGVtZVByb3ZpZGVyIHRoZW1lPXsoKSA9PiAoe30pfSAvPiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIG91dGVyVGhlbWUsIGxvY2FsVGhlbWUpO1xufVxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB0YWtlcyBhIGB0aGVtZWAgcHJvcC5cbiAqIEl0IG1ha2VzIHRoZSBgdGhlbWVgIGF2YWlsYWJsZSBkb3duIHRoZSBSZWFjdCB0cmVlIHRoYW5rcyB0byBSZWFjdCBjb250ZXh0LlxuICogVGhpcyBjb21wb25lbnQgc2hvdWxkIHByZWZlcmFibHkgYmUgdXNlZCBhdCAqKnRoZSByb290IG9mIHlvdXIgY29tcG9uZW50IHRyZWUqKi5cbiAqL1xuXG5cbmZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIHRoZW1lOiBsb2NhbFRoZW1lXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgb3V0ZXJUaGVtZSA9IHVzZVRoZW1lKCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAob3V0ZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYSB0aGVtZSBmdW5jdGlvbiBwcm9wIHRvIHRoZSBUaGVtZVByb3ZpZGVyIGNvbXBvbmVudDonLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9e291dGVyVGhlbWUgPT4gb3V0ZXJUaGVtZX0gLz4nLCAnJywgJ0hvd2V2ZXIsIG5vIG91dGVyIHRoZW1lIGlzIHByZXNlbnQuJywgJ01ha2Ugc3VyZSBhIHRoZW1lIGlzIGFscmVhZHkgaW5qZWN0ZWQgaGlnaGVyIGluIHRoZSBSZWFjdCB0cmVlICcgKyAnb3IgcHJvdmlkZSBhIHRoZW1lIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGhlbWUgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBvdXRwdXQgPSBvdXRlclRoZW1lID09PSBudWxsID8gbG9jYWxUaGVtZSA6IG1lcmdlT3V0ZXJMb2NhbFRoZW1lKG91dGVyVGhlbWUsIGxvY2FsVGhlbWUpO1xuXG4gICAgaWYgKG91dHB1dCAhPSBudWxsKSB7XG4gICAgICBvdXRwdXRbbmVzdGVkXSA9IG91dGVyVGhlbWUgIT09IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSwgW2xvY2FsVGhlbWUsIG91dGVyVGhlbWVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0aGVtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuIFlvdSBjYW4gcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGV4dGVuZCB0aGUgb3V0ZXIgdGhlbWUuXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lUHJvdmlkZXI7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgYXMgTXVpVGhlbWVQcm92aWRlciB9IGZyb20gJ0BtdWkvcHJpdmF0ZS10aGVtaW5nJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgVGhlbWVDb250ZXh0IGFzIFN0eWxlZEVuZ2luZVRoZW1lQ29udGV4dCB9IGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuZnVuY3Rpb24gSW5uZXJUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZEVuZ2luZVRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0eXBlb2YgdGhlbWUgPT09ICdvYmplY3QnID8gdGhlbWUgOiB7fSxcbiAgICBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW5cbiAgfSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElubmVyVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBtYWtlcyB0aGUgYHRoZW1lYCBhdmFpbGFibGUgZG93biB0aGUgUmVhY3QgdHJlZS5cbiAqIEl0IHNob3VsZCBwcmVmZXJhYmx5IGJlIHVzZWQgYXQgKip0aGUgcm9vdCBvZiB5b3VyIGNvbXBvbmVudCB0cmVlKiouXG4gKi9cblxuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgdGhlbWU6IGxvY2FsVGhlbWVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTXVpVGhlbWVQcm92aWRlciwge1xuICAgIHRoZW1lOiBsb2NhbFRoZW1lLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChJbm5lclRoZW1lUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pXG4gIH0pO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIHRoZW1lIG9iamVjdC4gWW91IGNhbiBwcm92aWRlIGEgZnVuY3Rpb24gdG8gZXh0ZW5kIHRoZSBvdXRlciB0aGVtZS5cbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0gZXhhY3RQcm9wKFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGhlbWVQcm92aWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wic3hcIl07XG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBwcm9wVG9TdHlsZUZ1bmN0aW9uIH0gZnJvbSAnLi4vZ2V0VGhlbWVWYWx1ZSc7XG5cbmNvbnN0IHNwbGl0UHJvcHMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBzeXN0ZW1Qcm9wczoge30sXG4gICAgb3RoZXJQcm9wczoge31cbiAgfTtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF0pIHtcbiAgICAgIHJlc3VsdC5zeXN0ZW1Qcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQub3RoZXJQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHN4OiBpblN4XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCB7XG4gICAgc3lzdGVtUHJvcHMsXG4gICAgb3RoZXJQcm9wc1xuICB9ID0gc3BsaXRQcm9wcyhvdGhlcik7XG4gIGxldCBmaW5hbFN4O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGluU3gpKSB7XG4gICAgZmluYWxTeCA9IFtzeXN0ZW1Qcm9wcywgLi4uaW5TeF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGluU3ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBmaW5hbFN4ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGluU3goLi4uYXJncyk7XG5cbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzeXN0ZW1Qcm9wcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzeXN0ZW1Qcm9wcywgcmVzdWx0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZpbmFsU3ggPSBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIGluU3gpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdGhlclByb3BzLCB7XG4gICAgc3g6IGZpbmFsU3hcbiAgfSk7XG59IiwiLyoqXG4gKiBUT0RPIHY1OiBjb25zaWRlciBtYWtpbmcgaXQgcHJpdmF0ZVxuICpcbiAqIHBhc3NlcyB7dmFsdWV9IHRvIHtyZWZ9XG4gKlxuICogV0FSTklORzogQmUgc3VyZSB0byBvbmx5IGNhbGwgdGhpcyBpbnNpZGUgYSBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBhcyBhIHJlZi5cbiAqIE90aGVyd2lzZSwgbWFrZSBzdXJlIHRvIGNsZWFudXAgdGhlIHByZXZpb3VzIHtyZWZ9IGlmIGl0IGNoYW5nZXMuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMTM1MzlcbiAqXG4gKiBVc2VmdWwgaWYgeW91IHdhbnQgdG8gZXhwb3NlIHRoZSByZWYgb2YgYW4gaW5uZXIgY29tcG9uZW50IHRvIHRoZSBwdWJsaWMgQVBJXG4gKiB3aGlsZSBzdGlsbCB1c2luZyBpdCBpbnNpZGUgdGhlIGNvbXBvbmVudC5cbiAqIEBwYXJhbSByZWYgQSByZWYgY2FsbGJhY2sgb3IgcmVmIG9iamVjdC4gSWYgYW55dGhpbmcgZmFsc3ksIHRoaXMgaXMgYSBuby1vcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JrUmVmKHJlZkEsIHJlZkIpIHtcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgdGhlIHJlZiBwcm9wcyBjaGFuZ2UgYW5kIGFyZSBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yLlxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyZWZBID09IG51bGwgJiYgcmVmQiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmVmFsdWUgPT4ge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59Il0sIm5hbWVzIjpbImVsZW1lbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZXhwb3J0cyIsIl9jcmVhdGVTdmdJY29uIiwiX2pzeFJ1bnRpbWUiLCJfZGVmYXVsdCIsImRlZmF1bHQiLCJqc3giLCJkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfdXRpbHMiLCJjcmVhdGVTdmdJY29uIiwiZ2V0QXZhdGFyVXRpbGl0eUNsYXNzIiwic2xvdCIsImdlbmVyYXRlVXRpbGl0eUNsYXNzIiwiX2V4Y2x1ZGVkIiwiQXZhdGFyUm9vdCIsInN0eWxlZCIsIm5hbWUiLCJvdmVycmlkZXNSZXNvbHZlciIsInByb3BzIiwic3R5bGVzIiwib3duZXJTdGF0ZSIsInJvb3QiLCJ2YXJpYW50IiwiY29sb3JEZWZhdWx0IiwidGhlbWUiLCJwb3NpdGlvbiIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJmbGV4U2hyaW5rIiwid2lkdGgiLCJoZWlnaHQiLCJmb250RmFtaWx5IiwidHlwb2dyYXBoeSIsImZvbnRTaXplIiwicHhUb1JlbSIsImxpbmVIZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJvdmVyZmxvdyIsInVzZXJTZWxlY3QiLCJ2YXJzIiwic2hhcGUiLCJjb2xvciIsInBhbGV0dGUiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZENvbG9yIiwiQXZhdGFyIiwiZGVmYXVsdEJnIiwibW9kZSIsImdyZXkiLCJBdmF0YXJJbWciLCJpbWciLCJ0ZXh0QWxpZ24iLCJvYmplY3RGaXQiLCJ0ZXh0SW5kZW50IiwiQXZhdGFyRmFsbGJhY2siLCJQZXJzb24iLCJmYWxsYmFjayIsImluUHJvcHMiLCJyZWYiLCJ1c2VUaGVtZVByb3BzIiwiYWx0IiwiY2hpbGRyZW4iLCJjaGlsZHJlblByb3AiLCJjbGFzc05hbWUiLCJjb21wb25lbnQiLCJpbWdQcm9wcyIsInNpemVzIiwic3JjIiwic3JjU2V0Iiwib3RoZXIiLCJsb2FkZWQiLCJjcm9zc09yaWdpbiIsInJlZmVycmVyUG9saWN5Iiwic2V0TG9hZGVkIiwiYWN0aXZlIiwiaW1hZ2UiLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJzcmNzZXQiLCJ1c2VMb2FkZWQiLCJoYXNJbWciLCJoYXNJbWdOb3RGYWlsaW5nIiwiY2xhc3NlcyIsInNsb3RzIiwiY29tcG9zZUNsYXNzZXMiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsImFzIiwiY3VycmVudCIsImdldEJhZGdlVW5zdHlsZWRVdGlsaXR5Q2xhc3MiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIiwib21pdEV2ZW50SGFuZGxlcnMiLCJvYmplY3QiLCJ1bmRlZmluZWQiLCJyZXN1bHQiLCJrZXlzIiwiZmlsdGVyIiwicHJvcCIsIm1hdGNoIiwiZm9yRWFjaCIsInVzZVNsb3RQcm9wcyIsInBhcmFtZXRlcnMiLCJfcGFyYW1ldGVycyRhZGRpdGlvbmEiLCJlbGVtZW50VHlwZSIsImV4dGVybmFsU2xvdFByb3BzIiwicmVzdCIsInJlc29sdmVkQ29tcG9uZW50c1Byb3BzIiwiY29tcG9uZW50UHJvcHMiLCJyZXNvbHZlQ29tcG9uZW50UHJvcHMiLCJtZXJnZWRQcm9wcyIsImludGVybmFsUmVmIiwiZ2V0U2xvdFByb3BzIiwiYWRkaXRpb25hbFByb3BzIiwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyIsImpvaW5lZENsYXNzZXMiLCJtZXJnZWRTdHlsZSIsInN0eWxlIiwibGVuZ3RoIiwiZXZlbnRIYW5kbGVycyIsImV4Y2x1ZGVLZXlzIiwiaW5jbHVkZXMiLCJleHRyYWN0RXZlbnRIYW5kbGVycyIsImNvbXBvbmVudHNQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzIiwib3RoZXJQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzIiwiaW50ZXJuYWxTbG90UHJvcHMiLCJtZXJnZVNsb3RQcm9wcyIsInVzZUZvcmtSZWYiLCJvdGhlclByb3BzIiwiaXNIb3N0Q29tcG9uZW50IiwiYXBwZW5kT3duZXJTdGF0ZSIsImNvbXBvbmVudHMiLCJjb21wb25lbnRzUHJvcHMiLCJtYXgiLCJtYXhQcm9wIiwic2hvd1plcm8iLCJiYWRnZUNvbnRlbnQiLCJkaXNwbGF5VmFsdWUiLCJpbnZpc2libGUiLCJiYWRnZUNvbnRlbnRQcm9wIiwiaW52aXNpYmxlUHJvcCIsInByZXZQcm9wcyIsIk51bWJlciIsInVzZUJhZGdlIiwiYmFkZ2UiLCJSb290Iiwicm9vdFByb3BzIiwiQmFkZ2UiLCJiYWRnZVByb3BzIiwiU2xvdCIsImdldEJhZGdlVXRpbGl0eUNsYXNzIiwiQmFkZ2VSb290IiwidmVydGljYWxBbGlnbiIsIkJhZGdlQmFkZ2UiLCJjYXBpdGFsaXplIiwiYW5jaG9yT3JpZ2luIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwib3ZlcmxhcCIsImZsZXhEaXJlY3Rpb24iLCJmbGV4V3JhcCIsImFsaWduQ29udGVudCIsImJveFNpemluZyIsImZvbnRXZWlnaHQiLCJmb250V2VpZ2h0TWVkaXVtIiwibWluV2lkdGgiLCJSQURJVVNfU1RBTkRBUkQiLCJwYWRkaW5nIiwiekluZGV4IiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiY3JlYXRlIiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZHVyYXRpb24iLCJlbnRlcmluZ1NjcmVlbiIsIm1haW4iLCJjb250cmFzdFRleHQiLCJSQURJVVNfRE9UIiwidG9wIiwicmlnaHQiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJib3R0b20iLCJsZWZ0IiwibGVhdmluZ1NjcmVlbiIsIl9jb21wb25lbnRzUHJvcHMkcm9vdCIsIl9jb21wb25lbnRzUHJvcHMkcm9vdDIiLCJfY29tcG9uZW50c1Byb3BzJGJhZGciLCJfY29tcG9uZW50c1Byb3BzJGJhZGcyIiwiYW5jaG9yT3JpZ2luUHJvcCIsIm92ZXJsYXBQcm9wIiwiY29sb3JQcm9wIiwidmFyaWFudFByb3AiLCJnZXRCb3R0b21OYXZpZ2F0aW9uQWN0aW9uVXRpbGl0eUNsYXNzIiwiQm90dG9tTmF2aWdhdGlvbkFjdGlvblJvb3QiLCJCdXR0b25CYXNlIiwic2hvd0xhYmVsIiwic2VsZWN0ZWQiLCJpY29uT25seSIsInNob3J0IiwibWF4V2lkdGgiLCJ0ZXh0Iiwic2Vjb25kYXJ5IiwiZmxleCIsInBhZGRpbmdUb3AiLCJsYWJlbCIsInByaW1hcnkiLCJCb3R0b21OYXZpZ2F0aW9uQWN0aW9uTGFiZWwiLCJvcGFjaXR5IiwidHJhbnNpdGlvbkRlbGF5IiwiaWNvbiIsIm9uQ2hhbmdlIiwib25DbGljayIsImZvY3VzUmlwcGxlIiwiZXZlbnQiLCJnZXRCb3R0b21OYXZpZ2F0aW9uVXRpbGl0eUNsYXNzIiwiQm90dG9tTmF2aWdhdGlvblJvb3QiLCJwYXBlciIsInNob3dMYWJlbHMiLCJjaGlsZCIsImNoaWxkSW5kZXgiLCJjaGlsZFZhbHVlIiwib3B0aW9ucyIsImRlZmF1bHRUaGVtZSIsImRlZmF1bHRDbGFzc05hbWUiLCJnZW5lcmF0ZUNsYXNzTmFtZSIsInN0eWxlRnVuY3Rpb25TeCIsIkJveFJvb3QiLCJ1c2VUaGVtZSIsIl9leHRlbmRTeFByb3AiLCJleHRlbmRTeFByb3AiLCJjcmVhdGVCb3giLCJDbGFzc05hbWVHZW5lcmF0b3IiLCJnZXRDaGlsZE1hcHBpbmciLCJtYXBGbiIsIkNoaWxkcmVuIiwiYyIsImtleSIsImlzVmFsaWRFbGVtZW50IiwibWFwcGVyIiwiZ2V0UHJvcCIsImdldE5leHRDaGlsZE1hcHBpbmciLCJuZXh0UHJvcHMiLCJwcmV2Q2hpbGRNYXBwaW5nIiwib25FeGl0ZWQiLCJuZXh0Q2hpbGRNYXBwaW5nIiwicHJldiIsIm5leHQiLCJnZXRWYWx1ZUZvcktleSIsImkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJwdXNoIiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJpbiIsImNsb25lRWxlbWVudCIsImJpbmQiLCJleGl0IiwiZW50ZXIiLCJ2YWx1ZXMiLCJvYmoiLCJtYXAiLCJrIiwiVHJhbnNpdGlvbkdyb3VwIiwiX1JlYWN0JENvbXBvbmVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnRleHQiLCJfdGhpcyIsImhhbmRsZUV4aXRlZCIsImNhbGwiLCJ0aGlzIiwic3RhdGUiLCJjb250ZXh0VmFsdWUiLCJpc01vdW50aW5nIiwiZmlyc3RSZW5kZXIiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX3Byb3RvIiwiY29tcG9uZW50RGlkTW91bnQiLCJtb3VudGVkIiwic2V0U3RhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIl9yZWYiLCJhcHBlYXIiLCJub2RlIiwiY3VycmVudENoaWxkTWFwcGluZyIsInJlbmRlciIsIl90aGlzJHByb3BzIiwiQ29tcG9uZW50IiwiY2hpbGRGYWN0b3J5IiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsIlByb3ZpZGVyIiwicHJvcFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiX3QiLCJfdDIiLCJfdDMiLCJfdDQiLCJfIiwidCIsImVudGVyS2V5ZnJhbWUiLCJrZXlmcmFtZXMiLCJleGl0S2V5ZnJhbWUiLCJwdWxzYXRlS2V5ZnJhbWUiLCJUb3VjaFJpcHBsZVJvb3QiLCJwb2ludGVyRXZlbnRzIiwiVG91Y2hSaXBwbGVSaXBwbGUiLCJwdWxzYXRlIiwicmlwcGxlWCIsInJpcHBsZVkiLCJyaXBwbGVTaXplIiwiaW5Qcm9wIiwidGltZW91dCIsImxlYXZpbmciLCJzZXRMZWF2aW5nIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlIiwicmlwcGxlVmlzaWJsZSIsInJpcHBsZVB1bHNhdGUiLCJyaXBwbGVTdHlsZXMiLCJjaGlsZENsYXNzTmFtZSIsImNoaWxkTGVhdmluZyIsImNoaWxkUHVsc2F0ZSIsInRpbWVvdXRJZCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzaG9ydGVyIiwiY2VudGVyIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWVyQ29tbWl0IiwiY29udGFpbmVyIiwic3RhcnRDb21taXQiLCJwYXJhbXMiLCJjYiIsIm9sZFJpcHBsZXMiLCJzdGFydCIsImZha2VFbGVtZW50IiwidHlwZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYIiwiY2xpZW50WSIsInRvdWNoZXMiLCJNYXRoIiwicm91bmQiLCJzcXJ0Iiwic2l6ZVgiLCJhYnMiLCJjbGllbnRXaWR0aCIsInNpemVZIiwiY2xpZW50SGVpZ2h0Iiwic3RvcCIsInNsaWNlIiwiZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyIsIkJ1dHRvbkJhc2VSb290IiwiV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3IiLCJvdXRsaW5lIiwiYm9yZGVyIiwibWFyZ2luIiwiY3Vyc29yIiwiTW96QXBwZWFyYW5jZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJ0ZXh0RGVjb3JhdGlvbiIsImJvcmRlclN0eWxlIiwiY29sb3JBZGp1c3QiLCJhY3Rpb24iLCJjZW50ZXJSaXBwbGUiLCJkaXNhYmxlZCIsImRpc2FibGVSaXBwbGUiLCJkaXNhYmxlVG91Y2hSaXBwbGUiLCJMaW5rQ29tcG9uZW50Iiwib25CbHVyIiwib25Db250ZXh0TWVudSIsIm9uRHJhZ0xlYXZlIiwib25Gb2N1cyIsIm9uRm9jdXNWaXNpYmxlIiwib25LZXlEb3duIiwib25LZXlVcCIsIm9uTW91c2VEb3duIiwib25Nb3VzZUxlYXZlIiwib25Nb3VzZVVwIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFN0YXJ0IiwidGFiSW5kZXgiLCJUb3VjaFJpcHBsZVByb3BzIiwidG91Y2hSaXBwbGVSZWYiLCJidXR0b25SZWYiLCJyaXBwbGVSZWYiLCJoYW5kbGVSaXBwbGVSZWYiLCJpc0ZvY3VzVmlzaWJsZVJlZiIsImhhbmRsZUZvY3VzVmlzaWJsZSIsImhhbmRsZUJsdXJWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwidXNlSXNGb2N1c1Zpc2libGUiLCJmb2N1c1Zpc2libGUiLCJzZXRGb2N1c1Zpc2libGUiLCJmb2N1cyIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImVuYWJsZVRvdWNoUmlwcGxlIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwidXNlRXZlbnRDYWxsYmFjayIsImhhbmRsZU1vdXNlRG93biIsImhhbmRsZUNvbnRleHRNZW51IiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJwcmV2ZW50RGVmYXVsdCIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImN1cnJlbnRUYXJnZXQiLCJpc05vbk5hdGl2ZUJ1dHRvbiIsImJ1dHRvbiIsInRhZ05hbWUiLCJocmVmIiwia2V5ZG93blJlZiIsImhhbmRsZUtleURvd24iLCJ0YXJnZXQiLCJoYW5kbGVLZXlVcCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJDb21wb25lbnRQcm9wIiwidG8iLCJidXR0b25Qcm9wcyIsInJvbGUiLCJoYW5kbGVPd25SZWYiLCJoYW5kbGVSZWYiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJjb21wb3NlZENsYXNzZXMiLCJnZXRCdXR0b25VdGlsaXR5Q2xhc3MiLCJfZXhjbHVkZWQyIiwiY29tbW9uSWNvblN0eWxlcyIsInNpemUiLCJCdXR0b25Sb290Iiwic2hvdWxkRm9yd2FyZFByb3AiLCJjb2xvckluaGVyaXQiLCJkaXNhYmxlRWxldmF0aW9uIiwiZnVsbFdpZHRoIiwiX3RoZW1lJHBhbGV0dGUkZ2V0Q29uIiwiX3RoZW1lJHBhbGV0dGUiLCJwcmltYXJ5Q2hhbm5lbCIsImhvdmVyT3BhY2l0eSIsIm1haW5DaGFubmVsIiwiQTEwMCIsImJveFNoYWRvdyIsInNoYWRvd3MiLCJkYXJrIiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZ2V0Q29udHJhc3RUZXh0IiwiYm9yZGVyQ29sb3IiLCJCdXR0b25TdGFydEljb24iLCJzdGFydEljb24iLCJtYXJnaW5SaWdodCIsIm1hcmdpbkxlZnQiLCJCdXR0b25FbmRJY29uIiwiZW5kSWNvbiIsImNvbnRleHRQcm9wcyIsInJlc29sdmVkUHJvcHMiLCJyZXNvbHZlUHJvcHMiLCJkaXNhYmxlRm9jdXNSaXBwbGUiLCJlbmRJY29uUHJvcCIsInN0YXJ0SWNvblByb3AiLCJfdXNlVXRpbGl0eUNsYXNzZXMiLCJjbGFzc2VzUm9vdCIsImdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MiLCJjaXJjdWxhclJvdGF0ZUtleWZyYW1lIiwiY2lyY3VsYXJEYXNoS2V5ZnJhbWUiLCJDaXJjdWxhclByb2dyZXNzUm9vdCIsImNzcyIsIkNpcmN1bGFyUHJvZ3Jlc3NTVkciLCJzdmciLCJDaXJjdWxhclByb2dyZXNzQ2lyY2xlIiwiY2lyY2xlIiwiZGlzYWJsZVNocmluayIsImNpcmNsZURpc2FibGVTaHJpbmsiLCJzdHJva2UiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0IiwidGhpY2tuZXNzIiwiY2lyY2xlU3R5bGUiLCJyb290U3R5bGUiLCJjaXJjdW1mZXJlbmNlIiwiUEkiLCJ0b0ZpeGVkIiwidmlld0JveCIsImN4IiwiY3kiLCJyIiwiZmlsbCIsInN0cm9rZVdpZHRoIiwiZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyIsIkljb25CdXR0b25Sb290IiwiZWRnZSIsInNob3J0ZXN0IiwiZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MiLCJfdDUiLCJfdDYiLCJpbmRldGVybWluYXRlMUtleWZyYW1lIiwiaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSIsImJ1ZmZlcktleWZyYW1lIiwiZ2V0Q29sb3JTaGFkZSIsIkxpbmVhclByb2dyZXNzIiwiTGluZWFyUHJvZ3Jlc3NSb290IiwiY29udGVudCIsIkxpbmVhclByb2dyZXNzRGFzaGVkIiwiZGFzaGVkIiwibWFyZ2luVG9wIiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJMaW5lYXJQcm9ncmVzc0JhcjEiLCJiYXIiLCJiYXIxSW5kZXRlcm1pbmF0ZSIsImJhcjFEZXRlcm1pbmF0ZSIsImJhcjFCdWZmZXIiLCJMaW5lYXJQcm9ncmVzc0JhcjIiLCJiYXIySW5kZXRlcm1pbmF0ZSIsImJhcjJCdWZmZXIiLCJ2YWx1ZUJ1ZmZlciIsImJhcjEiLCJiYXIyIiwiaW5saW5lU3R5bGVzIiwiZGlyZWN0aW9uIiwiZ2V0TGlzdEl0ZW1BdmF0YXJVdGlsaXR5Q2xhc3MiLCJMaXN0SXRlbUF2YXRhclJvb3QiLCJhbGlnbkl0ZW1zRmxleFN0YXJ0IiwiTGlzdENvbnRleHQiLCJnZXRMaXN0SXRlbVRleHRVdGlsaXR5Q2xhc3MiLCJMaXN0SXRlbVRleHRSb290IiwiaW5zZXQiLCJtdWx0aWxpbmUiLCJkZW5zZSIsIm1hcmdpbkJvdHRvbSIsInBhZGRpbmdMZWZ0IiwiZGlzYWJsZVR5cG9ncmFwaHkiLCJwcmltYXJ5UHJvcCIsInByaW1hcnlUeXBvZ3JhcGh5UHJvcHMiLCJzZWNvbmRhcnlQcm9wIiwic2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzIiwiVHlwb2dyYXBoeSIsImdldExpc3RJdGVtVXRpbGl0eUNsYXNzIiwiZ2V0TGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzVXRpbGl0eUNsYXNzIiwiTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25Sb290IiwiZGlzYWJsZUd1dHRlcnMiLCJMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiIsIm11aU5hbWUiLCJMaXN0SXRlbVJvb3QiLCJkaXZpZGVyIiwiZ3V0dGVycyIsImRpc2FibGVQYWRkaW5nIiwiaGFzU2Vjb25kYXJ5QWN0aW9uIiwic2Vjb25kYXJ5QWN0aW9uIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdSaWdodCIsInNlbGVjdGVkT3BhY2l0eSIsImZvY3VzT3BhY2l0eSIsImRpc2FibGVkT3BhY2l0eSIsImJvcmRlckJvdHRvbSIsImJhY2tncm91bmRDbGlwIiwiaG92ZXIiLCJMaXN0SXRlbUNvbnRhaW5lciIsImF1dG9Gb2N1cyIsImNvbXBvbmVudFByb3AiLCJDb250YWluZXJDb21wb25lbnQiLCJDb250YWluZXJQcm9wcyIsIkNvbnRhaW5lckNsYXNzTmFtZSIsImNoaWxkQ29udGV4dCIsImxpc3RJdGVtUmVmIiwidXNlRW5oYW5jZWRFZmZlY3QiLCJpc011aUVsZW1lbnQiLCJwb3AiLCJnZXRMaXN0VXRpbGl0eUNsYXNzIiwiTGlzdFJvb3QiLCJzdWJoZWFkZXIiLCJsaXN0U3R5bGUiLCJnZXRQYXBlclV0aWxpdHlDbGFzcyIsImdldE92ZXJsYXlBbHBoYSIsImVsZXZhdGlvbiIsImFscGhhVmFsdWUiLCJsb2ciLCJQYXBlclJvb3QiLCJzcXVhcmUiLCJyb3VuZGVkIiwiX3RoZW1lJHZhcnMkb3ZlcmxheXMiLCJvdmVybGF5cyIsImdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MiLCJUeXBvZ3JhcGh5Um9vdCIsImFsaWduIiwibm9XcmFwIiwiZ3V0dGVyQm90dG9tIiwicGFyYWdyYXBoIiwidGV4dE92ZXJmbG93Iiwid2hpdGVTcGFjZSIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsInN1YnRpdGxlMSIsInN1YnRpdGxlMiIsImJvZHkxIiwiYm9keTIiLCJpbmhlcml0IiwiY29sb3JUcmFuc2Zvcm1hdGlvbnMiLCJ0ZXh0UHJpbWFyeSIsInRleHRTZWNvbmRhcnkiLCJlcnJvciIsInRoZW1lUHJvcHMiLCJ0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzIiwidmFyaWFudE1hcHBpbmciLCJTeW1ib2wiLCJmb3IiLCJmdW5jcyIsInJlZHVjZSIsImFjYyIsImZ1bmMiLCJhcmdzIiwiYXBwbHkiLCJ3YWl0IiwiZGVib3VuY2VkIiwiY2xlYXIiLCJ2YWxpZGF0b3IiLCJyZWFzb24iLCJvd25lckRvY3VtZW50IiwiZG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsImNvbXBvbmVudE5hbWVJbkVycm9yIiwiZ2xvYmFsSWQiLCJtYXliZVJlYWN0VXNlSWQiLCJpZE92ZXJyaWRlIiwicmVhY3RJZCIsImRlZmF1bHRJZCIsInNldERlZmF1bHRJZCIsImlkIiwidXNlR2xvYmFsSWQiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsImNvbnRyb2xsZWQiLCJkZWZhdWx0UHJvcCIsImlzQ29udHJvbGxlZCIsInZhbHVlU3RhdGUiLCJzZXRWYWx1ZSIsIm5ld1ZhbHVlIiwidW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yIiwiY29uZmlndXJlIiwiZ2VuZXJhdG9yIiwiY29uc29sZSIsIndhcm4iLCJqb2luIiwibXVpTmFtZXMiLCJpbmRleE9mIiwiZm4iLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJpbnB1dFR5cGVzV2hpdGVsaXN0Iiwic2VhcmNoIiwidXJsIiwidGVsIiwiZW1haWwiLCJwYXNzd29yZCIsIm51bWJlciIsImRhdGUiLCJtb250aCIsIndlZWsiLCJ0aW1lIiwiZGF0ZXRpbWUiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImRvYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJtYXRjaGVzIiwicmVhZE9ubHkiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5IiwiaXNGb2N1c1Zpc2libGUiLCJjYWNoZSIsInByZXBlbmQiLCJTdHlsZWRFbmdpbmVQcm92aWRlciIsImluamVjdEZpcnN0IiwiQ2FjaGVQcm92aWRlciIsImxvY2FsVGhlbWUiLCJvdXRlclRoZW1lIiwib3V0cHV0IiwibWVyZ2VPdXRlckxvY2FsVGhlbWUiLCJuZXN0ZWQiLCJUaGVtZUNvbnRleHQiLCJJbm5lclRoZW1lUHJvdmlkZXIiLCJzeCIsImluU3giLCJzeXN0ZW1Qcm9wcyIsInNwbGl0UHJvcHMiLCJmaW5hbFN4IiwiQXJyYXkiLCJpc0FycmF5Iiwic2V0UmVmIiwicmVmQSIsInJlZkIiLCJyZWZWYWx1ZSIsIm1vZHVsZSIsIl9fZXNNb2R1bGUiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJfX3Byb3RvX18iXSwic291cmNlUm9vdCI6IiJ9